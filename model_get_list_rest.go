/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetListRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetListRest{}

// GetListRest struct for GetListRest
type GetListRest struct {
	Sortablefields []string `json:"sortablefields,omitempty"`
	Sortable *bool `json:"sortable,omitempty"`
	Filterable *bool `json:"filterable,omitempty"`
	Filterablefields []FilterFieldClassMapping `json:"filterablefields,omitempty"`
	Pageable *bool `json:"pageable,omitempty"`
}

// NewGetListRest instantiates a new GetListRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetListRest() *GetListRest {
	this := GetListRest{}
	return &this
}

// NewGetListRestWithDefaults instantiates a new GetListRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetListRestWithDefaults() *GetListRest {
	this := GetListRest{}
	return &this
}

// GetSortablefields returns the Sortablefields field value if set, zero value otherwise.
func (o *GetListRest) GetSortablefields() []string {
	if o == nil || IsNil(o.Sortablefields) {
		var ret []string
		return ret
	}
	return o.Sortablefields
}

// GetSortablefieldsOk returns a tuple with the Sortablefields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetListRest) GetSortablefieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.Sortablefields) {
		return nil, false
	}
	return o.Sortablefields, true
}

// HasSortablefields returns a boolean if a field has been set.
func (o *GetListRest) HasSortablefields() bool {
	if o != nil && !IsNil(o.Sortablefields) {
		return true
	}

	return false
}

// SetSortablefields gets a reference to the given []string and assigns it to the Sortablefields field.
func (o *GetListRest) SetSortablefields(v []string) {
	o.Sortablefields = v
}

// GetSortable returns the Sortable field value if set, zero value otherwise.
func (o *GetListRest) GetSortable() bool {
	if o == nil || IsNil(o.Sortable) {
		var ret bool
		return ret
	}
	return *o.Sortable
}

// GetSortableOk returns a tuple with the Sortable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetListRest) GetSortableOk() (*bool, bool) {
	if o == nil || IsNil(o.Sortable) {
		return nil, false
	}
	return o.Sortable, true
}

// HasSortable returns a boolean if a field has been set.
func (o *GetListRest) HasSortable() bool {
	if o != nil && !IsNil(o.Sortable) {
		return true
	}

	return false
}

// SetSortable gets a reference to the given bool and assigns it to the Sortable field.
func (o *GetListRest) SetSortable(v bool) {
	o.Sortable = &v
}

// GetFilterable returns the Filterable field value if set, zero value otherwise.
func (o *GetListRest) GetFilterable() bool {
	if o == nil || IsNil(o.Filterable) {
		var ret bool
		return ret
	}
	return *o.Filterable
}

// GetFilterableOk returns a tuple with the Filterable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetListRest) GetFilterableOk() (*bool, bool) {
	if o == nil || IsNil(o.Filterable) {
		return nil, false
	}
	return o.Filterable, true
}

// HasFilterable returns a boolean if a field has been set.
func (o *GetListRest) HasFilterable() bool {
	if o != nil && !IsNil(o.Filterable) {
		return true
	}

	return false
}

// SetFilterable gets a reference to the given bool and assigns it to the Filterable field.
func (o *GetListRest) SetFilterable(v bool) {
	o.Filterable = &v
}

// GetFilterablefields returns the Filterablefields field value if set, zero value otherwise.
func (o *GetListRest) GetFilterablefields() []FilterFieldClassMapping {
	if o == nil || IsNil(o.Filterablefields) {
		var ret []FilterFieldClassMapping
		return ret
	}
	return o.Filterablefields
}

// GetFilterablefieldsOk returns a tuple with the Filterablefields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetListRest) GetFilterablefieldsOk() ([]FilterFieldClassMapping, bool) {
	if o == nil || IsNil(o.Filterablefields) {
		return nil, false
	}
	return o.Filterablefields, true
}

// HasFilterablefields returns a boolean if a field has been set.
func (o *GetListRest) HasFilterablefields() bool {
	if o != nil && !IsNil(o.Filterablefields) {
		return true
	}

	return false
}

// SetFilterablefields gets a reference to the given []FilterFieldClassMapping and assigns it to the Filterablefields field.
func (o *GetListRest) SetFilterablefields(v []FilterFieldClassMapping) {
	o.Filterablefields = v
}

// GetPageable returns the Pageable field value if set, zero value otherwise.
func (o *GetListRest) GetPageable() bool {
	if o == nil || IsNil(o.Pageable) {
		var ret bool
		return ret
	}
	return *o.Pageable
}

// GetPageableOk returns a tuple with the Pageable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetListRest) GetPageableOk() (*bool, bool) {
	if o == nil || IsNil(o.Pageable) {
		return nil, false
	}
	return o.Pageable, true
}

// HasPageable returns a boolean if a field has been set.
func (o *GetListRest) HasPageable() bool {
	if o != nil && !IsNil(o.Pageable) {
		return true
	}

	return false
}

// SetPageable gets a reference to the given bool and assigns it to the Pageable field.
func (o *GetListRest) SetPageable(v bool) {
	o.Pageable = &v
}

func (o GetListRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetListRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sortablefields) {
		toSerialize["sortablefields"] = o.Sortablefields
	}
	if !IsNil(o.Sortable) {
		toSerialize["sortable"] = o.Sortable
	}
	if !IsNil(o.Filterable) {
		toSerialize["filterable"] = o.Filterable
	}
	if !IsNil(o.Filterablefields) {
		toSerialize["filterablefields"] = o.Filterablefields
	}
	if !IsNil(o.Pageable) {
		toSerialize["pageable"] = o.Pageable
	}
	return toSerialize, nil
}

type NullableGetListRest struct {
	value *GetListRest
	isSet bool
}

func (v NullableGetListRest) Get() *GetListRest {
	return v.value
}

func (v *NullableGetListRest) Set(val *GetListRest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetListRest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetListRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetListRest(val *GetListRest) *NullableGetListRest {
	return &NullableGetListRest{value: val, isSet: true}
}

func (v NullableGetListRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetListRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


