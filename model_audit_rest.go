/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuditRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditRest{}

// AuditRest struct for AuditRest
type AuditRest struct {
	Component *string `json:"component,omitempty"`
	Command *string `json:"command,omitempty"`
	Username *string `json:"username,omitempty"`
	Ipaddress *string `json:"ipaddress,omitempty"`
	Status *int32 `json:"status,omitempty"`
	Jobname *string `json:"jobname,omitempty"`
	Issuedate *int64 `json:"issuedate,omitempty"`
	Proxy *string `json:"proxy,omitempty"`
	Privileged *bool `json:"privileged,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewAuditRest instantiates a new AuditRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditRest() *AuditRest {
	this := AuditRest{}
	return &this
}

// NewAuditRestWithDefaults instantiates a new AuditRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditRestWithDefaults() *AuditRest {
	this := AuditRest{}
	return &this
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *AuditRest) GetComponent() string {
	if o == nil || IsNil(o.Component) {
		var ret string
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditRest) GetComponentOk() (*string, bool) {
	if o == nil || IsNil(o.Component) {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *AuditRest) HasComponent() bool {
	if o != nil && !IsNil(o.Component) {
		return true
	}

	return false
}

// SetComponent gets a reference to the given string and assigns it to the Component field.
func (o *AuditRest) SetComponent(v string) {
	o.Component = &v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *AuditRest) GetCommand() string {
	if o == nil || IsNil(o.Command) {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditRest) GetCommandOk() (*string, bool) {
	if o == nil || IsNil(o.Command) {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *AuditRest) HasCommand() bool {
	if o != nil && !IsNil(o.Command) {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *AuditRest) SetCommand(v string) {
	o.Command = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *AuditRest) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditRest) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *AuditRest) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *AuditRest) SetUsername(v string) {
	o.Username = &v
}

// GetIpaddress returns the Ipaddress field value if set, zero value otherwise.
func (o *AuditRest) GetIpaddress() string {
	if o == nil || IsNil(o.Ipaddress) {
		var ret string
		return ret
	}
	return *o.Ipaddress
}

// GetIpaddressOk returns a tuple with the Ipaddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditRest) GetIpaddressOk() (*string, bool) {
	if o == nil || IsNil(o.Ipaddress) {
		return nil, false
	}
	return o.Ipaddress, true
}

// HasIpaddress returns a boolean if a field has been set.
func (o *AuditRest) HasIpaddress() bool {
	if o != nil && !IsNil(o.Ipaddress) {
		return true
	}

	return false
}

// SetIpaddress gets a reference to the given string and assigns it to the Ipaddress field.
func (o *AuditRest) SetIpaddress(v string) {
	o.Ipaddress = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AuditRest) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditRest) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AuditRest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *AuditRest) SetStatus(v int32) {
	o.Status = &v
}

// GetJobname returns the Jobname field value if set, zero value otherwise.
func (o *AuditRest) GetJobname() string {
	if o == nil || IsNil(o.Jobname) {
		var ret string
		return ret
	}
	return *o.Jobname
}

// GetJobnameOk returns a tuple with the Jobname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditRest) GetJobnameOk() (*string, bool) {
	if o == nil || IsNil(o.Jobname) {
		return nil, false
	}
	return o.Jobname, true
}

// HasJobname returns a boolean if a field has been set.
func (o *AuditRest) HasJobname() bool {
	if o != nil && !IsNil(o.Jobname) {
		return true
	}

	return false
}

// SetJobname gets a reference to the given string and assigns it to the Jobname field.
func (o *AuditRest) SetJobname(v string) {
	o.Jobname = &v
}

// GetIssuedate returns the Issuedate field value if set, zero value otherwise.
func (o *AuditRest) GetIssuedate() int64 {
	if o == nil || IsNil(o.Issuedate) {
		var ret int64
		return ret
	}
	return *o.Issuedate
}

// GetIssuedateOk returns a tuple with the Issuedate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditRest) GetIssuedateOk() (*int64, bool) {
	if o == nil || IsNil(o.Issuedate) {
		return nil, false
	}
	return o.Issuedate, true
}

// HasIssuedate returns a boolean if a field has been set.
func (o *AuditRest) HasIssuedate() bool {
	if o != nil && !IsNil(o.Issuedate) {
		return true
	}

	return false
}

// SetIssuedate gets a reference to the given int64 and assigns it to the Issuedate field.
func (o *AuditRest) SetIssuedate(v int64) {
	o.Issuedate = &v
}

// GetProxy returns the Proxy field value if set, zero value otherwise.
func (o *AuditRest) GetProxy() string {
	if o == nil || IsNil(o.Proxy) {
		var ret string
		return ret
	}
	return *o.Proxy
}

// GetProxyOk returns a tuple with the Proxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditRest) GetProxyOk() (*string, bool) {
	if o == nil || IsNil(o.Proxy) {
		return nil, false
	}
	return o.Proxy, true
}

// HasProxy returns a boolean if a field has been set.
func (o *AuditRest) HasProxy() bool {
	if o != nil && !IsNil(o.Proxy) {
		return true
	}

	return false
}

// SetProxy gets a reference to the given string and assigns it to the Proxy field.
func (o *AuditRest) SetProxy(v string) {
	o.Proxy = &v
}

// GetPrivileged returns the Privileged field value if set, zero value otherwise.
func (o *AuditRest) GetPrivileged() bool {
	if o == nil || IsNil(o.Privileged) {
		var ret bool
		return ret
	}
	return *o.Privileged
}

// GetPrivilegedOk returns a tuple with the Privileged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditRest) GetPrivilegedOk() (*bool, bool) {
	if o == nil || IsNil(o.Privileged) {
		return nil, false
	}
	return o.Privileged, true
}

// HasPrivileged returns a boolean if a field has been set.
func (o *AuditRest) HasPrivileged() bool {
	if o != nil && !IsNil(o.Privileged) {
		return true
	}

	return false
}

// SetPrivileged gets a reference to the given bool and assigns it to the Privileged field.
func (o *AuditRest) SetPrivileged(v bool) {
	o.Privileged = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuditRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuditRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuditRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *AuditRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *AuditRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *AuditRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *AuditRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *AuditRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *AuditRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *AuditRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *AuditRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *AuditRest) SetStale(v bool) {
	o.Stale = &v
}

func (o AuditRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Component) {
		toSerialize["component"] = o.Component
	}
	if !IsNil(o.Command) {
		toSerialize["command"] = o.Command
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Ipaddress) {
		toSerialize["ipaddress"] = o.Ipaddress
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Jobname) {
		toSerialize["jobname"] = o.Jobname
	}
	if !IsNil(o.Issuedate) {
		toSerialize["issuedate"] = o.Issuedate
	}
	if !IsNil(o.Proxy) {
		toSerialize["proxy"] = o.Proxy
	}
	if !IsNil(o.Privileged) {
		toSerialize["privileged"] = o.Privileged
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableAuditRest struct {
	value *AuditRest
	isSet bool
}

func (v NullableAuditRest) Get() *AuditRest {
	return v.value
}

func (v *NullableAuditRest) Set(val *AuditRest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditRest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditRest(val *AuditRest) *NullableAuditRest {
	return &NullableAuditRest{value: val, isSet: true}
}

func (v NullableAuditRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


