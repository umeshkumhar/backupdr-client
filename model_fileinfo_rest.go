/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FileinfoRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileinfoRest{}

// FileinfoRest struct for FileinfoRest
type FileinfoRest struct {
	Filepath *string `json:"filepath,omitempty"`
	Isrecursive *bool `json:"isrecursive,omitempty"`
	Filename *string `json:"filename,omitempty"`
}

// NewFileinfoRest instantiates a new FileinfoRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileinfoRest() *FileinfoRest {
	this := FileinfoRest{}
	return &this
}

// NewFileinfoRestWithDefaults instantiates a new FileinfoRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileinfoRestWithDefaults() *FileinfoRest {
	this := FileinfoRest{}
	return &this
}

// GetFilepath returns the Filepath field value if set, zero value otherwise.
func (o *FileinfoRest) GetFilepath() string {
	if o == nil || IsNil(o.Filepath) {
		var ret string
		return ret
	}
	return *o.Filepath
}

// GetFilepathOk returns a tuple with the Filepath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileinfoRest) GetFilepathOk() (*string, bool) {
	if o == nil || IsNil(o.Filepath) {
		return nil, false
	}
	return o.Filepath, true
}

// HasFilepath returns a boolean if a field has been set.
func (o *FileinfoRest) HasFilepath() bool {
	if o != nil && !IsNil(o.Filepath) {
		return true
	}

	return false
}

// SetFilepath gets a reference to the given string and assigns it to the Filepath field.
func (o *FileinfoRest) SetFilepath(v string) {
	o.Filepath = &v
}

// GetIsrecursive returns the Isrecursive field value if set, zero value otherwise.
func (o *FileinfoRest) GetIsrecursive() bool {
	if o == nil || IsNil(o.Isrecursive) {
		var ret bool
		return ret
	}
	return *o.Isrecursive
}

// GetIsrecursiveOk returns a tuple with the Isrecursive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileinfoRest) GetIsrecursiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Isrecursive) {
		return nil, false
	}
	return o.Isrecursive, true
}

// HasIsrecursive returns a boolean if a field has been set.
func (o *FileinfoRest) HasIsrecursive() bool {
	if o != nil && !IsNil(o.Isrecursive) {
		return true
	}

	return false
}

// SetIsrecursive gets a reference to the given bool and assigns it to the Isrecursive field.
func (o *FileinfoRest) SetIsrecursive(v bool) {
	o.Isrecursive = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *FileinfoRest) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileinfoRest) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *FileinfoRest) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *FileinfoRest) SetFilename(v string) {
	o.Filename = &v
}

func (o FileinfoRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileinfoRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filepath) {
		toSerialize["filepath"] = o.Filepath
	}
	if !IsNil(o.Isrecursive) {
		toSerialize["isrecursive"] = o.Isrecursive
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	return toSerialize, nil
}

type NullableFileinfoRest struct {
	value *FileinfoRest
	isSet bool
}

func (v NullableFileinfoRest) Get() *FileinfoRest {
	return v.value
}

func (v *NullableFileinfoRest) Set(val *FileinfoRest) {
	v.value = val
	v.isSet = true
}

func (v NullableFileinfoRest) IsSet() bool {
	return v.isSet
}

func (v *NullableFileinfoRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileinfoRest(val *FileinfoRest) *NullableFileinfoRest {
	return &NullableFileinfoRest{value: val, isSet: true}
}

func (v NullableFileinfoRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileinfoRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


