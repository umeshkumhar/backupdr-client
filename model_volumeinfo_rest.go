/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VolumeinfoRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeinfoRest{}

// VolumeinfoRest struct for VolumeinfoRest
type VolumeinfoRest struct {
	Uniqueid *string `json:"uniqueid,omitempty"`
}

// NewVolumeinfoRest instantiates a new VolumeinfoRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeinfoRest() *VolumeinfoRest {
	this := VolumeinfoRest{}
	return &this
}

// NewVolumeinfoRestWithDefaults instantiates a new VolumeinfoRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeinfoRestWithDefaults() *VolumeinfoRest {
	this := VolumeinfoRest{}
	return &this
}

// GetUniqueid returns the Uniqueid field value if set, zero value otherwise.
func (o *VolumeinfoRest) GetUniqueid() string {
	if o == nil || IsNil(o.Uniqueid) {
		var ret string
		return ret
	}
	return *o.Uniqueid
}

// GetUniqueidOk returns a tuple with the Uniqueid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeinfoRest) GetUniqueidOk() (*string, bool) {
	if o == nil || IsNil(o.Uniqueid) {
		return nil, false
	}
	return o.Uniqueid, true
}

// HasUniqueid returns a boolean if a field has been set.
func (o *VolumeinfoRest) HasUniqueid() bool {
	if o != nil && !IsNil(o.Uniqueid) {
		return true
	}

	return false
}

// SetUniqueid gets a reference to the given string and assigns it to the Uniqueid field.
func (o *VolumeinfoRest) SetUniqueid(v string) {
	o.Uniqueid = &v
}

func (o VolumeinfoRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeinfoRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uniqueid) {
		toSerialize["uniqueid"] = o.Uniqueid
	}
	return toSerialize, nil
}

type NullableVolumeinfoRest struct {
	value *VolumeinfoRest
	isSet bool
}

func (v NullableVolumeinfoRest) Get() *VolumeinfoRest {
	return v.value
}

func (v *NullableVolumeinfoRest) Set(val *VolumeinfoRest) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeinfoRest) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeinfoRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeinfoRest(val *VolumeinfoRest) *NullableVolumeinfoRest {
	return &NullableVolumeinfoRest{value: val, isSet: true}
}

func (v NullableVolumeinfoRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeinfoRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


