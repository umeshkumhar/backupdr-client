/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ArrayTypeRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArrayTypeRest{}

// ArrayTypeRest struct for ArrayTypeRest
type ArrayTypeRest struct {
	Name *string `json:"name,omitempty"`
	Label *string `json:"label,omitempty"`
	Options []ArrayOptionRest `json:"options,omitempty"`
	Appliances []ClusterRest `json:"appliances,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewArrayTypeRest instantiates a new ArrayTypeRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArrayTypeRest() *ArrayTypeRest {
	this := ArrayTypeRest{}
	return &this
}

// NewArrayTypeRestWithDefaults instantiates a new ArrayTypeRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArrayTypeRestWithDefaults() *ArrayTypeRest {
	this := ArrayTypeRest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ArrayTypeRest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayTypeRest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ArrayTypeRest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ArrayTypeRest) SetName(v string) {
	o.Name = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ArrayTypeRest) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayTypeRest) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ArrayTypeRest) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ArrayTypeRest) SetLabel(v string) {
	o.Label = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ArrayTypeRest) GetOptions() []ArrayOptionRest {
	if o == nil || IsNil(o.Options) {
		var ret []ArrayOptionRest
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayTypeRest) GetOptionsOk() ([]ArrayOptionRest, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ArrayTypeRest) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []ArrayOptionRest and assigns it to the Options field.
func (o *ArrayTypeRest) SetOptions(v []ArrayOptionRest) {
	o.Options = v
}

// GetAppliances returns the Appliances field value if set, zero value otherwise.
func (o *ArrayTypeRest) GetAppliances() []ClusterRest {
	if o == nil || IsNil(o.Appliances) {
		var ret []ClusterRest
		return ret
	}
	return o.Appliances
}

// GetAppliancesOk returns a tuple with the Appliances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayTypeRest) GetAppliancesOk() ([]ClusterRest, bool) {
	if o == nil || IsNil(o.Appliances) {
		return nil, false
	}
	return o.Appliances, true
}

// HasAppliances returns a boolean if a field has been set.
func (o *ArrayTypeRest) HasAppliances() bool {
	if o != nil && !IsNil(o.Appliances) {
		return true
	}

	return false
}

// SetAppliances gets a reference to the given []ClusterRest and assigns it to the Appliances field.
func (o *ArrayTypeRest) SetAppliances(v []ClusterRest) {
	o.Appliances = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ArrayTypeRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayTypeRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ArrayTypeRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ArrayTypeRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ArrayTypeRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayTypeRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ArrayTypeRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ArrayTypeRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *ArrayTypeRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayTypeRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *ArrayTypeRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *ArrayTypeRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *ArrayTypeRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayTypeRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *ArrayTypeRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *ArrayTypeRest) SetStale(v bool) {
	o.Stale = &v
}

func (o ArrayTypeRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArrayTypeRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Appliances) {
		toSerialize["appliances"] = o.Appliances
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableArrayTypeRest struct {
	value *ArrayTypeRest
	isSet bool
}

func (v NullableArrayTypeRest) Get() *ArrayTypeRest {
	return v.value
}

func (v *NullableArrayTypeRest) Set(val *ArrayTypeRest) {
	v.value = val
	v.isSet = true
}

func (v NullableArrayTypeRest) IsSet() bool {
	return v.isSet
}

func (v *NullableArrayTypeRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArrayTypeRest(val *ArrayTypeRest) *NullableArrayTypeRest {
	return &NullableArrayTypeRest{value: val, isSet: true}
}

func (v NullableArrayTypeRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArrayTypeRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


