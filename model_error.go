/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Error type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Error{}

// Error struct for Error
type Error struct {
	// Error code
	ErrCode int32 `json:"err_code"`
	// Optional error message
	ErrMessage *string `json:"err_message,omitempty"`
}

type _Error Error

// NewError instantiates a new Error object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError(errCode int32) *Error {
	this := Error{}
	this.ErrCode = errCode
	return &this
}

// NewErrorWithDefaults instantiates a new Error object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorWithDefaults() *Error {
	this := Error{}
	return &this
}

// GetErrCode returns the ErrCode field value
func (o *Error) GetErrCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ErrCode
}

// GetErrCodeOk returns a tuple with the ErrCode field value
// and a boolean to check if the value has been set.
func (o *Error) GetErrCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrCode, true
}

// SetErrCode sets field value
func (o *Error) SetErrCode(v int32) {
	o.ErrCode = v
}

// GetErrMessage returns the ErrMessage field value if set, zero value otherwise.
func (o *Error) GetErrMessage() string {
	if o == nil || IsNil(o.ErrMessage) {
		var ret string
		return ret
	}
	return *o.ErrMessage
}

// GetErrMessageOk returns a tuple with the ErrMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetErrMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrMessage) {
		return nil, false
	}
	return o.ErrMessage, true
}

// HasErrMessage returns a boolean if a field has been set.
func (o *Error) HasErrMessage() bool {
	if o != nil && !IsNil(o.ErrMessage) {
		return true
	}

	return false
}

// SetErrMessage gets a reference to the given string and assigns it to the ErrMessage field.
func (o *Error) SetErrMessage(v string) {
	o.ErrMessage = &v
}

func (o Error) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Error) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["err_code"] = o.ErrCode
	if !IsNil(o.ErrMessage) {
		toSerialize["err_message"] = o.ErrMessage
	}
	return toSerialize, nil
}

func (o *Error) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"err_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varError := _Error{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varError)

	if err != nil {
		return err
	}

	*o = Error(varError)

	return err
}

type NullableError struct {
	value *Error
	isSet bool
}

func (v NullableError) Get() *Error {
	return v.value
}

func (v *NullableError) Set(val *Error) {
	v.value = val
	v.isSet = true
}

func (v NullableError) IsSet() bool {
	return v.isSet
}

func (v *NullableError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError(val *Error) *NullableError {
	return &NullableError{value: val, isSet: true}
}

func (v NullableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


