/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApplicationRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationRest{}

// ApplicationRest Application Rest Object
type ApplicationRest struct {
	Immutable *bool `json:"immutable,omitempty"`
	Description *string `json:"description,omitempty"`
	// List of entries representing the consolidated application on particular appliances.
	Sources []ApplicationRest `json:"sources,omitempty"`
	// Application's name. It may not be the same as appname.
	Name *string `json:"name,omitempty"`
	Host *HostRest `json:"host,omitempty"`
	// Application's id on the appliance.
	Srcid *string `json:"srcid,omitempty"`
	Uniquename *string `json:"uniquename,omitempty"`
	// Application name.
	Appname *string `json:"appname,omitempty"`
	// If the application is a VM
	Isvm *bool `json:"isvm,omitempty"`
	// If the application is protected.
	Managed *bool `json:"managed,omitempty"`
	// If the backup schedule is turned off
	Scheduleoff *bool `json:"scheduleoff,omitempty"`
	// Application type.
	Apptype *string `json:"apptype,omitempty"`
	// If this application is a shadow, the value of this attribute will be the id of the original application on original appliance.
	Originalappid *string `json:"originalappid,omitempty"`
	Pathname *string `json:"pathname,omitempty"`
	Username *string `json:"username,omitempty"`
	// List of backups, if available.
	Backup []BackupRest `json:"backup,omitempty"`
	// Indicates if the application is orphan, which still has backups but the original application was unproteced and removed on purpose.
	Isorphan *bool `json:"isorphan,omitempty"`
	// Application Class. It's similar to application type. It is useful in app-aware mount
	Appclass *string `json:"appclass,omitempty"`
	Sla *SlaRest `json:"sla,omitempty"`
	Cluster *ClusterRest `json:"cluster,omitempty"`
	Friendlypath *string `json:"friendlypath,omitempty"`
	// Application's original appliance's clusterid.
	Sourcecluster *string `json:"sourcecluster,omitempty"`
	Friendlytype *string `json:"friendlytype,omitempty"`
	Volumes []string `json:"volumes,omitempty"`
	// If the application can be protected.
	Protectable *string `json:"protectable,omitempty"`
	Failoverstate *string `json:"failoverstate,omitempty"`
	Auxinfo *string `json:"auxinfo,omitempty"`
	// Application version.
	Appversion *string `json:"appversion,omitempty"`
	// Network name.
	Networkname *string `json:"networkname,omitempty"`
	// Network IP address.
	Networkip *string `json:"networkip,omitempty"`
	// If the application is marked as to be ignored.
	Ignore *bool `json:"ignore,omitempty"`
	// If the application is clustered.
	Isclustered *bool `json:"isclustered,omitempty"`
	// Indicate if this application is a child-app from app-aware mount.
	Frommount *bool `json:"frommount,omitempty"`
	// Sensitivity level.
	Sensitivity *int32 `json:"sensitivity,omitempty"`
	Mountedhosts []HostRest `json:"mountedhosts,omitempty"`
	// Available SLP (profiles) that this application can potentially use for protection.
	AvailableSlp []SlpRest `json:"available_slp,omitempty"`
	// List of organizations that the application belongs to.
	Orglist []OrganizationRest `json:"orglist,omitempty"`
	// If the application is being restore replaced.
	Isrestoring *bool `json:"isrestoring,omitempty"`
	Consistencygroup *ApplicationRest `json:"consistencygroup,omitempty"`
	Logicalgroup *LogicalGroupRest `json:"logicalgroup,omitempty"`
	// Application's states.
	AppstateText []string `json:"appstate_text,omitempty"`
	Diskpools []string `json:"diskpools,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewApplicationRest instantiates a new ApplicationRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationRest() *ApplicationRest {
	this := ApplicationRest{}
	return &this
}

// NewApplicationRestWithDefaults instantiates a new ApplicationRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationRestWithDefaults() *ApplicationRest {
	this := ApplicationRest{}
	return &this
}

// GetImmutable returns the Immutable field value if set, zero value otherwise.
func (o *ApplicationRest) GetImmutable() bool {
	if o == nil || IsNil(o.Immutable) {
		var ret bool
		return ret
	}
	return *o.Immutable
}

// GetImmutableOk returns a tuple with the Immutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetImmutableOk() (*bool, bool) {
	if o == nil || IsNil(o.Immutable) {
		return nil, false
	}
	return o.Immutable, true
}

// HasImmutable returns a boolean if a field has been set.
func (o *ApplicationRest) HasImmutable() bool {
	if o != nil && !IsNil(o.Immutable) {
		return true
	}

	return false
}

// SetImmutable gets a reference to the given bool and assigns it to the Immutable field.
func (o *ApplicationRest) SetImmutable(v bool) {
	o.Immutable = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApplicationRest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApplicationRest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApplicationRest) SetDescription(v string) {
	o.Description = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *ApplicationRest) GetSources() []ApplicationRest {
	if o == nil || IsNil(o.Sources) {
		var ret []ApplicationRest
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetSourcesOk() ([]ApplicationRest, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *ApplicationRest) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []ApplicationRest and assigns it to the Sources field.
func (o *ApplicationRest) SetSources(v []ApplicationRest) {
	o.Sources = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApplicationRest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApplicationRest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApplicationRest) SetName(v string) {
	o.Name = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *ApplicationRest) GetHost() HostRest {
	if o == nil || IsNil(o.Host) {
		var ret HostRest
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetHostOk() (*HostRest, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *ApplicationRest) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given HostRest and assigns it to the Host field.
func (o *ApplicationRest) SetHost(v HostRest) {
	o.Host = &v
}

// GetSrcid returns the Srcid field value if set, zero value otherwise.
func (o *ApplicationRest) GetSrcid() string {
	if o == nil || IsNil(o.Srcid) {
		var ret string
		return ret
	}
	return *o.Srcid
}

// GetSrcidOk returns a tuple with the Srcid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetSrcidOk() (*string, bool) {
	if o == nil || IsNil(o.Srcid) {
		return nil, false
	}
	return o.Srcid, true
}

// HasSrcid returns a boolean if a field has been set.
func (o *ApplicationRest) HasSrcid() bool {
	if o != nil && !IsNil(o.Srcid) {
		return true
	}

	return false
}

// SetSrcid gets a reference to the given string and assigns it to the Srcid field.
func (o *ApplicationRest) SetSrcid(v string) {
	o.Srcid = &v
}

// GetUniquename returns the Uniquename field value if set, zero value otherwise.
func (o *ApplicationRest) GetUniquename() string {
	if o == nil || IsNil(o.Uniquename) {
		var ret string
		return ret
	}
	return *o.Uniquename
}

// GetUniquenameOk returns a tuple with the Uniquename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetUniquenameOk() (*string, bool) {
	if o == nil || IsNil(o.Uniquename) {
		return nil, false
	}
	return o.Uniquename, true
}

// HasUniquename returns a boolean if a field has been set.
func (o *ApplicationRest) HasUniquename() bool {
	if o != nil && !IsNil(o.Uniquename) {
		return true
	}

	return false
}

// SetUniquename gets a reference to the given string and assigns it to the Uniquename field.
func (o *ApplicationRest) SetUniquename(v string) {
	o.Uniquename = &v
}

// GetAppname returns the Appname field value if set, zero value otherwise.
func (o *ApplicationRest) GetAppname() string {
	if o == nil || IsNil(o.Appname) {
		var ret string
		return ret
	}
	return *o.Appname
}

// GetAppnameOk returns a tuple with the Appname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetAppnameOk() (*string, bool) {
	if o == nil || IsNil(o.Appname) {
		return nil, false
	}
	return o.Appname, true
}

// HasAppname returns a boolean if a field has been set.
func (o *ApplicationRest) HasAppname() bool {
	if o != nil && !IsNil(o.Appname) {
		return true
	}

	return false
}

// SetAppname gets a reference to the given string and assigns it to the Appname field.
func (o *ApplicationRest) SetAppname(v string) {
	o.Appname = &v
}

// GetIsvm returns the Isvm field value if set, zero value otherwise.
func (o *ApplicationRest) GetIsvm() bool {
	if o == nil || IsNil(o.Isvm) {
		var ret bool
		return ret
	}
	return *o.Isvm
}

// GetIsvmOk returns a tuple with the Isvm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetIsvmOk() (*bool, bool) {
	if o == nil || IsNil(o.Isvm) {
		return nil, false
	}
	return o.Isvm, true
}

// HasIsvm returns a boolean if a field has been set.
func (o *ApplicationRest) HasIsvm() bool {
	if o != nil && !IsNil(o.Isvm) {
		return true
	}

	return false
}

// SetIsvm gets a reference to the given bool and assigns it to the Isvm field.
func (o *ApplicationRest) SetIsvm(v bool) {
	o.Isvm = &v
}

// GetManaged returns the Managed field value if set, zero value otherwise.
func (o *ApplicationRest) GetManaged() bool {
	if o == nil || IsNil(o.Managed) {
		var ret bool
		return ret
	}
	return *o.Managed
}

// GetManagedOk returns a tuple with the Managed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Managed) {
		return nil, false
	}
	return o.Managed, true
}

// HasManaged returns a boolean if a field has been set.
func (o *ApplicationRest) HasManaged() bool {
	if o != nil && !IsNil(o.Managed) {
		return true
	}

	return false
}

// SetManaged gets a reference to the given bool and assigns it to the Managed field.
func (o *ApplicationRest) SetManaged(v bool) {
	o.Managed = &v
}

// GetScheduleoff returns the Scheduleoff field value if set, zero value otherwise.
func (o *ApplicationRest) GetScheduleoff() bool {
	if o == nil || IsNil(o.Scheduleoff) {
		var ret bool
		return ret
	}
	return *o.Scheduleoff
}

// GetScheduleoffOk returns a tuple with the Scheduleoff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetScheduleoffOk() (*bool, bool) {
	if o == nil || IsNil(o.Scheduleoff) {
		return nil, false
	}
	return o.Scheduleoff, true
}

// HasScheduleoff returns a boolean if a field has been set.
func (o *ApplicationRest) HasScheduleoff() bool {
	if o != nil && !IsNil(o.Scheduleoff) {
		return true
	}

	return false
}

// SetScheduleoff gets a reference to the given bool and assigns it to the Scheduleoff field.
func (o *ApplicationRest) SetScheduleoff(v bool) {
	o.Scheduleoff = &v
}

// GetApptype returns the Apptype field value if set, zero value otherwise.
func (o *ApplicationRest) GetApptype() string {
	if o == nil || IsNil(o.Apptype) {
		var ret string
		return ret
	}
	return *o.Apptype
}

// GetApptypeOk returns a tuple with the Apptype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetApptypeOk() (*string, bool) {
	if o == nil || IsNil(o.Apptype) {
		return nil, false
	}
	return o.Apptype, true
}

// HasApptype returns a boolean if a field has been set.
func (o *ApplicationRest) HasApptype() bool {
	if o != nil && !IsNil(o.Apptype) {
		return true
	}

	return false
}

// SetApptype gets a reference to the given string and assigns it to the Apptype field.
func (o *ApplicationRest) SetApptype(v string) {
	o.Apptype = &v
}

// GetOriginalappid returns the Originalappid field value if set, zero value otherwise.
func (o *ApplicationRest) GetOriginalappid() string {
	if o == nil || IsNil(o.Originalappid) {
		var ret string
		return ret
	}
	return *o.Originalappid
}

// GetOriginalappidOk returns a tuple with the Originalappid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetOriginalappidOk() (*string, bool) {
	if o == nil || IsNil(o.Originalappid) {
		return nil, false
	}
	return o.Originalappid, true
}

// HasOriginalappid returns a boolean if a field has been set.
func (o *ApplicationRest) HasOriginalappid() bool {
	if o != nil && !IsNil(o.Originalappid) {
		return true
	}

	return false
}

// SetOriginalappid gets a reference to the given string and assigns it to the Originalappid field.
func (o *ApplicationRest) SetOriginalappid(v string) {
	o.Originalappid = &v
}

// GetPathname returns the Pathname field value if set, zero value otherwise.
func (o *ApplicationRest) GetPathname() string {
	if o == nil || IsNil(o.Pathname) {
		var ret string
		return ret
	}
	return *o.Pathname
}

// GetPathnameOk returns a tuple with the Pathname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetPathnameOk() (*string, bool) {
	if o == nil || IsNil(o.Pathname) {
		return nil, false
	}
	return o.Pathname, true
}

// HasPathname returns a boolean if a field has been set.
func (o *ApplicationRest) HasPathname() bool {
	if o != nil && !IsNil(o.Pathname) {
		return true
	}

	return false
}

// SetPathname gets a reference to the given string and assigns it to the Pathname field.
func (o *ApplicationRest) SetPathname(v string) {
	o.Pathname = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ApplicationRest) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ApplicationRest) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ApplicationRest) SetUsername(v string) {
	o.Username = &v
}

// GetBackup returns the Backup field value if set, zero value otherwise.
func (o *ApplicationRest) GetBackup() []BackupRest {
	if o == nil || IsNil(o.Backup) {
		var ret []BackupRest
		return ret
	}
	return o.Backup
}

// GetBackupOk returns a tuple with the Backup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetBackupOk() ([]BackupRest, bool) {
	if o == nil || IsNil(o.Backup) {
		return nil, false
	}
	return o.Backup, true
}

// HasBackup returns a boolean if a field has been set.
func (o *ApplicationRest) HasBackup() bool {
	if o != nil && !IsNil(o.Backup) {
		return true
	}

	return false
}

// SetBackup gets a reference to the given []BackupRest and assigns it to the Backup field.
func (o *ApplicationRest) SetBackup(v []BackupRest) {
	o.Backup = v
}

// GetIsorphan returns the Isorphan field value if set, zero value otherwise.
func (o *ApplicationRest) GetIsorphan() bool {
	if o == nil || IsNil(o.Isorphan) {
		var ret bool
		return ret
	}
	return *o.Isorphan
}

// GetIsorphanOk returns a tuple with the Isorphan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetIsorphanOk() (*bool, bool) {
	if o == nil || IsNil(o.Isorphan) {
		return nil, false
	}
	return o.Isorphan, true
}

// HasIsorphan returns a boolean if a field has been set.
func (o *ApplicationRest) HasIsorphan() bool {
	if o != nil && !IsNil(o.Isorphan) {
		return true
	}

	return false
}

// SetIsorphan gets a reference to the given bool and assigns it to the Isorphan field.
func (o *ApplicationRest) SetIsorphan(v bool) {
	o.Isorphan = &v
}

// GetAppclass returns the Appclass field value if set, zero value otherwise.
func (o *ApplicationRest) GetAppclass() string {
	if o == nil || IsNil(o.Appclass) {
		var ret string
		return ret
	}
	return *o.Appclass
}

// GetAppclassOk returns a tuple with the Appclass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetAppclassOk() (*string, bool) {
	if o == nil || IsNil(o.Appclass) {
		return nil, false
	}
	return o.Appclass, true
}

// HasAppclass returns a boolean if a field has been set.
func (o *ApplicationRest) HasAppclass() bool {
	if o != nil && !IsNil(o.Appclass) {
		return true
	}

	return false
}

// SetAppclass gets a reference to the given string and assigns it to the Appclass field.
func (o *ApplicationRest) SetAppclass(v string) {
	o.Appclass = &v
}

// GetSla returns the Sla field value if set, zero value otherwise.
func (o *ApplicationRest) GetSla() SlaRest {
	if o == nil || IsNil(o.Sla) {
		var ret SlaRest
		return ret
	}
	return *o.Sla
}

// GetSlaOk returns a tuple with the Sla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetSlaOk() (*SlaRest, bool) {
	if o == nil || IsNil(o.Sla) {
		return nil, false
	}
	return o.Sla, true
}

// HasSla returns a boolean if a field has been set.
func (o *ApplicationRest) HasSla() bool {
	if o != nil && !IsNil(o.Sla) {
		return true
	}

	return false
}

// SetSla gets a reference to the given SlaRest and assigns it to the Sla field.
func (o *ApplicationRest) SetSla(v SlaRest) {
	o.Sla = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *ApplicationRest) GetCluster() ClusterRest {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterRest
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetClusterOk() (*ClusterRest, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *ApplicationRest) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterRest and assigns it to the Cluster field.
func (o *ApplicationRest) SetCluster(v ClusterRest) {
	o.Cluster = &v
}

// GetFriendlypath returns the Friendlypath field value if set, zero value otherwise.
func (o *ApplicationRest) GetFriendlypath() string {
	if o == nil || IsNil(o.Friendlypath) {
		var ret string
		return ret
	}
	return *o.Friendlypath
}

// GetFriendlypathOk returns a tuple with the Friendlypath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetFriendlypathOk() (*string, bool) {
	if o == nil || IsNil(o.Friendlypath) {
		return nil, false
	}
	return o.Friendlypath, true
}

// HasFriendlypath returns a boolean if a field has been set.
func (o *ApplicationRest) HasFriendlypath() bool {
	if o != nil && !IsNil(o.Friendlypath) {
		return true
	}

	return false
}

// SetFriendlypath gets a reference to the given string and assigns it to the Friendlypath field.
func (o *ApplicationRest) SetFriendlypath(v string) {
	o.Friendlypath = &v
}

// GetSourcecluster returns the Sourcecluster field value if set, zero value otherwise.
func (o *ApplicationRest) GetSourcecluster() string {
	if o == nil || IsNil(o.Sourcecluster) {
		var ret string
		return ret
	}
	return *o.Sourcecluster
}

// GetSourceclusterOk returns a tuple with the Sourcecluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetSourceclusterOk() (*string, bool) {
	if o == nil || IsNil(o.Sourcecluster) {
		return nil, false
	}
	return o.Sourcecluster, true
}

// HasSourcecluster returns a boolean if a field has been set.
func (o *ApplicationRest) HasSourcecluster() bool {
	if o != nil && !IsNil(o.Sourcecluster) {
		return true
	}

	return false
}

// SetSourcecluster gets a reference to the given string and assigns it to the Sourcecluster field.
func (o *ApplicationRest) SetSourcecluster(v string) {
	o.Sourcecluster = &v
}

// GetFriendlytype returns the Friendlytype field value if set, zero value otherwise.
func (o *ApplicationRest) GetFriendlytype() string {
	if o == nil || IsNil(o.Friendlytype) {
		var ret string
		return ret
	}
	return *o.Friendlytype
}

// GetFriendlytypeOk returns a tuple with the Friendlytype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetFriendlytypeOk() (*string, bool) {
	if o == nil || IsNil(o.Friendlytype) {
		return nil, false
	}
	return o.Friendlytype, true
}

// HasFriendlytype returns a boolean if a field has been set.
func (o *ApplicationRest) HasFriendlytype() bool {
	if o != nil && !IsNil(o.Friendlytype) {
		return true
	}

	return false
}

// SetFriendlytype gets a reference to the given string and assigns it to the Friendlytype field.
func (o *ApplicationRest) SetFriendlytype(v string) {
	o.Friendlytype = &v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *ApplicationRest) GetVolumes() []string {
	if o == nil || IsNil(o.Volumes) {
		var ret []string
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetVolumesOk() ([]string, bool) {
	if o == nil || IsNil(o.Volumes) {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *ApplicationRest) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []string and assigns it to the Volumes field.
func (o *ApplicationRest) SetVolumes(v []string) {
	o.Volumes = v
}

// GetProtectable returns the Protectable field value if set, zero value otherwise.
func (o *ApplicationRest) GetProtectable() string {
	if o == nil || IsNil(o.Protectable) {
		var ret string
		return ret
	}
	return *o.Protectable
}

// GetProtectableOk returns a tuple with the Protectable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetProtectableOk() (*string, bool) {
	if o == nil || IsNil(o.Protectable) {
		return nil, false
	}
	return o.Protectable, true
}

// HasProtectable returns a boolean if a field has been set.
func (o *ApplicationRest) HasProtectable() bool {
	if o != nil && !IsNil(o.Protectable) {
		return true
	}

	return false
}

// SetProtectable gets a reference to the given string and assigns it to the Protectable field.
func (o *ApplicationRest) SetProtectable(v string) {
	o.Protectable = &v
}

// GetFailoverstate returns the Failoverstate field value if set, zero value otherwise.
func (o *ApplicationRest) GetFailoverstate() string {
	if o == nil || IsNil(o.Failoverstate) {
		var ret string
		return ret
	}
	return *o.Failoverstate
}

// GetFailoverstateOk returns a tuple with the Failoverstate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetFailoverstateOk() (*string, bool) {
	if o == nil || IsNil(o.Failoverstate) {
		return nil, false
	}
	return o.Failoverstate, true
}

// HasFailoverstate returns a boolean if a field has been set.
func (o *ApplicationRest) HasFailoverstate() bool {
	if o != nil && !IsNil(o.Failoverstate) {
		return true
	}

	return false
}

// SetFailoverstate gets a reference to the given string and assigns it to the Failoverstate field.
func (o *ApplicationRest) SetFailoverstate(v string) {
	o.Failoverstate = &v
}

// GetAuxinfo returns the Auxinfo field value if set, zero value otherwise.
func (o *ApplicationRest) GetAuxinfo() string {
	if o == nil || IsNil(o.Auxinfo) {
		var ret string
		return ret
	}
	return *o.Auxinfo
}

// GetAuxinfoOk returns a tuple with the Auxinfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetAuxinfoOk() (*string, bool) {
	if o == nil || IsNil(o.Auxinfo) {
		return nil, false
	}
	return o.Auxinfo, true
}

// HasAuxinfo returns a boolean if a field has been set.
func (o *ApplicationRest) HasAuxinfo() bool {
	if o != nil && !IsNil(o.Auxinfo) {
		return true
	}

	return false
}

// SetAuxinfo gets a reference to the given string and assigns it to the Auxinfo field.
func (o *ApplicationRest) SetAuxinfo(v string) {
	o.Auxinfo = &v
}

// GetAppversion returns the Appversion field value if set, zero value otherwise.
func (o *ApplicationRest) GetAppversion() string {
	if o == nil || IsNil(o.Appversion) {
		var ret string
		return ret
	}
	return *o.Appversion
}

// GetAppversionOk returns a tuple with the Appversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetAppversionOk() (*string, bool) {
	if o == nil || IsNil(o.Appversion) {
		return nil, false
	}
	return o.Appversion, true
}

// HasAppversion returns a boolean if a field has been set.
func (o *ApplicationRest) HasAppversion() bool {
	if o != nil && !IsNil(o.Appversion) {
		return true
	}

	return false
}

// SetAppversion gets a reference to the given string and assigns it to the Appversion field.
func (o *ApplicationRest) SetAppversion(v string) {
	o.Appversion = &v
}

// GetNetworkname returns the Networkname field value if set, zero value otherwise.
func (o *ApplicationRest) GetNetworkname() string {
	if o == nil || IsNil(o.Networkname) {
		var ret string
		return ret
	}
	return *o.Networkname
}

// GetNetworknameOk returns a tuple with the Networkname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetNetworknameOk() (*string, bool) {
	if o == nil || IsNil(o.Networkname) {
		return nil, false
	}
	return o.Networkname, true
}

// HasNetworkname returns a boolean if a field has been set.
func (o *ApplicationRest) HasNetworkname() bool {
	if o != nil && !IsNil(o.Networkname) {
		return true
	}

	return false
}

// SetNetworkname gets a reference to the given string and assigns it to the Networkname field.
func (o *ApplicationRest) SetNetworkname(v string) {
	o.Networkname = &v
}

// GetNetworkip returns the Networkip field value if set, zero value otherwise.
func (o *ApplicationRest) GetNetworkip() string {
	if o == nil || IsNil(o.Networkip) {
		var ret string
		return ret
	}
	return *o.Networkip
}

// GetNetworkipOk returns a tuple with the Networkip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetNetworkipOk() (*string, bool) {
	if o == nil || IsNil(o.Networkip) {
		return nil, false
	}
	return o.Networkip, true
}

// HasNetworkip returns a boolean if a field has been set.
func (o *ApplicationRest) HasNetworkip() bool {
	if o != nil && !IsNil(o.Networkip) {
		return true
	}

	return false
}

// SetNetworkip gets a reference to the given string and assigns it to the Networkip field.
func (o *ApplicationRest) SetNetworkip(v string) {
	o.Networkip = &v
}

// GetIgnore returns the Ignore field value if set, zero value otherwise.
func (o *ApplicationRest) GetIgnore() bool {
	if o == nil || IsNil(o.Ignore) {
		var ret bool
		return ret
	}
	return *o.Ignore
}

// GetIgnoreOk returns a tuple with the Ignore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetIgnoreOk() (*bool, bool) {
	if o == nil || IsNil(o.Ignore) {
		return nil, false
	}
	return o.Ignore, true
}

// HasIgnore returns a boolean if a field has been set.
func (o *ApplicationRest) HasIgnore() bool {
	if o != nil && !IsNil(o.Ignore) {
		return true
	}

	return false
}

// SetIgnore gets a reference to the given bool and assigns it to the Ignore field.
func (o *ApplicationRest) SetIgnore(v bool) {
	o.Ignore = &v
}

// GetIsclustered returns the Isclustered field value if set, zero value otherwise.
func (o *ApplicationRest) GetIsclustered() bool {
	if o == nil || IsNil(o.Isclustered) {
		var ret bool
		return ret
	}
	return *o.Isclustered
}

// GetIsclusteredOk returns a tuple with the Isclustered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetIsclusteredOk() (*bool, bool) {
	if o == nil || IsNil(o.Isclustered) {
		return nil, false
	}
	return o.Isclustered, true
}

// HasIsclustered returns a boolean if a field has been set.
func (o *ApplicationRest) HasIsclustered() bool {
	if o != nil && !IsNil(o.Isclustered) {
		return true
	}

	return false
}

// SetIsclustered gets a reference to the given bool and assigns it to the Isclustered field.
func (o *ApplicationRest) SetIsclustered(v bool) {
	o.Isclustered = &v
}

// GetFrommount returns the Frommount field value if set, zero value otherwise.
func (o *ApplicationRest) GetFrommount() bool {
	if o == nil || IsNil(o.Frommount) {
		var ret bool
		return ret
	}
	return *o.Frommount
}

// GetFrommountOk returns a tuple with the Frommount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetFrommountOk() (*bool, bool) {
	if o == nil || IsNil(o.Frommount) {
		return nil, false
	}
	return o.Frommount, true
}

// HasFrommount returns a boolean if a field has been set.
func (o *ApplicationRest) HasFrommount() bool {
	if o != nil && !IsNil(o.Frommount) {
		return true
	}

	return false
}

// SetFrommount gets a reference to the given bool and assigns it to the Frommount field.
func (o *ApplicationRest) SetFrommount(v bool) {
	o.Frommount = &v
}

// GetSensitivity returns the Sensitivity field value if set, zero value otherwise.
func (o *ApplicationRest) GetSensitivity() int32 {
	if o == nil || IsNil(o.Sensitivity) {
		var ret int32
		return ret
	}
	return *o.Sensitivity
}

// GetSensitivityOk returns a tuple with the Sensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetSensitivityOk() (*int32, bool) {
	if o == nil || IsNil(o.Sensitivity) {
		return nil, false
	}
	return o.Sensitivity, true
}

// HasSensitivity returns a boolean if a field has been set.
func (o *ApplicationRest) HasSensitivity() bool {
	if o != nil && !IsNil(o.Sensitivity) {
		return true
	}

	return false
}

// SetSensitivity gets a reference to the given int32 and assigns it to the Sensitivity field.
func (o *ApplicationRest) SetSensitivity(v int32) {
	o.Sensitivity = &v
}

// GetMountedhosts returns the Mountedhosts field value if set, zero value otherwise.
func (o *ApplicationRest) GetMountedhosts() []HostRest {
	if o == nil || IsNil(o.Mountedhosts) {
		var ret []HostRest
		return ret
	}
	return o.Mountedhosts
}

// GetMountedhostsOk returns a tuple with the Mountedhosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetMountedhostsOk() ([]HostRest, bool) {
	if o == nil || IsNil(o.Mountedhosts) {
		return nil, false
	}
	return o.Mountedhosts, true
}

// HasMountedhosts returns a boolean if a field has been set.
func (o *ApplicationRest) HasMountedhosts() bool {
	if o != nil && !IsNil(o.Mountedhosts) {
		return true
	}

	return false
}

// SetMountedhosts gets a reference to the given []HostRest and assigns it to the Mountedhosts field.
func (o *ApplicationRest) SetMountedhosts(v []HostRest) {
	o.Mountedhosts = v
}

// GetAvailableSlp returns the AvailableSlp field value if set, zero value otherwise.
func (o *ApplicationRest) GetAvailableSlp() []SlpRest {
	if o == nil || IsNil(o.AvailableSlp) {
		var ret []SlpRest
		return ret
	}
	return o.AvailableSlp
}

// GetAvailableSlpOk returns a tuple with the AvailableSlp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetAvailableSlpOk() ([]SlpRest, bool) {
	if o == nil || IsNil(o.AvailableSlp) {
		return nil, false
	}
	return o.AvailableSlp, true
}

// HasAvailableSlp returns a boolean if a field has been set.
func (o *ApplicationRest) HasAvailableSlp() bool {
	if o != nil && !IsNil(o.AvailableSlp) {
		return true
	}

	return false
}

// SetAvailableSlp gets a reference to the given []SlpRest and assigns it to the AvailableSlp field.
func (o *ApplicationRest) SetAvailableSlp(v []SlpRest) {
	o.AvailableSlp = v
}

// GetOrglist returns the Orglist field value if set, zero value otherwise.
func (o *ApplicationRest) GetOrglist() []OrganizationRest {
	if o == nil || IsNil(o.Orglist) {
		var ret []OrganizationRest
		return ret
	}
	return o.Orglist
}

// GetOrglistOk returns a tuple with the Orglist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetOrglistOk() ([]OrganizationRest, bool) {
	if o == nil || IsNil(o.Orglist) {
		return nil, false
	}
	return o.Orglist, true
}

// HasOrglist returns a boolean if a field has been set.
func (o *ApplicationRest) HasOrglist() bool {
	if o != nil && !IsNil(o.Orglist) {
		return true
	}

	return false
}

// SetOrglist gets a reference to the given []OrganizationRest and assigns it to the Orglist field.
func (o *ApplicationRest) SetOrglist(v []OrganizationRest) {
	o.Orglist = v
}

// GetIsrestoring returns the Isrestoring field value if set, zero value otherwise.
func (o *ApplicationRest) GetIsrestoring() bool {
	if o == nil || IsNil(o.Isrestoring) {
		var ret bool
		return ret
	}
	return *o.Isrestoring
}

// GetIsrestoringOk returns a tuple with the Isrestoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetIsrestoringOk() (*bool, bool) {
	if o == nil || IsNil(o.Isrestoring) {
		return nil, false
	}
	return o.Isrestoring, true
}

// HasIsrestoring returns a boolean if a field has been set.
func (o *ApplicationRest) HasIsrestoring() bool {
	if o != nil && !IsNil(o.Isrestoring) {
		return true
	}

	return false
}

// SetIsrestoring gets a reference to the given bool and assigns it to the Isrestoring field.
func (o *ApplicationRest) SetIsrestoring(v bool) {
	o.Isrestoring = &v
}

// GetConsistencygroup returns the Consistencygroup field value if set, zero value otherwise.
func (o *ApplicationRest) GetConsistencygroup() ApplicationRest {
	if o == nil || IsNil(o.Consistencygroup) {
		var ret ApplicationRest
		return ret
	}
	return *o.Consistencygroup
}

// GetConsistencygroupOk returns a tuple with the Consistencygroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetConsistencygroupOk() (*ApplicationRest, bool) {
	if o == nil || IsNil(o.Consistencygroup) {
		return nil, false
	}
	return o.Consistencygroup, true
}

// HasConsistencygroup returns a boolean if a field has been set.
func (o *ApplicationRest) HasConsistencygroup() bool {
	if o != nil && !IsNil(o.Consistencygroup) {
		return true
	}

	return false
}

// SetConsistencygroup gets a reference to the given ApplicationRest and assigns it to the Consistencygroup field.
func (o *ApplicationRest) SetConsistencygroup(v ApplicationRest) {
	o.Consistencygroup = &v
}

// GetLogicalgroup returns the Logicalgroup field value if set, zero value otherwise.
func (o *ApplicationRest) GetLogicalgroup() LogicalGroupRest {
	if o == nil || IsNil(o.Logicalgroup) {
		var ret LogicalGroupRest
		return ret
	}
	return *o.Logicalgroup
}

// GetLogicalgroupOk returns a tuple with the Logicalgroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetLogicalgroupOk() (*LogicalGroupRest, bool) {
	if o == nil || IsNil(o.Logicalgroup) {
		return nil, false
	}
	return o.Logicalgroup, true
}

// HasLogicalgroup returns a boolean if a field has been set.
func (o *ApplicationRest) HasLogicalgroup() bool {
	if o != nil && !IsNil(o.Logicalgroup) {
		return true
	}

	return false
}

// SetLogicalgroup gets a reference to the given LogicalGroupRest and assigns it to the Logicalgroup field.
func (o *ApplicationRest) SetLogicalgroup(v LogicalGroupRest) {
	o.Logicalgroup = &v
}

// GetAppstateText returns the AppstateText field value if set, zero value otherwise.
func (o *ApplicationRest) GetAppstateText() []string {
	if o == nil || IsNil(o.AppstateText) {
		var ret []string
		return ret
	}
	return o.AppstateText
}

// GetAppstateTextOk returns a tuple with the AppstateText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetAppstateTextOk() ([]string, bool) {
	if o == nil || IsNil(o.AppstateText) {
		return nil, false
	}
	return o.AppstateText, true
}

// HasAppstateText returns a boolean if a field has been set.
func (o *ApplicationRest) HasAppstateText() bool {
	if o != nil && !IsNil(o.AppstateText) {
		return true
	}

	return false
}

// SetAppstateText gets a reference to the given []string and assigns it to the AppstateText field.
func (o *ApplicationRest) SetAppstateText(v []string) {
	o.AppstateText = v
}

// GetDiskpools returns the Diskpools field value if set, zero value otherwise.
func (o *ApplicationRest) GetDiskpools() []string {
	if o == nil || IsNil(o.Diskpools) {
		var ret []string
		return ret
	}
	return o.Diskpools
}

// GetDiskpoolsOk returns a tuple with the Diskpools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetDiskpoolsOk() ([]string, bool) {
	if o == nil || IsNil(o.Diskpools) {
		return nil, false
	}
	return o.Diskpools, true
}

// HasDiskpools returns a boolean if a field has been set.
func (o *ApplicationRest) HasDiskpools() bool {
	if o != nil && !IsNil(o.Diskpools) {
		return true
	}

	return false
}

// SetDiskpools gets a reference to the given []string and assigns it to the Diskpools field.
func (o *ApplicationRest) SetDiskpools(v []string) {
	o.Diskpools = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApplicationRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApplicationRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApplicationRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ApplicationRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ApplicationRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ApplicationRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *ApplicationRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *ApplicationRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *ApplicationRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *ApplicationRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *ApplicationRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *ApplicationRest) SetStale(v bool) {
	o.Stale = &v
}

func (o ApplicationRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Immutable) {
		toSerialize["immutable"] = o.Immutable
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Srcid) {
		toSerialize["srcid"] = o.Srcid
	}
	if !IsNil(o.Uniquename) {
		toSerialize["uniquename"] = o.Uniquename
	}
	if !IsNil(o.Appname) {
		toSerialize["appname"] = o.Appname
	}
	if !IsNil(o.Isvm) {
		toSerialize["isvm"] = o.Isvm
	}
	if !IsNil(o.Managed) {
		toSerialize["managed"] = o.Managed
	}
	if !IsNil(o.Scheduleoff) {
		toSerialize["scheduleoff"] = o.Scheduleoff
	}
	if !IsNil(o.Apptype) {
		toSerialize["apptype"] = o.Apptype
	}
	if !IsNil(o.Originalappid) {
		toSerialize["originalappid"] = o.Originalappid
	}
	if !IsNil(o.Pathname) {
		toSerialize["pathname"] = o.Pathname
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Backup) {
		toSerialize["backup"] = o.Backup
	}
	if !IsNil(o.Isorphan) {
		toSerialize["isorphan"] = o.Isorphan
	}
	if !IsNil(o.Appclass) {
		toSerialize["appclass"] = o.Appclass
	}
	if !IsNil(o.Sla) {
		toSerialize["sla"] = o.Sla
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Friendlypath) {
		toSerialize["friendlypath"] = o.Friendlypath
	}
	if !IsNil(o.Sourcecluster) {
		toSerialize["sourcecluster"] = o.Sourcecluster
	}
	if !IsNil(o.Friendlytype) {
		toSerialize["friendlytype"] = o.Friendlytype
	}
	if !IsNil(o.Volumes) {
		toSerialize["volumes"] = o.Volumes
	}
	if !IsNil(o.Protectable) {
		toSerialize["protectable"] = o.Protectable
	}
	if !IsNil(o.Failoverstate) {
		toSerialize["failoverstate"] = o.Failoverstate
	}
	if !IsNil(o.Auxinfo) {
		toSerialize["auxinfo"] = o.Auxinfo
	}
	if !IsNil(o.Appversion) {
		toSerialize["appversion"] = o.Appversion
	}
	if !IsNil(o.Networkname) {
		toSerialize["networkname"] = o.Networkname
	}
	if !IsNil(o.Networkip) {
		toSerialize["networkip"] = o.Networkip
	}
	if !IsNil(o.Ignore) {
		toSerialize["ignore"] = o.Ignore
	}
	if !IsNil(o.Isclustered) {
		toSerialize["isclustered"] = o.Isclustered
	}
	if !IsNil(o.Frommount) {
		toSerialize["frommount"] = o.Frommount
	}
	if !IsNil(o.Sensitivity) {
		toSerialize["sensitivity"] = o.Sensitivity
	}
	if !IsNil(o.Mountedhosts) {
		toSerialize["mountedhosts"] = o.Mountedhosts
	}
	if !IsNil(o.AvailableSlp) {
		toSerialize["available_slp"] = o.AvailableSlp
	}
	if !IsNil(o.Orglist) {
		toSerialize["orglist"] = o.Orglist
	}
	if !IsNil(o.Isrestoring) {
		toSerialize["isrestoring"] = o.Isrestoring
	}
	if !IsNil(o.Consistencygroup) {
		toSerialize["consistencygroup"] = o.Consistencygroup
	}
	if !IsNil(o.Logicalgroup) {
		toSerialize["logicalgroup"] = o.Logicalgroup
	}
	if !IsNil(o.AppstateText) {
		toSerialize["appstate_text"] = o.AppstateText
	}
	if !IsNil(o.Diskpools) {
		toSerialize["diskpools"] = o.Diskpools
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableApplicationRest struct {
	value *ApplicationRest
	isSet bool
}

func (v NullableApplicationRest) Get() *ApplicationRest {
	return v.value
}

func (v *NullableApplicationRest) Set(val *ApplicationRest) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationRest) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationRest(val *ApplicationRest) *NullableApplicationRest {
	return &NullableApplicationRest{value: val, isSet: true}
}

func (v NullableApplicationRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


