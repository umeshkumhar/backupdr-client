/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EventRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventRest{}

// EventRest struct for EventRest
type EventRest struct {
	Object map[string]interface{} `json:"object,omitempty"`
	Errorcode *string `json:"errorcode,omitempty"`
	Srcid *string `json:"srcid,omitempty"`
	Component map[string]interface{} `json:"component,omitempty"`
	Appname *string `json:"appname,omitempty"`
	Apptype *string `json:"apptype,omitempty"`
	Cluster *ClusterRest `json:"cluster,omitempty"`
	Eventdate *int64 `json:"eventdate,omitempty"`
	Eventid *int32 `json:"eventid,omitempty"`
	Sourceeventdate *string `json:"sourceeventdate,omitempty"`
	Jobname *string `json:"jobname,omitempty"`
	Errormessage *string `json:"errormessage,omitempty"`
	Messagetext *string `json:"messagetext,omitempty"`
	Sequenceid *int64 `json:"sequenceid,omitempty"`
	Requiresclearing *bool `json:"requiresclearing,omitempty"`
	Eventstatus *string `json:"eventstatus,omitempty"`
	Notification map[string]interface{} `json:"notification,omitempty"`
	Errormessages []string `json:"errormessages,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewEventRest instantiates a new EventRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventRest() *EventRest {
	this := EventRest{}
	return &this
}

// NewEventRestWithDefaults instantiates a new EventRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventRestWithDefaults() *EventRest {
	this := EventRest{}
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *EventRest) GetObject() map[string]interface{} {
	if o == nil || IsNil(o.Object) {
		var ret map[string]interface{}
		return ret
	}
	return o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetObjectOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Object) {
		return map[string]interface{}{}, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *EventRest) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given map[string]interface{} and assigns it to the Object field.
func (o *EventRest) SetObject(v map[string]interface{}) {
	o.Object = v
}

// GetErrorcode returns the Errorcode field value if set, zero value otherwise.
func (o *EventRest) GetErrorcode() string {
	if o == nil || IsNil(o.Errorcode) {
		var ret string
		return ret
	}
	return *o.Errorcode
}

// GetErrorcodeOk returns a tuple with the Errorcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetErrorcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Errorcode) {
		return nil, false
	}
	return o.Errorcode, true
}

// HasErrorcode returns a boolean if a field has been set.
func (o *EventRest) HasErrorcode() bool {
	if o != nil && !IsNil(o.Errorcode) {
		return true
	}

	return false
}

// SetErrorcode gets a reference to the given string and assigns it to the Errorcode field.
func (o *EventRest) SetErrorcode(v string) {
	o.Errorcode = &v
}

// GetSrcid returns the Srcid field value if set, zero value otherwise.
func (o *EventRest) GetSrcid() string {
	if o == nil || IsNil(o.Srcid) {
		var ret string
		return ret
	}
	return *o.Srcid
}

// GetSrcidOk returns a tuple with the Srcid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetSrcidOk() (*string, bool) {
	if o == nil || IsNil(o.Srcid) {
		return nil, false
	}
	return o.Srcid, true
}

// HasSrcid returns a boolean if a field has been set.
func (o *EventRest) HasSrcid() bool {
	if o != nil && !IsNil(o.Srcid) {
		return true
	}

	return false
}

// SetSrcid gets a reference to the given string and assigns it to the Srcid field.
func (o *EventRest) SetSrcid(v string) {
	o.Srcid = &v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *EventRest) GetComponent() map[string]interface{} {
	if o == nil || IsNil(o.Component) {
		var ret map[string]interface{}
		return ret
	}
	return o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetComponentOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Component) {
		return map[string]interface{}{}, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *EventRest) HasComponent() bool {
	if o != nil && !IsNil(o.Component) {
		return true
	}

	return false
}

// SetComponent gets a reference to the given map[string]interface{} and assigns it to the Component field.
func (o *EventRest) SetComponent(v map[string]interface{}) {
	o.Component = v
}

// GetAppname returns the Appname field value if set, zero value otherwise.
func (o *EventRest) GetAppname() string {
	if o == nil || IsNil(o.Appname) {
		var ret string
		return ret
	}
	return *o.Appname
}

// GetAppnameOk returns a tuple with the Appname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetAppnameOk() (*string, bool) {
	if o == nil || IsNil(o.Appname) {
		return nil, false
	}
	return o.Appname, true
}

// HasAppname returns a boolean if a field has been set.
func (o *EventRest) HasAppname() bool {
	if o != nil && !IsNil(o.Appname) {
		return true
	}

	return false
}

// SetAppname gets a reference to the given string and assigns it to the Appname field.
func (o *EventRest) SetAppname(v string) {
	o.Appname = &v
}

// GetApptype returns the Apptype field value if set, zero value otherwise.
func (o *EventRest) GetApptype() string {
	if o == nil || IsNil(o.Apptype) {
		var ret string
		return ret
	}
	return *o.Apptype
}

// GetApptypeOk returns a tuple with the Apptype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetApptypeOk() (*string, bool) {
	if o == nil || IsNil(o.Apptype) {
		return nil, false
	}
	return o.Apptype, true
}

// HasApptype returns a boolean if a field has been set.
func (o *EventRest) HasApptype() bool {
	if o != nil && !IsNil(o.Apptype) {
		return true
	}

	return false
}

// SetApptype gets a reference to the given string and assigns it to the Apptype field.
func (o *EventRest) SetApptype(v string) {
	o.Apptype = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *EventRest) GetCluster() ClusterRest {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterRest
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetClusterOk() (*ClusterRest, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *EventRest) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterRest and assigns it to the Cluster field.
func (o *EventRest) SetCluster(v ClusterRest) {
	o.Cluster = &v
}

// GetEventdate returns the Eventdate field value if set, zero value otherwise.
func (o *EventRest) GetEventdate() int64 {
	if o == nil || IsNil(o.Eventdate) {
		var ret int64
		return ret
	}
	return *o.Eventdate
}

// GetEventdateOk returns a tuple with the Eventdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetEventdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Eventdate) {
		return nil, false
	}
	return o.Eventdate, true
}

// HasEventdate returns a boolean if a field has been set.
func (o *EventRest) HasEventdate() bool {
	if o != nil && !IsNil(o.Eventdate) {
		return true
	}

	return false
}

// SetEventdate gets a reference to the given int64 and assigns it to the Eventdate field.
func (o *EventRest) SetEventdate(v int64) {
	o.Eventdate = &v
}

// GetEventid returns the Eventid field value if set, zero value otherwise.
func (o *EventRest) GetEventid() int32 {
	if o == nil || IsNil(o.Eventid) {
		var ret int32
		return ret
	}
	return *o.Eventid
}

// GetEventidOk returns a tuple with the Eventid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetEventidOk() (*int32, bool) {
	if o == nil || IsNil(o.Eventid) {
		return nil, false
	}
	return o.Eventid, true
}

// HasEventid returns a boolean if a field has been set.
func (o *EventRest) HasEventid() bool {
	if o != nil && !IsNil(o.Eventid) {
		return true
	}

	return false
}

// SetEventid gets a reference to the given int32 and assigns it to the Eventid field.
func (o *EventRest) SetEventid(v int32) {
	o.Eventid = &v
}

// GetSourceeventdate returns the Sourceeventdate field value if set, zero value otherwise.
func (o *EventRest) GetSourceeventdate() string {
	if o == nil || IsNil(o.Sourceeventdate) {
		var ret string
		return ret
	}
	return *o.Sourceeventdate
}

// GetSourceeventdateOk returns a tuple with the Sourceeventdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetSourceeventdateOk() (*string, bool) {
	if o == nil || IsNil(o.Sourceeventdate) {
		return nil, false
	}
	return o.Sourceeventdate, true
}

// HasSourceeventdate returns a boolean if a field has been set.
func (o *EventRest) HasSourceeventdate() bool {
	if o != nil && !IsNil(o.Sourceeventdate) {
		return true
	}

	return false
}

// SetSourceeventdate gets a reference to the given string and assigns it to the Sourceeventdate field.
func (o *EventRest) SetSourceeventdate(v string) {
	o.Sourceeventdate = &v
}

// GetJobname returns the Jobname field value if set, zero value otherwise.
func (o *EventRest) GetJobname() string {
	if o == nil || IsNil(o.Jobname) {
		var ret string
		return ret
	}
	return *o.Jobname
}

// GetJobnameOk returns a tuple with the Jobname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetJobnameOk() (*string, bool) {
	if o == nil || IsNil(o.Jobname) {
		return nil, false
	}
	return o.Jobname, true
}

// HasJobname returns a boolean if a field has been set.
func (o *EventRest) HasJobname() bool {
	if o != nil && !IsNil(o.Jobname) {
		return true
	}

	return false
}

// SetJobname gets a reference to the given string and assigns it to the Jobname field.
func (o *EventRest) SetJobname(v string) {
	o.Jobname = &v
}

// GetErrormessage returns the Errormessage field value if set, zero value otherwise.
func (o *EventRest) GetErrormessage() string {
	if o == nil || IsNil(o.Errormessage) {
		var ret string
		return ret
	}
	return *o.Errormessage
}

// GetErrormessageOk returns a tuple with the Errormessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetErrormessageOk() (*string, bool) {
	if o == nil || IsNil(o.Errormessage) {
		return nil, false
	}
	return o.Errormessage, true
}

// HasErrormessage returns a boolean if a field has been set.
func (o *EventRest) HasErrormessage() bool {
	if o != nil && !IsNil(o.Errormessage) {
		return true
	}

	return false
}

// SetErrormessage gets a reference to the given string and assigns it to the Errormessage field.
func (o *EventRest) SetErrormessage(v string) {
	o.Errormessage = &v
}

// GetMessagetext returns the Messagetext field value if set, zero value otherwise.
func (o *EventRest) GetMessagetext() string {
	if o == nil || IsNil(o.Messagetext) {
		var ret string
		return ret
	}
	return *o.Messagetext
}

// GetMessagetextOk returns a tuple with the Messagetext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetMessagetextOk() (*string, bool) {
	if o == nil || IsNil(o.Messagetext) {
		return nil, false
	}
	return o.Messagetext, true
}

// HasMessagetext returns a boolean if a field has been set.
func (o *EventRest) HasMessagetext() bool {
	if o != nil && !IsNil(o.Messagetext) {
		return true
	}

	return false
}

// SetMessagetext gets a reference to the given string and assigns it to the Messagetext field.
func (o *EventRest) SetMessagetext(v string) {
	o.Messagetext = &v
}

// GetSequenceid returns the Sequenceid field value if set, zero value otherwise.
func (o *EventRest) GetSequenceid() int64 {
	if o == nil || IsNil(o.Sequenceid) {
		var ret int64
		return ret
	}
	return *o.Sequenceid
}

// GetSequenceidOk returns a tuple with the Sequenceid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetSequenceidOk() (*int64, bool) {
	if o == nil || IsNil(o.Sequenceid) {
		return nil, false
	}
	return o.Sequenceid, true
}

// HasSequenceid returns a boolean if a field has been set.
func (o *EventRest) HasSequenceid() bool {
	if o != nil && !IsNil(o.Sequenceid) {
		return true
	}

	return false
}

// SetSequenceid gets a reference to the given int64 and assigns it to the Sequenceid field.
func (o *EventRest) SetSequenceid(v int64) {
	o.Sequenceid = &v
}

// GetRequiresclearing returns the Requiresclearing field value if set, zero value otherwise.
func (o *EventRest) GetRequiresclearing() bool {
	if o == nil || IsNil(o.Requiresclearing) {
		var ret bool
		return ret
	}
	return *o.Requiresclearing
}

// GetRequiresclearingOk returns a tuple with the Requiresclearing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetRequiresclearingOk() (*bool, bool) {
	if o == nil || IsNil(o.Requiresclearing) {
		return nil, false
	}
	return o.Requiresclearing, true
}

// HasRequiresclearing returns a boolean if a field has been set.
func (o *EventRest) HasRequiresclearing() bool {
	if o != nil && !IsNil(o.Requiresclearing) {
		return true
	}

	return false
}

// SetRequiresclearing gets a reference to the given bool and assigns it to the Requiresclearing field.
func (o *EventRest) SetRequiresclearing(v bool) {
	o.Requiresclearing = &v
}

// GetEventstatus returns the Eventstatus field value if set, zero value otherwise.
func (o *EventRest) GetEventstatus() string {
	if o == nil || IsNil(o.Eventstatus) {
		var ret string
		return ret
	}
	return *o.Eventstatus
}

// GetEventstatusOk returns a tuple with the Eventstatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetEventstatusOk() (*string, bool) {
	if o == nil || IsNil(o.Eventstatus) {
		return nil, false
	}
	return o.Eventstatus, true
}

// HasEventstatus returns a boolean if a field has been set.
func (o *EventRest) HasEventstatus() bool {
	if o != nil && !IsNil(o.Eventstatus) {
		return true
	}

	return false
}

// SetEventstatus gets a reference to the given string and assigns it to the Eventstatus field.
func (o *EventRest) SetEventstatus(v string) {
	o.Eventstatus = &v
}

// GetNotification returns the Notification field value if set, zero value otherwise.
func (o *EventRest) GetNotification() map[string]interface{} {
	if o == nil || IsNil(o.Notification) {
		var ret map[string]interface{}
		return ret
	}
	return o.Notification
}

// GetNotificationOk returns a tuple with the Notification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetNotificationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Notification) {
		return map[string]interface{}{}, false
	}
	return o.Notification, true
}

// HasNotification returns a boolean if a field has been set.
func (o *EventRest) HasNotification() bool {
	if o != nil && !IsNil(o.Notification) {
		return true
	}

	return false
}

// SetNotification gets a reference to the given map[string]interface{} and assigns it to the Notification field.
func (o *EventRest) SetNotification(v map[string]interface{}) {
	o.Notification = v
}

// GetErrormessages returns the Errormessages field value if set, zero value otherwise.
func (o *EventRest) GetErrormessages() []string {
	if o == nil || IsNil(o.Errormessages) {
		var ret []string
		return ret
	}
	return o.Errormessages
}

// GetErrormessagesOk returns a tuple with the Errormessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetErrormessagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Errormessages) {
		return nil, false
	}
	return o.Errormessages, true
}

// HasErrormessages returns a boolean if a field has been set.
func (o *EventRest) HasErrormessages() bool {
	if o != nil && !IsNil(o.Errormessages) {
		return true
	}

	return false
}

// SetErrormessages gets a reference to the given []string and assigns it to the Errormessages field.
func (o *EventRest) SetErrormessages(v []string) {
	o.Errormessages = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EventRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EventRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EventRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *EventRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *EventRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *EventRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *EventRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *EventRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *EventRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *EventRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *EventRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *EventRest) SetStale(v bool) {
	o.Stale = &v
}

func (o EventRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Errorcode) {
		toSerialize["errorcode"] = o.Errorcode
	}
	if !IsNil(o.Srcid) {
		toSerialize["srcid"] = o.Srcid
	}
	if !IsNil(o.Component) {
		toSerialize["component"] = o.Component
	}
	if !IsNil(o.Appname) {
		toSerialize["appname"] = o.Appname
	}
	if !IsNil(o.Apptype) {
		toSerialize["apptype"] = o.Apptype
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Eventdate) {
		toSerialize["eventdate"] = o.Eventdate
	}
	if !IsNil(o.Eventid) {
		toSerialize["eventid"] = o.Eventid
	}
	if !IsNil(o.Sourceeventdate) {
		toSerialize["sourceeventdate"] = o.Sourceeventdate
	}
	if !IsNil(o.Jobname) {
		toSerialize["jobname"] = o.Jobname
	}
	if !IsNil(o.Errormessage) {
		toSerialize["errormessage"] = o.Errormessage
	}
	if !IsNil(o.Messagetext) {
		toSerialize["messagetext"] = o.Messagetext
	}
	if !IsNil(o.Sequenceid) {
		toSerialize["sequenceid"] = o.Sequenceid
	}
	if !IsNil(o.Requiresclearing) {
		toSerialize["requiresclearing"] = o.Requiresclearing
	}
	if !IsNil(o.Eventstatus) {
		toSerialize["eventstatus"] = o.Eventstatus
	}
	if !IsNil(o.Notification) {
		toSerialize["notification"] = o.Notification
	}
	if !IsNil(o.Errormessages) {
		toSerialize["errormessages"] = o.Errormessages
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableEventRest struct {
	value *EventRest
	isSet bool
}

func (v NullableEventRest) Get() *EventRest {
	return v.value
}

func (v *NullableEventRest) Set(val *EventRest) {
	v.value = val
	v.isSet = true
}

func (v NullableEventRest) IsSet() bool {
	return v.isSet
}

func (v *NullableEventRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventRest(val *EventRest) *NullableEventRest {
	return &NullableEventRest{value: val, isSet: true}
}

func (v NullableEventRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


