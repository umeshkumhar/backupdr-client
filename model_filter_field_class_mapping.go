/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FilterFieldClassMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterFieldClassMapping{}

// FilterFieldClassMapping struct for FilterFieldClassMapping
type FilterFieldClassMapping struct {
	Field *string `json:"field,omitempty"`
	Type *string `json:"type,omitempty"`
	Values []string `json:"values,omitempty"`
}

// NewFilterFieldClassMapping instantiates a new FilterFieldClassMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterFieldClassMapping() *FilterFieldClassMapping {
	this := FilterFieldClassMapping{}
	return &this
}

// NewFilterFieldClassMappingWithDefaults instantiates a new FilterFieldClassMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterFieldClassMappingWithDefaults() *FilterFieldClassMapping {
	this := FilterFieldClassMapping{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *FilterFieldClassMapping) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterFieldClassMapping) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *FilterFieldClassMapping) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *FilterFieldClassMapping) SetField(v string) {
	o.Field = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FilterFieldClassMapping) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterFieldClassMapping) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FilterFieldClassMapping) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FilterFieldClassMapping) SetType(v string) {
	o.Type = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *FilterFieldClassMapping) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterFieldClassMapping) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *FilterFieldClassMapping) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *FilterFieldClassMapping) SetValues(v []string) {
	o.Values = v
}

func (o FilterFieldClassMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterFieldClassMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableFilterFieldClassMapping struct {
	value *FilterFieldClassMapping
	isSet bool
}

func (v NullableFilterFieldClassMapping) Get() *FilterFieldClassMapping {
	return v.value
}

func (v *NullableFilterFieldClassMapping) Set(val *FilterFieldClassMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterFieldClassMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterFieldClassMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterFieldClassMapping(val *FilterFieldClassMapping) *NullableFilterFieldClassMapping {
	return &NullableFilterFieldClassMapping{value: val, isSet: true}
}

func (v NullableFilterFieldClassMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterFieldClassMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


