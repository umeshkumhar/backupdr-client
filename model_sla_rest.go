/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SlaRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SlaRest{}

// SlaRest struct for SlaRest
type SlaRest struct {
	Immutable *bool `json:"immutable,omitempty"`
	Description *string `json:"description,omitempty"`
	Application *ApplicationRest `json:"application,omitempty"`
	Slt *SltRest `json:"slt,omitempty"`
	Options []AdvancedOptionRest `json:"options,omitempty"`
	Modifydate *int64 `json:"modifydate,omitempty"`
	Scheduleoff *string `json:"scheduleoff,omitempty"`
	Slp *SlpRest `json:"slp,omitempty"`
	Logexpirationoff *bool `json:"logexpirationoff,omitempty"`
	Dedupasyncoff *string `json:"dedupasyncoff,omitempty"`
	Expirationoff *string `json:"expirationoff,omitempty"`
	Group *LogicalGroupRest `json:"group,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewSlaRest instantiates a new SlaRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlaRest() *SlaRest {
	this := SlaRest{}
	return &this
}

// NewSlaRestWithDefaults instantiates a new SlaRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlaRestWithDefaults() *SlaRest {
	this := SlaRest{}
	return &this
}

// GetImmutable returns the Immutable field value if set, zero value otherwise.
func (o *SlaRest) GetImmutable() bool {
	if o == nil || IsNil(o.Immutable) {
		var ret bool
		return ret
	}
	return *o.Immutable
}

// GetImmutableOk returns a tuple with the Immutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetImmutableOk() (*bool, bool) {
	if o == nil || IsNil(o.Immutable) {
		return nil, false
	}
	return o.Immutable, true
}

// HasImmutable returns a boolean if a field has been set.
func (o *SlaRest) HasImmutable() bool {
	if o != nil && !IsNil(o.Immutable) {
		return true
	}

	return false
}

// SetImmutable gets a reference to the given bool and assigns it to the Immutable field.
func (o *SlaRest) SetImmutable(v bool) {
	o.Immutable = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SlaRest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SlaRest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SlaRest) SetDescription(v string) {
	o.Description = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *SlaRest) GetApplication() ApplicationRest {
	if o == nil || IsNil(o.Application) {
		var ret ApplicationRest
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetApplicationOk() (*ApplicationRest, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *SlaRest) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given ApplicationRest and assigns it to the Application field.
func (o *SlaRest) SetApplication(v ApplicationRest) {
	o.Application = &v
}

// GetSlt returns the Slt field value if set, zero value otherwise.
func (o *SlaRest) GetSlt() SltRest {
	if o == nil || IsNil(o.Slt) {
		var ret SltRest
		return ret
	}
	return *o.Slt
}

// GetSltOk returns a tuple with the Slt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetSltOk() (*SltRest, bool) {
	if o == nil || IsNil(o.Slt) {
		return nil, false
	}
	return o.Slt, true
}

// HasSlt returns a boolean if a field has been set.
func (o *SlaRest) HasSlt() bool {
	if o != nil && !IsNil(o.Slt) {
		return true
	}

	return false
}

// SetSlt gets a reference to the given SltRest and assigns it to the Slt field.
func (o *SlaRest) SetSlt(v SltRest) {
	o.Slt = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *SlaRest) GetOptions() []AdvancedOptionRest {
	if o == nil || IsNil(o.Options) {
		var ret []AdvancedOptionRest
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetOptionsOk() ([]AdvancedOptionRest, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *SlaRest) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []AdvancedOptionRest and assigns it to the Options field.
func (o *SlaRest) SetOptions(v []AdvancedOptionRest) {
	o.Options = v
}

// GetModifydate returns the Modifydate field value if set, zero value otherwise.
func (o *SlaRest) GetModifydate() int64 {
	if o == nil || IsNil(o.Modifydate) {
		var ret int64
		return ret
	}
	return *o.Modifydate
}

// GetModifydateOk returns a tuple with the Modifydate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetModifydateOk() (*int64, bool) {
	if o == nil || IsNil(o.Modifydate) {
		return nil, false
	}
	return o.Modifydate, true
}

// HasModifydate returns a boolean if a field has been set.
func (o *SlaRest) HasModifydate() bool {
	if o != nil && !IsNil(o.Modifydate) {
		return true
	}

	return false
}

// SetModifydate gets a reference to the given int64 and assigns it to the Modifydate field.
func (o *SlaRest) SetModifydate(v int64) {
	o.Modifydate = &v
}

// GetScheduleoff returns the Scheduleoff field value if set, zero value otherwise.
func (o *SlaRest) GetScheduleoff() string {
	if o == nil || IsNil(o.Scheduleoff) {
		var ret string
		return ret
	}
	return *o.Scheduleoff
}

// GetScheduleoffOk returns a tuple with the Scheduleoff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetScheduleoffOk() (*string, bool) {
	if o == nil || IsNil(o.Scheduleoff) {
		return nil, false
	}
	return o.Scheduleoff, true
}

// HasScheduleoff returns a boolean if a field has been set.
func (o *SlaRest) HasScheduleoff() bool {
	if o != nil && !IsNil(o.Scheduleoff) {
		return true
	}

	return false
}

// SetScheduleoff gets a reference to the given string and assigns it to the Scheduleoff field.
func (o *SlaRest) SetScheduleoff(v string) {
	o.Scheduleoff = &v
}

// GetSlp returns the Slp field value if set, zero value otherwise.
func (o *SlaRest) GetSlp() SlpRest {
	if o == nil || IsNil(o.Slp) {
		var ret SlpRest
		return ret
	}
	return *o.Slp
}

// GetSlpOk returns a tuple with the Slp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetSlpOk() (*SlpRest, bool) {
	if o == nil || IsNil(o.Slp) {
		return nil, false
	}
	return o.Slp, true
}

// HasSlp returns a boolean if a field has been set.
func (o *SlaRest) HasSlp() bool {
	if o != nil && !IsNil(o.Slp) {
		return true
	}

	return false
}

// SetSlp gets a reference to the given SlpRest and assigns it to the Slp field.
func (o *SlaRest) SetSlp(v SlpRest) {
	o.Slp = &v
}

// GetLogexpirationoff returns the Logexpirationoff field value if set, zero value otherwise.
func (o *SlaRest) GetLogexpirationoff() bool {
	if o == nil || IsNil(o.Logexpirationoff) {
		var ret bool
		return ret
	}
	return *o.Logexpirationoff
}

// GetLogexpirationoffOk returns a tuple with the Logexpirationoff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetLogexpirationoffOk() (*bool, bool) {
	if o == nil || IsNil(o.Logexpirationoff) {
		return nil, false
	}
	return o.Logexpirationoff, true
}

// HasLogexpirationoff returns a boolean if a field has been set.
func (o *SlaRest) HasLogexpirationoff() bool {
	if o != nil && !IsNil(o.Logexpirationoff) {
		return true
	}

	return false
}

// SetLogexpirationoff gets a reference to the given bool and assigns it to the Logexpirationoff field.
func (o *SlaRest) SetLogexpirationoff(v bool) {
	o.Logexpirationoff = &v
}

// GetDedupasyncoff returns the Dedupasyncoff field value if set, zero value otherwise.
func (o *SlaRest) GetDedupasyncoff() string {
	if o == nil || IsNil(o.Dedupasyncoff) {
		var ret string
		return ret
	}
	return *o.Dedupasyncoff
}

// GetDedupasyncoffOk returns a tuple with the Dedupasyncoff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetDedupasyncoffOk() (*string, bool) {
	if o == nil || IsNil(o.Dedupasyncoff) {
		return nil, false
	}
	return o.Dedupasyncoff, true
}

// HasDedupasyncoff returns a boolean if a field has been set.
func (o *SlaRest) HasDedupasyncoff() bool {
	if o != nil && !IsNil(o.Dedupasyncoff) {
		return true
	}

	return false
}

// SetDedupasyncoff gets a reference to the given string and assigns it to the Dedupasyncoff field.
func (o *SlaRest) SetDedupasyncoff(v string) {
	o.Dedupasyncoff = &v
}

// GetExpirationoff returns the Expirationoff field value if set, zero value otherwise.
func (o *SlaRest) GetExpirationoff() string {
	if o == nil || IsNil(o.Expirationoff) {
		var ret string
		return ret
	}
	return *o.Expirationoff
}

// GetExpirationoffOk returns a tuple with the Expirationoff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetExpirationoffOk() (*string, bool) {
	if o == nil || IsNil(o.Expirationoff) {
		return nil, false
	}
	return o.Expirationoff, true
}

// HasExpirationoff returns a boolean if a field has been set.
func (o *SlaRest) HasExpirationoff() bool {
	if o != nil && !IsNil(o.Expirationoff) {
		return true
	}

	return false
}

// SetExpirationoff gets a reference to the given string and assigns it to the Expirationoff field.
func (o *SlaRest) SetExpirationoff(v string) {
	o.Expirationoff = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *SlaRest) GetGroup() LogicalGroupRest {
	if o == nil || IsNil(o.Group) {
		var ret LogicalGroupRest
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetGroupOk() (*LogicalGroupRest, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *SlaRest) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given LogicalGroupRest and assigns it to the Group field.
func (o *SlaRest) SetGroup(v LogicalGroupRest) {
	o.Group = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SlaRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SlaRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SlaRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *SlaRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *SlaRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *SlaRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *SlaRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *SlaRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *SlaRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *SlaRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlaRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *SlaRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *SlaRest) SetStale(v bool) {
	o.Stale = &v
}

func (o SlaRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SlaRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Immutable) {
		toSerialize["immutable"] = o.Immutable
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.Slt) {
		toSerialize["slt"] = o.Slt
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Modifydate) {
		toSerialize["modifydate"] = o.Modifydate
	}
	if !IsNil(o.Scheduleoff) {
		toSerialize["scheduleoff"] = o.Scheduleoff
	}
	if !IsNil(o.Slp) {
		toSerialize["slp"] = o.Slp
	}
	if !IsNil(o.Logexpirationoff) {
		toSerialize["logexpirationoff"] = o.Logexpirationoff
	}
	if !IsNil(o.Dedupasyncoff) {
		toSerialize["dedupasyncoff"] = o.Dedupasyncoff
	}
	if !IsNil(o.Expirationoff) {
		toSerialize["expirationoff"] = o.Expirationoff
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableSlaRest struct {
	value *SlaRest
	isSet bool
}

func (v NullableSlaRest) Get() *SlaRest {
	return v.value
}

func (v *NullableSlaRest) Set(val *SlaRest) {
	v.value = val
	v.isSet = true
}

func (v NullableSlaRest) IsSet() bool {
	return v.isSet
}

func (v *NullableSlaRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlaRest(val *SlaRest) *NullableSlaRest {
	return &NullableSlaRest{value: val, isSet: true}
}

func (v NullableSlaRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlaRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


