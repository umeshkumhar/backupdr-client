/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ArrayRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArrayRest{}

// ArrayRest struct for ArrayRest
type ArrayRest struct {
	Sources []ArrayRest `json:"sources,omitempty"`
	Name *string `json:"name,omitempty"`
	Properties []KeyValueRest `json:"properties,omitempty"`
	Srcid *int64 `json:"srcid,omitempty"`
	Clusterid *int64 `json:"clusterid,omitempty"`
	Modifydate *int64 `json:"modifydate,omitempty"`
	Username *string `json:"username,omitempty"`
	Ipaddress *string `json:"ipaddress,omitempty"`
	Status *string `json:"status,omitempty"`
	Overallstatus *string `json:"overallstatus,omitempty"`
	Model *string `json:"model,omitempty"`
	Arraytype *string `json:"arraytype,omitempty"`
	Orglist []OrganizationRest `json:"orglist,omitempty"`
	Storage []MdiskGroupRest `json:"storage,omitempty"`
	Arraytypelabel *string `json:"arraytypelabel,omitempty"`
	Hostcount *int32 `json:"hostcount,omitempty"`
	Diskpools []DiskPoolRest `json:"diskpools,omitempty"`
	Reset *bool `json:"reset,omitempty"`
	Appliance *ClusterRest `json:"appliance,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewArrayRest instantiates a new ArrayRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArrayRest() *ArrayRest {
	this := ArrayRest{}
	return &this
}

// NewArrayRestWithDefaults instantiates a new ArrayRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArrayRestWithDefaults() *ArrayRest {
	this := ArrayRest{}
	return &this
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *ArrayRest) GetSources() []ArrayRest {
	if o == nil || IsNil(o.Sources) {
		var ret []ArrayRest
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetSourcesOk() ([]ArrayRest, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *ArrayRest) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []ArrayRest and assigns it to the Sources field.
func (o *ArrayRest) SetSources(v []ArrayRest) {
	o.Sources = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ArrayRest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ArrayRest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ArrayRest) SetName(v string) {
	o.Name = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ArrayRest) GetProperties() []KeyValueRest {
	if o == nil || IsNil(o.Properties) {
		var ret []KeyValueRest
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetPropertiesOk() ([]KeyValueRest, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ArrayRest) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []KeyValueRest and assigns it to the Properties field.
func (o *ArrayRest) SetProperties(v []KeyValueRest) {
	o.Properties = v
}

// GetSrcid returns the Srcid field value if set, zero value otherwise.
func (o *ArrayRest) GetSrcid() int64 {
	if o == nil || IsNil(o.Srcid) {
		var ret int64
		return ret
	}
	return *o.Srcid
}

// GetSrcidOk returns a tuple with the Srcid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetSrcidOk() (*int64, bool) {
	if o == nil || IsNil(o.Srcid) {
		return nil, false
	}
	return o.Srcid, true
}

// HasSrcid returns a boolean if a field has been set.
func (o *ArrayRest) HasSrcid() bool {
	if o != nil && !IsNil(o.Srcid) {
		return true
	}

	return false
}

// SetSrcid gets a reference to the given int64 and assigns it to the Srcid field.
func (o *ArrayRest) SetSrcid(v int64) {
	o.Srcid = &v
}

// GetClusterid returns the Clusterid field value if set, zero value otherwise.
func (o *ArrayRest) GetClusterid() int64 {
	if o == nil || IsNil(o.Clusterid) {
		var ret int64
		return ret
	}
	return *o.Clusterid
}

// GetClusteridOk returns a tuple with the Clusterid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetClusteridOk() (*int64, bool) {
	if o == nil || IsNil(o.Clusterid) {
		return nil, false
	}
	return o.Clusterid, true
}

// HasClusterid returns a boolean if a field has been set.
func (o *ArrayRest) HasClusterid() bool {
	if o != nil && !IsNil(o.Clusterid) {
		return true
	}

	return false
}

// SetClusterid gets a reference to the given int64 and assigns it to the Clusterid field.
func (o *ArrayRest) SetClusterid(v int64) {
	o.Clusterid = &v
}

// GetModifydate returns the Modifydate field value if set, zero value otherwise.
func (o *ArrayRest) GetModifydate() int64 {
	if o == nil || IsNil(o.Modifydate) {
		var ret int64
		return ret
	}
	return *o.Modifydate
}

// GetModifydateOk returns a tuple with the Modifydate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetModifydateOk() (*int64, bool) {
	if o == nil || IsNil(o.Modifydate) {
		return nil, false
	}
	return o.Modifydate, true
}

// HasModifydate returns a boolean if a field has been set.
func (o *ArrayRest) HasModifydate() bool {
	if o != nil && !IsNil(o.Modifydate) {
		return true
	}

	return false
}

// SetModifydate gets a reference to the given int64 and assigns it to the Modifydate field.
func (o *ArrayRest) SetModifydate(v int64) {
	o.Modifydate = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ArrayRest) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ArrayRest) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ArrayRest) SetUsername(v string) {
	o.Username = &v
}

// GetIpaddress returns the Ipaddress field value if set, zero value otherwise.
func (o *ArrayRest) GetIpaddress() string {
	if o == nil || IsNil(o.Ipaddress) {
		var ret string
		return ret
	}
	return *o.Ipaddress
}

// GetIpaddressOk returns a tuple with the Ipaddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetIpaddressOk() (*string, bool) {
	if o == nil || IsNil(o.Ipaddress) {
		return nil, false
	}
	return o.Ipaddress, true
}

// HasIpaddress returns a boolean if a field has been set.
func (o *ArrayRest) HasIpaddress() bool {
	if o != nil && !IsNil(o.Ipaddress) {
		return true
	}

	return false
}

// SetIpaddress gets a reference to the given string and assigns it to the Ipaddress field.
func (o *ArrayRest) SetIpaddress(v string) {
	o.Ipaddress = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ArrayRest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ArrayRest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ArrayRest) SetStatus(v string) {
	o.Status = &v
}

// GetOverallstatus returns the Overallstatus field value if set, zero value otherwise.
func (o *ArrayRest) GetOverallstatus() string {
	if o == nil || IsNil(o.Overallstatus) {
		var ret string
		return ret
	}
	return *o.Overallstatus
}

// GetOverallstatusOk returns a tuple with the Overallstatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetOverallstatusOk() (*string, bool) {
	if o == nil || IsNil(o.Overallstatus) {
		return nil, false
	}
	return o.Overallstatus, true
}

// HasOverallstatus returns a boolean if a field has been set.
func (o *ArrayRest) HasOverallstatus() bool {
	if o != nil && !IsNil(o.Overallstatus) {
		return true
	}

	return false
}

// SetOverallstatus gets a reference to the given string and assigns it to the Overallstatus field.
func (o *ArrayRest) SetOverallstatus(v string) {
	o.Overallstatus = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *ArrayRest) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *ArrayRest) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *ArrayRest) SetModel(v string) {
	o.Model = &v
}

// GetArraytype returns the Arraytype field value if set, zero value otherwise.
func (o *ArrayRest) GetArraytype() string {
	if o == nil || IsNil(o.Arraytype) {
		var ret string
		return ret
	}
	return *o.Arraytype
}

// GetArraytypeOk returns a tuple with the Arraytype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetArraytypeOk() (*string, bool) {
	if o == nil || IsNil(o.Arraytype) {
		return nil, false
	}
	return o.Arraytype, true
}

// HasArraytype returns a boolean if a field has been set.
func (o *ArrayRest) HasArraytype() bool {
	if o != nil && !IsNil(o.Arraytype) {
		return true
	}

	return false
}

// SetArraytype gets a reference to the given string and assigns it to the Arraytype field.
func (o *ArrayRest) SetArraytype(v string) {
	o.Arraytype = &v
}

// GetOrglist returns the Orglist field value if set, zero value otherwise.
func (o *ArrayRest) GetOrglist() []OrganizationRest {
	if o == nil || IsNil(o.Orglist) {
		var ret []OrganizationRest
		return ret
	}
	return o.Orglist
}

// GetOrglistOk returns a tuple with the Orglist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetOrglistOk() ([]OrganizationRest, bool) {
	if o == nil || IsNil(o.Orglist) {
		return nil, false
	}
	return o.Orglist, true
}

// HasOrglist returns a boolean if a field has been set.
func (o *ArrayRest) HasOrglist() bool {
	if o != nil && !IsNil(o.Orglist) {
		return true
	}

	return false
}

// SetOrglist gets a reference to the given []OrganizationRest and assigns it to the Orglist field.
func (o *ArrayRest) SetOrglist(v []OrganizationRest) {
	o.Orglist = v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *ArrayRest) GetStorage() []MdiskGroupRest {
	if o == nil || IsNil(o.Storage) {
		var ret []MdiskGroupRest
		return ret
	}
	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetStorageOk() ([]MdiskGroupRest, bool) {
	if o == nil || IsNil(o.Storage) {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *ArrayRest) HasStorage() bool {
	if o != nil && !IsNil(o.Storage) {
		return true
	}

	return false
}

// SetStorage gets a reference to the given []MdiskGroupRest and assigns it to the Storage field.
func (o *ArrayRest) SetStorage(v []MdiskGroupRest) {
	o.Storage = v
}

// GetArraytypelabel returns the Arraytypelabel field value if set, zero value otherwise.
func (o *ArrayRest) GetArraytypelabel() string {
	if o == nil || IsNil(o.Arraytypelabel) {
		var ret string
		return ret
	}
	return *o.Arraytypelabel
}

// GetArraytypelabelOk returns a tuple with the Arraytypelabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetArraytypelabelOk() (*string, bool) {
	if o == nil || IsNil(o.Arraytypelabel) {
		return nil, false
	}
	return o.Arraytypelabel, true
}

// HasArraytypelabel returns a boolean if a field has been set.
func (o *ArrayRest) HasArraytypelabel() bool {
	if o != nil && !IsNil(o.Arraytypelabel) {
		return true
	}

	return false
}

// SetArraytypelabel gets a reference to the given string and assigns it to the Arraytypelabel field.
func (o *ArrayRest) SetArraytypelabel(v string) {
	o.Arraytypelabel = &v
}

// GetHostcount returns the Hostcount field value if set, zero value otherwise.
func (o *ArrayRest) GetHostcount() int32 {
	if o == nil || IsNil(o.Hostcount) {
		var ret int32
		return ret
	}
	return *o.Hostcount
}

// GetHostcountOk returns a tuple with the Hostcount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetHostcountOk() (*int32, bool) {
	if o == nil || IsNil(o.Hostcount) {
		return nil, false
	}
	return o.Hostcount, true
}

// HasHostcount returns a boolean if a field has been set.
func (o *ArrayRest) HasHostcount() bool {
	if o != nil && !IsNil(o.Hostcount) {
		return true
	}

	return false
}

// SetHostcount gets a reference to the given int32 and assigns it to the Hostcount field.
func (o *ArrayRest) SetHostcount(v int32) {
	o.Hostcount = &v
}

// GetDiskpools returns the Diskpools field value if set, zero value otherwise.
func (o *ArrayRest) GetDiskpools() []DiskPoolRest {
	if o == nil || IsNil(o.Diskpools) {
		var ret []DiskPoolRest
		return ret
	}
	return o.Diskpools
}

// GetDiskpoolsOk returns a tuple with the Diskpools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetDiskpoolsOk() ([]DiskPoolRest, bool) {
	if o == nil || IsNil(o.Diskpools) {
		return nil, false
	}
	return o.Diskpools, true
}

// HasDiskpools returns a boolean if a field has been set.
func (o *ArrayRest) HasDiskpools() bool {
	if o != nil && !IsNil(o.Diskpools) {
		return true
	}

	return false
}

// SetDiskpools gets a reference to the given []DiskPoolRest and assigns it to the Diskpools field.
func (o *ArrayRest) SetDiskpools(v []DiskPoolRest) {
	o.Diskpools = v
}

// GetReset returns the Reset field value if set, zero value otherwise.
func (o *ArrayRest) GetReset() bool {
	if o == nil || IsNil(o.Reset) {
		var ret bool
		return ret
	}
	return *o.Reset
}

// GetResetOk returns a tuple with the Reset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetResetOk() (*bool, bool) {
	if o == nil || IsNil(o.Reset) {
		return nil, false
	}
	return o.Reset, true
}

// HasReset returns a boolean if a field has been set.
func (o *ArrayRest) HasReset() bool {
	if o != nil && !IsNil(o.Reset) {
		return true
	}

	return false
}

// SetReset gets a reference to the given bool and assigns it to the Reset field.
func (o *ArrayRest) SetReset(v bool) {
	o.Reset = &v
}

// GetAppliance returns the Appliance field value if set, zero value otherwise.
func (o *ArrayRest) GetAppliance() ClusterRest {
	if o == nil || IsNil(o.Appliance) {
		var ret ClusterRest
		return ret
	}
	return *o.Appliance
}

// GetApplianceOk returns a tuple with the Appliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetApplianceOk() (*ClusterRest, bool) {
	if o == nil || IsNil(o.Appliance) {
		return nil, false
	}
	return o.Appliance, true
}

// HasAppliance returns a boolean if a field has been set.
func (o *ArrayRest) HasAppliance() bool {
	if o != nil && !IsNil(o.Appliance) {
		return true
	}

	return false
}

// SetAppliance gets a reference to the given ClusterRest and assigns it to the Appliance field.
func (o *ArrayRest) SetAppliance(v ClusterRest) {
	o.Appliance = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ArrayRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ArrayRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ArrayRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ArrayRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ArrayRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ArrayRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *ArrayRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *ArrayRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *ArrayRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *ArrayRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *ArrayRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *ArrayRest) SetStale(v bool) {
	o.Stale = &v
}

func (o ArrayRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArrayRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Srcid) {
		toSerialize["srcid"] = o.Srcid
	}
	if !IsNil(o.Clusterid) {
		toSerialize["clusterid"] = o.Clusterid
	}
	if !IsNil(o.Modifydate) {
		toSerialize["modifydate"] = o.Modifydate
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Ipaddress) {
		toSerialize["ipaddress"] = o.Ipaddress
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Overallstatus) {
		toSerialize["overallstatus"] = o.Overallstatus
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Arraytype) {
		toSerialize["arraytype"] = o.Arraytype
	}
	if !IsNil(o.Orglist) {
		toSerialize["orglist"] = o.Orglist
	}
	if !IsNil(o.Storage) {
		toSerialize["storage"] = o.Storage
	}
	if !IsNil(o.Arraytypelabel) {
		toSerialize["arraytypelabel"] = o.Arraytypelabel
	}
	if !IsNil(o.Hostcount) {
		toSerialize["hostcount"] = o.Hostcount
	}
	if !IsNil(o.Diskpools) {
		toSerialize["diskpools"] = o.Diskpools
	}
	if !IsNil(o.Reset) {
		toSerialize["reset"] = o.Reset
	}
	if !IsNil(o.Appliance) {
		toSerialize["appliance"] = o.Appliance
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableArrayRest struct {
	value *ArrayRest
	isSet bool
}

func (v NullableArrayRest) Get() *ArrayRest {
	return v.value
}

func (v *NullableArrayRest) Set(val *ArrayRest) {
	v.value = val
	v.isSet = true
}

func (v NullableArrayRest) IsSet() bool {
	return v.isSet
}

func (v *NullableArrayRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArrayRest(val *ArrayRest) *NullableArrayRest {
	return &NullableArrayRest{value: val, isSet: true}
}

func (v NullableArrayRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArrayRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


