/*
Backup and DR Service: Management Console API Spec

Testing ApplicationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/umeshkumhar/backupdr-client"
	"testing"
)

func Test_openapi_ApplicationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApplicationAPIService BackupNow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string

		httpRes, err := apiClient.ApplicationAPI.BackupNow(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService CountApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ApplicationAPI.CountApplications(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService CreateWorkflow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.ApplicationAPI.CreateWorkflow(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService DeleteApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string

		httpRes, err := apiClient.ApplicationAPI.DeleteApplication(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService DeleteOptionForApp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string
		var optionId string

		httpRes, err := apiClient.ApplicationAPI.DeleteOptionForApp(context.Background(), applicationId, optionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService DeleteWorkflow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string
		var workflowId string

		httpRes, err := apiClient.ApplicationAPI.DeleteWorkflow(context.Background(), applicationId, workflowId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService ExpireBackups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string

		httpRes, err := apiClient.ApplicationAPI.ExpireBackups(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService GetAppClass", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.ApplicationAPI.GetAppClass(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService GetAppClassByAppclassName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var appclassName string

		resp, httpRes, err := apiClient.ApplicationAPI.GetAppClassByAppclassName(context.Background(), appclassName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService GetAppClasses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApplicationAPI.GetAppClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService GetApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.ApplicationAPI.GetApplication(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService GetOptionForApp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string
		var optionId string

		resp, httpRes, err := apiClient.ApplicationAPI.GetOptionForApp(context.Background(), applicationId, optionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService GetWorkflow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string
		var workflowId string

		resp, httpRes, err := apiClient.ApplicationAPI.GetWorkflow(context.Background(), applicationId, workflowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService ListActiveImages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.ApplicationAPI.ListActiveImages(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService ListApplicationTypes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApplicationAPI.ListApplicationTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService ListApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApplicationAPI.ListApplications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService ListWorkflows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.ApplicationAPI.ListWorkflows(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService OptionsForList2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApplicationAPI.OptionsForList2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService SettableOptionMetadataForPolicyType", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apptype string

		resp, httpRes, err := apiClient.ApplicationAPI.SettableOptionMetadataForPolicyType(context.Background(), apptype).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService UpdateApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string

		httpRes, err := apiClient.ApplicationAPI.UpdateApplication(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService UpdateOptionForApp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string
		var optionId string

		resp, httpRes, err := apiClient.ApplicationAPI.UpdateOptionForApp(context.Background(), applicationId, optionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService UpdateWorkflow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicationId string
		var workflowId string

		resp, httpRes, err := apiClient.ApplicationAPI.UpdateWorkflow(context.Background(), applicationId, workflowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
