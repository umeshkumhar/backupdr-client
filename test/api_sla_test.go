/*
Backup and DR Service: Management Console API Spec

Testing SLAAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/umeshkumhar/backupdr-client"
	"testing"
)

func Test_openapi_SLAAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SLAAPIService CountSlas", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SLAAPI.CountSlas(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SLAAPIService CreateOptionForSla", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var slaId string

		resp, httpRes, err := apiClient.SLAAPI.CreateOptionForSla(context.Background(), slaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SLAAPIService CreateSla", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SLAAPI.CreateSla(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SLAAPIService DeleteOptionForSla", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var slaId string
		var optionId string

		httpRes, err := apiClient.SLAAPI.DeleteOptionForSla(context.Background(), slaId, optionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SLAAPIService DeleteSla", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var slaId string

		httpRes, err := apiClient.SLAAPI.DeleteSla(context.Background(), slaId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SLAAPIService GetOptionForSla", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var slaId string
		var optionId string

		resp, httpRes, err := apiClient.SLAAPI.GetOptionForSla(context.Background(), slaId, optionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SLAAPIService GetSla", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var slaId string

		resp, httpRes, err := apiClient.SLAAPI.GetSla(context.Background(), slaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SLAAPIService ListOptionForSla", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var slaId string

		resp, httpRes, err := apiClient.SLAAPI.ListOptionForSla(context.Background(), slaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SLAAPIService ListSlas", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SLAAPI.ListSlas(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SLAAPIService SettableOptionMetadataForSla", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var slaId string

		resp, httpRes, err := apiClient.SLAAPI.SettableOptionMetadataForSla(context.Background(), slaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SLAAPIService UpdateOptionForSla", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var slaId string
		var optionId string

		resp, httpRes, err := apiClient.SLAAPI.UpdateOptionForSla(context.Background(), slaId, optionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SLAAPIService UpdateSla", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var slaId string

		resp, httpRes, err := apiClient.SLAAPI.UpdateSla(context.Background(), slaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
