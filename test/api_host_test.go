/*
Backup and DR Service: Management Console API Spec

Testing HostAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/umeshkumhar/backupdr-client"
)

func Test_openapi_HostAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HostAPIService AddApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string

		resp, httpRes, err := apiClient.HostAPI.AddApplication(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService AppDiscovery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string

		resp, httpRes, err := apiClient.HostAPI.AppDiscovery(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService CountHosts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.HostAPI.CountHosts(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService CreateHost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HostAPI.CreateHost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService DeleteHost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string

		httpRes, err := apiClient.HostAPI.DeleteHost(context.Background(), hostId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService EnableConnectorUpgrade", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.HostAPI.EnableConnectorUpgrade(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService GetHost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string

		resp, httpRes, err := apiClient.HostAPI.GetHost(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService ListHosts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HostAPI.ListHosts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService OptionsForList9", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HostAPI.OptionsForList9(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService RevokeCertificate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HostAPI.RevokeCertificate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService UpdateHost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string

		resp, httpRes, err := apiClient.HostAPI.UpdateHost(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService VmAddNew", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string
		var clusterName string

		httpRes, err := apiClient.HostAPI.VmAddNew(context.Background(), hostId, clusterName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService VmDiscoveryWithoutCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostId string

		httpRes, err := apiClient.HostAPI.VmDiscoveryWithoutCluster(context.Background(), hostId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
