/*
Backup and DR Service: Management Console API Spec

Testing LogicalGroupAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/umeshkumhar/backupdr-client"
)

func Test_openapi_LogicalGroupAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LogicalGroupAPIService CountLogicalGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.LogicalGroupAPI.CountLogicalGroups(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalGroupAPIService CreateLogicalGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LogicalGroupAPI.CreateLogicalGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalGroupAPIService CreateLogicalGroupSla", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string

		httpRes, err := apiClient.LogicalGroupAPI.CreateLogicalGroupSla(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalGroupAPIService DeleteLogicalGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string

		httpRes, err := apiClient.LogicalGroupAPI.DeleteLogicalGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalGroupAPIService DeleteLogicalGroupSla", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string

		httpRes, err := apiClient.LogicalGroupAPI.DeleteLogicalGroupSla(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalGroupAPIService GetLogicalGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.LogicalGroupAPI.GetLogicalGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalGroupAPIService ListLogicalGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LogicalGroupAPI.ListLogicalGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalGroupAPIService ListLogicalGroupMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.LogicalGroupAPI.ListLogicalGroupMembers(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalGroupAPIService ModifyLogicalGroupMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string

		httpRes, err := apiClient.LogicalGroupAPI.ModifyLogicalGroupMembers(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalGroupAPIService OptionsForList11", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LogicalGroupAPI.OptionsForList11(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalGroupAPIService UpdateLogicalGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.LogicalGroupAPI.UpdateLogicalGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalGroupAPIService UpdateLogicalGroupSla", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.LogicalGroupAPI.UpdateLogicalGroupSla(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
