/*
Backup and DR Service: Management Console API Spec

Testing BackupAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/umeshkumhar/backupdr-client"
	"testing"
)

func Test_openapi_BackupAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BackupAPIService CloneBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupId string

		httpRes, err := apiClient.BackupAPI.CloneBackup(context.Background(), backupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService CountBackups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.BackupAPI.CountBackups(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService DeleteBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupId string

		httpRes, err := apiClient.BackupAPI.DeleteBackup(context.Background(), backupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService ExpireBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupId string

		httpRes, err := apiClient.BackupAPI.ExpireBackup(context.Background(), backupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService FetchApplicationOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupid string

		resp, httpRes, err := apiClient.BackupAPI.FetchApplicationOptions(context.Background(), backupid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService GetBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupId string

		resp, httpRes, err := apiClient.BackupAPI.GetBackup(context.Background(), backupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService GetDiskMapping", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupid string

		resp, httpRes, err := apiClient.BackupAPI.GetDiskMapping(context.Background(), backupid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService ListBackups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupAPI.ListBackups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService LiveCloneBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupId string

		httpRes, err := apiClient.BackupAPI.LiveCloneBackup(context.Background(), backupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService MigrateRestoreMountBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupid string

		httpRes, err := apiClient.BackupAPI.MigrateRestoreMountBackup(context.Background(), backupid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService MountBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupId string

		httpRes, err := apiClient.BackupAPI.MountBackup(context.Background(), backupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService MountMigratePreflight", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupid string

		resp, httpRes, err := apiClient.BackupAPI.MountMigratePreflight(context.Background(), backupid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService OptionsForList4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupAPI.OptionsForList4(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService PrepMountLiveCloneNew", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupId string

		httpRes, err := apiClient.BackupAPI.PrepMountLiveCloneNew(context.Background(), backupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService PrepUnmountBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupId string

		httpRes, err := apiClient.BackupAPI.PrepUnmountBackup(context.Background(), backupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService RefreshLiveClone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupId string

		httpRes, err := apiClient.BackupAPI.RefreshLiveClone(context.Background(), backupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService RestoreBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupId string

		httpRes, err := apiClient.BackupAPI.RestoreBackup(context.Background(), backupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService UnmountBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupId string

		httpRes, err := apiClient.BackupAPI.UnmountBackup(context.Background(), backupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupAPIService UpdateBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupId string

		resp, httpRes, err := apiClient.BackupAPI.UpdateBackup(context.Background(), backupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
