/*
Backup and DR Service: Management Console API Spec

Testing DiskPoolAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/umeshkumhar/backupdr-client"
)

func Test_openapi_DiskPoolAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DiskPoolAPIService CountDiskPools", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DiskPoolAPI.CountDiskPools(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiskPoolAPIService CreateDiskPool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DiskPoolAPI.CreateDiskPool(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiskPoolAPIService DeleteDiskPool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var diskpoolId string

		httpRes, err := apiClient.DiskPoolAPI.DeleteDiskPool(context.Background(), diskpoolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiskPoolAPIService GetDiskPool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var diskpoolId string

		resp, httpRes, err := apiClient.DiskPoolAPI.GetDiskPool(context.Background(), diskpoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiskPoolAPIService GetDynamicJsonForPoolManage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolType string
		var poolType2 string

		httpRes, err := apiClient.DiskPoolAPI.GetDynamicJsonForPoolManage(context.Background(), poolType, poolType2).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiskPoolAPIService GetVaultList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DiskPoolAPI.GetVaultList(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiskPoolAPIService ListDiskPools", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DiskPoolAPI.ListDiskPools(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiskPoolAPIService ListGcpVaultPool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DiskPoolAPI.ListGcpVaultPool(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiskPoolAPIService OptionsForList8", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DiskPoolAPI.OptionsForList8(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiskPoolAPIService UpdateDiskPool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var diskpoolId string

		resp, httpRes, err := apiClient.DiskPoolAPI.UpdateDiskPool(context.Background(), diskpoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
