/*
Backup and DR Service: Management Console API Spec

Testing OrganizationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/umeshkumhar/backupdr-client"
	"testing"
)

func Test_openapi_OrganizationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrganizationAPIService AddResourcesToOrg", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId int64

		resp, httpRes, err := apiClient.OrganizationAPI.AddResourcesToOrg(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationAPIService CountOrgs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.OrganizationAPI.CountOrgs(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationAPIService CreateOrg", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.OrganizationAPI.CreateOrg(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationAPIService DeleteOrg", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId int64

		httpRes, err := apiClient.OrganizationAPI.DeleteOrg(context.Background(), orgId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationAPIService GetOrg", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId int64

		resp, httpRes, err := apiClient.OrganizationAPI.GetOrg(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationAPIService ListOrgs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.OrganizationAPI.ListOrgs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationAPIService OptionsForList12", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.OrganizationAPI.OptionsForList12(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationAPIService RemoveResourcesFromOrg", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId int64

		resp, httpRes, err := apiClient.OrganizationAPI.RemoveResourcesFromOrg(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationAPIService UpdateOrg", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId int64

		resp, httpRes, err := apiClient.OrganizationAPI.UpdateOrg(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
