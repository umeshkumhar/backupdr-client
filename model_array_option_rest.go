/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ArrayOptionRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArrayOptionRest{}

// ArrayOptionRest struct for ArrayOptionRest
type ArrayOptionRest struct {
	Optiontype *string `json:"optiontype,omitempty"`
	Updatable *bool `json:"updatable,omitempty"`
	Needmask *bool `json:"needmask,omitempty"`
	Required *bool `json:"required,omitempty"`
	Name *string `json:"name,omitempty"`
	Max *int64 `json:"max,omitempty"`
	Label *string `json:"label,omitempty"`
	Valuetype *string `json:"valuetype,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewArrayOptionRest instantiates a new ArrayOptionRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArrayOptionRest() *ArrayOptionRest {
	this := ArrayOptionRest{}
	return &this
}

// NewArrayOptionRestWithDefaults instantiates a new ArrayOptionRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArrayOptionRestWithDefaults() *ArrayOptionRest {
	this := ArrayOptionRest{}
	return &this
}

// GetOptiontype returns the Optiontype field value if set, zero value otherwise.
func (o *ArrayOptionRest) GetOptiontype() string {
	if o == nil || IsNil(o.Optiontype) {
		var ret string
		return ret
	}
	return *o.Optiontype
}

// GetOptiontypeOk returns a tuple with the Optiontype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayOptionRest) GetOptiontypeOk() (*string, bool) {
	if o == nil || IsNil(o.Optiontype) {
		return nil, false
	}
	return o.Optiontype, true
}

// HasOptiontype returns a boolean if a field has been set.
func (o *ArrayOptionRest) HasOptiontype() bool {
	if o != nil && !IsNil(o.Optiontype) {
		return true
	}

	return false
}

// SetOptiontype gets a reference to the given string and assigns it to the Optiontype field.
func (o *ArrayOptionRest) SetOptiontype(v string) {
	o.Optiontype = &v
}

// GetUpdatable returns the Updatable field value if set, zero value otherwise.
func (o *ArrayOptionRest) GetUpdatable() bool {
	if o == nil || IsNil(o.Updatable) {
		var ret bool
		return ret
	}
	return *o.Updatable
}

// GetUpdatableOk returns a tuple with the Updatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayOptionRest) GetUpdatableOk() (*bool, bool) {
	if o == nil || IsNil(o.Updatable) {
		return nil, false
	}
	return o.Updatable, true
}

// HasUpdatable returns a boolean if a field has been set.
func (o *ArrayOptionRest) HasUpdatable() bool {
	if o != nil && !IsNil(o.Updatable) {
		return true
	}

	return false
}

// SetUpdatable gets a reference to the given bool and assigns it to the Updatable field.
func (o *ArrayOptionRest) SetUpdatable(v bool) {
	o.Updatable = &v
}

// GetNeedmask returns the Needmask field value if set, zero value otherwise.
func (o *ArrayOptionRest) GetNeedmask() bool {
	if o == nil || IsNil(o.Needmask) {
		var ret bool
		return ret
	}
	return *o.Needmask
}

// GetNeedmaskOk returns a tuple with the Needmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayOptionRest) GetNeedmaskOk() (*bool, bool) {
	if o == nil || IsNil(o.Needmask) {
		return nil, false
	}
	return o.Needmask, true
}

// HasNeedmask returns a boolean if a field has been set.
func (o *ArrayOptionRest) HasNeedmask() bool {
	if o != nil && !IsNil(o.Needmask) {
		return true
	}

	return false
}

// SetNeedmask gets a reference to the given bool and assigns it to the Needmask field.
func (o *ArrayOptionRest) SetNeedmask(v bool) {
	o.Needmask = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ArrayOptionRest) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayOptionRest) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ArrayOptionRest) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ArrayOptionRest) SetRequired(v bool) {
	o.Required = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ArrayOptionRest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayOptionRest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ArrayOptionRest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ArrayOptionRest) SetName(v string) {
	o.Name = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *ArrayOptionRest) GetMax() int64 {
	if o == nil || IsNil(o.Max) {
		var ret int64
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayOptionRest) GetMaxOk() (*int64, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *ArrayOptionRest) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given int64 and assigns it to the Max field.
func (o *ArrayOptionRest) SetMax(v int64) {
	o.Max = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ArrayOptionRest) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayOptionRest) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ArrayOptionRest) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ArrayOptionRest) SetLabel(v string) {
	o.Label = &v
}

// GetValuetype returns the Valuetype field value if set, zero value otherwise.
func (o *ArrayOptionRest) GetValuetype() string {
	if o == nil || IsNil(o.Valuetype) {
		var ret string
		return ret
	}
	return *o.Valuetype
}

// GetValuetypeOk returns a tuple with the Valuetype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayOptionRest) GetValuetypeOk() (*string, bool) {
	if o == nil || IsNil(o.Valuetype) {
		return nil, false
	}
	return o.Valuetype, true
}

// HasValuetype returns a boolean if a field has been set.
func (o *ArrayOptionRest) HasValuetype() bool {
	if o != nil && !IsNil(o.Valuetype) {
		return true
	}

	return false
}

// SetValuetype gets a reference to the given string and assigns it to the Valuetype field.
func (o *ArrayOptionRest) SetValuetype(v string) {
	o.Valuetype = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ArrayOptionRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayOptionRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ArrayOptionRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ArrayOptionRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ArrayOptionRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayOptionRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ArrayOptionRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ArrayOptionRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *ArrayOptionRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayOptionRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *ArrayOptionRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *ArrayOptionRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *ArrayOptionRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayOptionRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *ArrayOptionRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *ArrayOptionRest) SetStale(v bool) {
	o.Stale = &v
}

func (o ArrayOptionRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArrayOptionRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Optiontype) {
		toSerialize["optiontype"] = o.Optiontype
	}
	if !IsNil(o.Updatable) {
		toSerialize["updatable"] = o.Updatable
	}
	if !IsNil(o.Needmask) {
		toSerialize["needmask"] = o.Needmask
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Valuetype) {
		toSerialize["valuetype"] = o.Valuetype
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableArrayOptionRest struct {
	value *ArrayOptionRest
	isSet bool
}

func (v NullableArrayOptionRest) Get() *ArrayOptionRest {
	return v.value
}

func (v *NullableArrayOptionRest) Set(val *ArrayOptionRest) {
	v.value = val
	v.isSet = true
}

func (v NullableArrayOptionRest) IsSet() bool {
	return v.isSet
}

func (v *NullableArrayOptionRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArrayOptionRest(val *ArrayOptionRest) *NullableArrayOptionRest {
	return &NullableArrayOptionRest{value: val, isSet: true}
}

func (v NullableArrayOptionRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArrayOptionRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


