/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VersionRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionRest{}

// VersionRest struct for VersionRest
type VersionRest struct {
	Revision *string `json:"revision,omitempty"`
	Product *string `json:"product,omitempty"`
	Major *string `json:"major,omitempty"`
	Minor *string `json:"minor,omitempty"`
	Summary *string `json:"summary,omitempty"`
	Maintenance *string `json:"maintenance,omitempty"`
}

// NewVersionRest instantiates a new VersionRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionRest() *VersionRest {
	this := VersionRest{}
	return &this
}

// NewVersionRestWithDefaults instantiates a new VersionRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionRestWithDefaults() *VersionRest {
	this := VersionRest{}
	return &this
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *VersionRest) GetRevision() string {
	if o == nil || IsNil(o.Revision) {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionRest) GetRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *VersionRest) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *VersionRest) SetRevision(v string) {
	o.Revision = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *VersionRest) GetProduct() string {
	if o == nil || IsNil(o.Product) {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionRest) GetProductOk() (*string, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *VersionRest) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *VersionRest) SetProduct(v string) {
	o.Product = &v
}

// GetMajor returns the Major field value if set, zero value otherwise.
func (o *VersionRest) GetMajor() string {
	if o == nil || IsNil(o.Major) {
		var ret string
		return ret
	}
	return *o.Major
}

// GetMajorOk returns a tuple with the Major field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionRest) GetMajorOk() (*string, bool) {
	if o == nil || IsNil(o.Major) {
		return nil, false
	}
	return o.Major, true
}

// HasMajor returns a boolean if a field has been set.
func (o *VersionRest) HasMajor() bool {
	if o != nil && !IsNil(o.Major) {
		return true
	}

	return false
}

// SetMajor gets a reference to the given string and assigns it to the Major field.
func (o *VersionRest) SetMajor(v string) {
	o.Major = &v
}

// GetMinor returns the Minor field value if set, zero value otherwise.
func (o *VersionRest) GetMinor() string {
	if o == nil || IsNil(o.Minor) {
		var ret string
		return ret
	}
	return *o.Minor
}

// GetMinorOk returns a tuple with the Minor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionRest) GetMinorOk() (*string, bool) {
	if o == nil || IsNil(o.Minor) {
		return nil, false
	}
	return o.Minor, true
}

// HasMinor returns a boolean if a field has been set.
func (o *VersionRest) HasMinor() bool {
	if o != nil && !IsNil(o.Minor) {
		return true
	}

	return false
}

// SetMinor gets a reference to the given string and assigns it to the Minor field.
func (o *VersionRest) SetMinor(v string) {
	o.Minor = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *VersionRest) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionRest) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *VersionRest) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *VersionRest) SetSummary(v string) {
	o.Summary = &v
}

// GetMaintenance returns the Maintenance field value if set, zero value otherwise.
func (o *VersionRest) GetMaintenance() string {
	if o == nil || IsNil(o.Maintenance) {
		var ret string
		return ret
	}
	return *o.Maintenance
}

// GetMaintenanceOk returns a tuple with the Maintenance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionRest) GetMaintenanceOk() (*string, bool) {
	if o == nil || IsNil(o.Maintenance) {
		return nil, false
	}
	return o.Maintenance, true
}

// HasMaintenance returns a boolean if a field has been set.
func (o *VersionRest) HasMaintenance() bool {
	if o != nil && !IsNil(o.Maintenance) {
		return true
	}

	return false
}

// SetMaintenance gets a reference to the given string and assigns it to the Maintenance field.
func (o *VersionRest) SetMaintenance(v string) {
	o.Maintenance = &v
}

func (o VersionRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.Major) {
		toSerialize["major"] = o.Major
	}
	if !IsNil(o.Minor) {
		toSerialize["minor"] = o.Minor
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.Maintenance) {
		toSerialize["maintenance"] = o.Maintenance
	}
	return toSerialize, nil
}

type NullableVersionRest struct {
	value *VersionRest
	isSet bool
}

func (v NullableVersionRest) Get() *VersionRest {
	return v.value
}

func (v *NullableVersionRest) Set(val *VersionRest) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionRest) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionRest(val *VersionRest) *NullableVersionRest {
	return &NullableVersionRest{value: val, isSet: true}
}

func (v NullableVersionRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


