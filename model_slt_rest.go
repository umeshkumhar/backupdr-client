/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SltRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SltRest{}

// SltRest struct for SltRest
type SltRest struct {
	Immutable *bool `json:"immutable,omitempty"`
	OptionHref *string `json:"option_href,omitempty"`
	PolicyHref *string `json:"policy_href,omitempty"`
	Source []SourceRest `json:"source,omitempty"`
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	Sourcename *string `json:"sourcename,omitempty"`
	Override *string `json:"override,omitempty"`
	Policies []PolicyRest `json:"policies,omitempty"`
	Options []AdvancedOptionRest `json:"options,omitempty"`
	Orglist []OrganizationRest `json:"orglist,omitempty"`
	Managedbyagm *bool `json:"managedbyagm,omitempty"`
	Usedbycloudapp *bool `json:"usedbycloudapp,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewSltRest instantiates a new SltRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSltRest() *SltRest {
	this := SltRest{}
	return &this
}

// NewSltRestWithDefaults instantiates a new SltRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSltRestWithDefaults() *SltRest {
	this := SltRest{}
	return &this
}

// GetImmutable returns the Immutable field value if set, zero value otherwise.
func (o *SltRest) GetImmutable() bool {
	if o == nil || IsNil(o.Immutable) {
		var ret bool
		return ret
	}
	return *o.Immutable
}

// GetImmutableOk returns a tuple with the Immutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetImmutableOk() (*bool, bool) {
	if o == nil || IsNil(o.Immutable) {
		return nil, false
	}
	return o.Immutable, true
}

// HasImmutable returns a boolean if a field has been set.
func (o *SltRest) HasImmutable() bool {
	if o != nil && !IsNil(o.Immutable) {
		return true
	}

	return false
}

// SetImmutable gets a reference to the given bool and assigns it to the Immutable field.
func (o *SltRest) SetImmutable(v bool) {
	o.Immutable = &v
}

// GetOptionHref returns the OptionHref field value if set, zero value otherwise.
func (o *SltRest) GetOptionHref() string {
	if o == nil || IsNil(o.OptionHref) {
		var ret string
		return ret
	}
	return *o.OptionHref
}

// GetOptionHrefOk returns a tuple with the OptionHref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetOptionHrefOk() (*string, bool) {
	if o == nil || IsNil(o.OptionHref) {
		return nil, false
	}
	return o.OptionHref, true
}

// HasOptionHref returns a boolean if a field has been set.
func (o *SltRest) HasOptionHref() bool {
	if o != nil && !IsNil(o.OptionHref) {
		return true
	}

	return false
}

// SetOptionHref gets a reference to the given string and assigns it to the OptionHref field.
func (o *SltRest) SetOptionHref(v string) {
	o.OptionHref = &v
}

// GetPolicyHref returns the PolicyHref field value if set, zero value otherwise.
func (o *SltRest) GetPolicyHref() string {
	if o == nil || IsNil(o.PolicyHref) {
		var ret string
		return ret
	}
	return *o.PolicyHref
}

// GetPolicyHrefOk returns a tuple with the PolicyHref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetPolicyHrefOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyHref) {
		return nil, false
	}
	return o.PolicyHref, true
}

// HasPolicyHref returns a boolean if a field has been set.
func (o *SltRest) HasPolicyHref() bool {
	if o != nil && !IsNil(o.PolicyHref) {
		return true
	}

	return false
}

// SetPolicyHref gets a reference to the given string and assigns it to the PolicyHref field.
func (o *SltRest) SetPolicyHref(v string) {
	o.PolicyHref = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SltRest) GetSource() []SourceRest {
	if o == nil || IsNil(o.Source) {
		var ret []SourceRest
		return ret
	}
	return o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetSourceOk() ([]SourceRest, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SltRest) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given []SourceRest and assigns it to the Source field.
func (o *SltRest) SetSource(v []SourceRest) {
	o.Source = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SltRest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SltRest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SltRest) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SltRest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SltRest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SltRest) SetName(v string) {
	o.Name = &v
}

// GetSourcename returns the Sourcename field value if set, zero value otherwise.
func (o *SltRest) GetSourcename() string {
	if o == nil || IsNil(o.Sourcename) {
		var ret string
		return ret
	}
	return *o.Sourcename
}

// GetSourcenameOk returns a tuple with the Sourcename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetSourcenameOk() (*string, bool) {
	if o == nil || IsNil(o.Sourcename) {
		return nil, false
	}
	return o.Sourcename, true
}

// HasSourcename returns a boolean if a field has been set.
func (o *SltRest) HasSourcename() bool {
	if o != nil && !IsNil(o.Sourcename) {
		return true
	}

	return false
}

// SetSourcename gets a reference to the given string and assigns it to the Sourcename field.
func (o *SltRest) SetSourcename(v string) {
	o.Sourcename = &v
}

// GetOverride returns the Override field value if set, zero value otherwise.
func (o *SltRest) GetOverride() string {
	if o == nil || IsNil(o.Override) {
		var ret string
		return ret
	}
	return *o.Override
}

// GetOverrideOk returns a tuple with the Override field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.Override) {
		return nil, false
	}
	return o.Override, true
}

// HasOverride returns a boolean if a field has been set.
func (o *SltRest) HasOverride() bool {
	if o != nil && !IsNil(o.Override) {
		return true
	}

	return false
}

// SetOverride gets a reference to the given string and assigns it to the Override field.
func (o *SltRest) SetOverride(v string) {
	o.Override = &v
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
func (o *SltRest) GetPolicies() []PolicyRest {
	if o == nil || IsNil(o.Policies) {
		var ret []PolicyRest
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetPoliciesOk() ([]PolicyRest, bool) {
	if o == nil || IsNil(o.Policies) {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *SltRest) HasPolicies() bool {
	if o != nil && !IsNil(o.Policies) {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []PolicyRest and assigns it to the Policies field.
func (o *SltRest) SetPolicies(v []PolicyRest) {
	o.Policies = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *SltRest) GetOptions() []AdvancedOptionRest {
	if o == nil || IsNil(o.Options) {
		var ret []AdvancedOptionRest
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetOptionsOk() ([]AdvancedOptionRest, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *SltRest) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []AdvancedOptionRest and assigns it to the Options field.
func (o *SltRest) SetOptions(v []AdvancedOptionRest) {
	o.Options = v
}

// GetOrglist returns the Orglist field value if set, zero value otherwise.
func (o *SltRest) GetOrglist() []OrganizationRest {
	if o == nil || IsNil(o.Orglist) {
		var ret []OrganizationRest
		return ret
	}
	return o.Orglist
}

// GetOrglistOk returns a tuple with the Orglist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetOrglistOk() ([]OrganizationRest, bool) {
	if o == nil || IsNil(o.Orglist) {
		return nil, false
	}
	return o.Orglist, true
}

// HasOrglist returns a boolean if a field has been set.
func (o *SltRest) HasOrglist() bool {
	if o != nil && !IsNil(o.Orglist) {
		return true
	}

	return false
}

// SetOrglist gets a reference to the given []OrganizationRest and assigns it to the Orglist field.
func (o *SltRest) SetOrglist(v []OrganizationRest) {
	o.Orglist = v
}

// GetManagedbyagm returns the Managedbyagm field value if set, zero value otherwise.
func (o *SltRest) GetManagedbyagm() bool {
	if o == nil || IsNil(o.Managedbyagm) {
		var ret bool
		return ret
	}
	return *o.Managedbyagm
}

// GetManagedbyagmOk returns a tuple with the Managedbyagm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetManagedbyagmOk() (*bool, bool) {
	if o == nil || IsNil(o.Managedbyagm) {
		return nil, false
	}
	return o.Managedbyagm, true
}

// HasManagedbyagm returns a boolean if a field has been set.
func (o *SltRest) HasManagedbyagm() bool {
	if o != nil && !IsNil(o.Managedbyagm) {
		return true
	}

	return false
}

// SetManagedbyagm gets a reference to the given bool and assigns it to the Managedbyagm field.
func (o *SltRest) SetManagedbyagm(v bool) {
	o.Managedbyagm = &v
}

// GetUsedbycloudapp returns the Usedbycloudapp field value if set, zero value otherwise.
func (o *SltRest) GetUsedbycloudapp() bool {
	if o == nil || IsNil(o.Usedbycloudapp) {
		var ret bool
		return ret
	}
	return *o.Usedbycloudapp
}

// GetUsedbycloudappOk returns a tuple with the Usedbycloudapp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetUsedbycloudappOk() (*bool, bool) {
	if o == nil || IsNil(o.Usedbycloudapp) {
		return nil, false
	}
	return o.Usedbycloudapp, true
}

// HasUsedbycloudapp returns a boolean if a field has been set.
func (o *SltRest) HasUsedbycloudapp() bool {
	if o != nil && !IsNil(o.Usedbycloudapp) {
		return true
	}

	return false
}

// SetUsedbycloudapp gets a reference to the given bool and assigns it to the Usedbycloudapp field.
func (o *SltRest) SetUsedbycloudapp(v bool) {
	o.Usedbycloudapp = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SltRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SltRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SltRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *SltRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *SltRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *SltRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *SltRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *SltRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *SltRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *SltRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SltRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *SltRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *SltRest) SetStale(v bool) {
	o.Stale = &v
}

func (o SltRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SltRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Immutable) {
		toSerialize["immutable"] = o.Immutable
	}
	if !IsNil(o.OptionHref) {
		toSerialize["option_href"] = o.OptionHref
	}
	if !IsNil(o.PolicyHref) {
		toSerialize["policy_href"] = o.PolicyHref
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Sourcename) {
		toSerialize["sourcename"] = o.Sourcename
	}
	if !IsNil(o.Override) {
		toSerialize["override"] = o.Override
	}
	if !IsNil(o.Policies) {
		toSerialize["policies"] = o.Policies
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Orglist) {
		toSerialize["orglist"] = o.Orglist
	}
	if !IsNil(o.Managedbyagm) {
		toSerialize["managedbyagm"] = o.Managedbyagm
	}
	if !IsNil(o.Usedbycloudapp) {
		toSerialize["usedbycloudapp"] = o.Usedbycloudapp
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableSltRest struct {
	value *SltRest
	isSet bool
}

func (v NullableSltRest) Get() *SltRest {
	return v.value
}

func (v *NullableSltRest) Set(val *SltRest) {
	v.value = val
	v.isSet = true
}

func (v NullableSltRest) IsSet() bool {
	return v.isSet
}

func (v *NullableSltRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSltRest(val *SltRest) *NullableSltRest {
	return &NullableSltRest{value: val, isSet: true}
}

func (v NullableSltRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSltRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


