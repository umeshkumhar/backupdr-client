/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FormFieldRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormFieldRest{}

// FormFieldRest struct for FormFieldRest
type FormFieldRest struct {
	Required *bool `json:"required,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Header []ChoiceValueRest `json:"header,omitempty"`
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Size *int32 `json:"size,omitempty"`
	Maximum *int32 `json:"maximum,omitempty"`
	Minimum *int32 `json:"minimum,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	Choices []ChoiceValueRest `json:"choices,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	Warning *string `json:"warning,omitempty"`
	Rows []VolumeSelectionRowRest `json:"rows,omitempty"`
	Values []string `json:"values,omitempty"`
	CurrentValue *string `json:"currentValue,omitempty"`
	Validation *string `json:"validation,omitempty"`
	Title *string `json:"title,omitempty"`
	HelpId *string `json:"helpId,omitempty"`
	Optiongroup *bool `json:"optiongroup,omitempty"`
	Readonly *bool `json:"readonly,omitempty"`
	Modified *bool `json:"modified,omitempty"`
	Dynamic *bool `json:"dynamic,omitempty"`
	Tags []ChoiceValueRest `json:"tags,omitempty"`
	Networktags []ChoiceValueRest `json:"networktags,omitempty"`
	GetGetchoices *string `json:"get_getchoices,omitempty"`
	GetGetDefault *string `json:"get_getDefault,omitempty"`
	GetDependent []string `json:"get_dependent,omitempty"`
	Hidden *bool `json:"hidden,omitempty"`
	GroupBy *bool `json:"groupBy,omitempty"`
	GroupType *string `json:"groupType,omitempty"`
	Invalid *string `json:"invalid,omitempty"`
	InvalidStr *string `json:"invalidStr,omitempty"`
	GetDefault *string `json:"get_default,omitempty"`
	Checked *bool `json:"checked,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewFormFieldRest instantiates a new FormFieldRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormFieldRest() *FormFieldRest {
	this := FormFieldRest{}
	return &this
}

// NewFormFieldRestWithDefaults instantiates a new FormFieldRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormFieldRestWithDefaults() *FormFieldRest {
	this := FormFieldRest{}
	return &this
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *FormFieldRest) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *FormFieldRest) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *FormFieldRest) SetRequired(v bool) {
	o.Required = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *FormFieldRest) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *FormFieldRest) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *FormFieldRest) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *FormFieldRest) GetHeader() []ChoiceValueRest {
	if o == nil || IsNil(o.Header) {
		var ret []ChoiceValueRest
		return ret
	}
	return o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetHeaderOk() ([]ChoiceValueRest, bool) {
	if o == nil || IsNil(o.Header) {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *FormFieldRest) HasHeader() bool {
	if o != nil && !IsNil(o.Header) {
		return true
	}

	return false
}

// SetHeader gets a reference to the given []ChoiceValueRest and assigns it to the Header field.
func (o *FormFieldRest) SetHeader(v []ChoiceValueRest) {
	o.Header = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FormFieldRest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FormFieldRest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FormFieldRest) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FormFieldRest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FormFieldRest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FormFieldRest) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FormFieldRest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FormFieldRest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FormFieldRest) SetType(v string) {
	o.Type = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *FormFieldRest) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *FormFieldRest) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *FormFieldRest) SetSize(v int32) {
	o.Size = &v
}

// GetMaximum returns the Maximum field value if set, zero value otherwise.
func (o *FormFieldRest) GetMaximum() int32 {
	if o == nil || IsNil(o.Maximum) {
		var ret int32
		return ret
	}
	return *o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetMaximumOk() (*int32, bool) {
	if o == nil || IsNil(o.Maximum) {
		return nil, false
	}
	return o.Maximum, true
}

// HasMaximum returns a boolean if a field has been set.
func (o *FormFieldRest) HasMaximum() bool {
	if o != nil && !IsNil(o.Maximum) {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given int32 and assigns it to the Maximum field.
func (o *FormFieldRest) SetMaximum(v int32) {
	o.Maximum = &v
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *FormFieldRest) GetMinimum() int32 {
	if o == nil || IsNil(o.Minimum) {
		var ret int32
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetMinimumOk() (*int32, bool) {
	if o == nil || IsNil(o.Minimum) {
		return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *FormFieldRest) HasMinimum() bool {
	if o != nil && !IsNil(o.Minimum) {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given int32 and assigns it to the Minimum field.
func (o *FormFieldRest) SetMinimum(v int32) {
	o.Minimum = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *FormFieldRest) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *FormFieldRest) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *FormFieldRest) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetChoices returns the Choices field value if set, zero value otherwise.
func (o *FormFieldRest) GetChoices() []ChoiceValueRest {
	if o == nil || IsNil(o.Choices) {
		var ret []ChoiceValueRest
		return ret
	}
	return o.Choices
}

// GetChoicesOk returns a tuple with the Choices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetChoicesOk() ([]ChoiceValueRest, bool) {
	if o == nil || IsNil(o.Choices) {
		return nil, false
	}
	return o.Choices, true
}

// HasChoices returns a boolean if a field has been set.
func (o *FormFieldRest) HasChoices() bool {
	if o != nil && !IsNil(o.Choices) {
		return true
	}

	return false
}

// SetChoices gets a reference to the given []ChoiceValueRest and assigns it to the Choices field.
func (o *FormFieldRest) SetChoices(v []ChoiceValueRest) {
	o.Choices = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *FormFieldRest) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *FormFieldRest) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *FormFieldRest) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *FormFieldRest) GetWarning() string {
	if o == nil || IsNil(o.Warning) {
		var ret string
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetWarningOk() (*string, bool) {
	if o == nil || IsNil(o.Warning) {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *FormFieldRest) HasWarning() bool {
	if o != nil && !IsNil(o.Warning) {
		return true
	}

	return false
}

// SetWarning gets a reference to the given string and assigns it to the Warning field.
func (o *FormFieldRest) SetWarning(v string) {
	o.Warning = &v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *FormFieldRest) GetRows() []VolumeSelectionRowRest {
	if o == nil || IsNil(o.Rows) {
		var ret []VolumeSelectionRowRest
		return ret
	}
	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetRowsOk() ([]VolumeSelectionRowRest, bool) {
	if o == nil || IsNil(o.Rows) {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *FormFieldRest) HasRows() bool {
	if o != nil && !IsNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given []VolumeSelectionRowRest and assigns it to the Rows field.
func (o *FormFieldRest) SetRows(v []VolumeSelectionRowRest) {
	o.Rows = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *FormFieldRest) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *FormFieldRest) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *FormFieldRest) SetValues(v []string) {
	o.Values = v
}

// GetCurrentValue returns the CurrentValue field value if set, zero value otherwise.
func (o *FormFieldRest) GetCurrentValue() string {
	if o == nil || IsNil(o.CurrentValue) {
		var ret string
		return ret
	}
	return *o.CurrentValue
}

// GetCurrentValueOk returns a tuple with the CurrentValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetCurrentValueOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentValue) {
		return nil, false
	}
	return o.CurrentValue, true
}

// HasCurrentValue returns a boolean if a field has been set.
func (o *FormFieldRest) HasCurrentValue() bool {
	if o != nil && !IsNil(o.CurrentValue) {
		return true
	}

	return false
}

// SetCurrentValue gets a reference to the given string and assigns it to the CurrentValue field.
func (o *FormFieldRest) SetCurrentValue(v string) {
	o.CurrentValue = &v
}

// GetValidation returns the Validation field value if set, zero value otherwise.
func (o *FormFieldRest) GetValidation() string {
	if o == nil || IsNil(o.Validation) {
		var ret string
		return ret
	}
	return *o.Validation
}

// GetValidationOk returns a tuple with the Validation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetValidationOk() (*string, bool) {
	if o == nil || IsNil(o.Validation) {
		return nil, false
	}
	return o.Validation, true
}

// HasValidation returns a boolean if a field has been set.
func (o *FormFieldRest) HasValidation() bool {
	if o != nil && !IsNil(o.Validation) {
		return true
	}

	return false
}

// SetValidation gets a reference to the given string and assigns it to the Validation field.
func (o *FormFieldRest) SetValidation(v string) {
	o.Validation = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *FormFieldRest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *FormFieldRest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *FormFieldRest) SetTitle(v string) {
	o.Title = &v
}

// GetHelpId returns the HelpId field value if set, zero value otherwise.
func (o *FormFieldRest) GetHelpId() string {
	if o == nil || IsNil(o.HelpId) {
		var ret string
		return ret
	}
	return *o.HelpId
}

// GetHelpIdOk returns a tuple with the HelpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetHelpIdOk() (*string, bool) {
	if o == nil || IsNil(o.HelpId) {
		return nil, false
	}
	return o.HelpId, true
}

// HasHelpId returns a boolean if a field has been set.
func (o *FormFieldRest) HasHelpId() bool {
	if o != nil && !IsNil(o.HelpId) {
		return true
	}

	return false
}

// SetHelpId gets a reference to the given string and assigns it to the HelpId field.
func (o *FormFieldRest) SetHelpId(v string) {
	o.HelpId = &v
}

// GetOptiongroup returns the Optiongroup field value if set, zero value otherwise.
func (o *FormFieldRest) GetOptiongroup() bool {
	if o == nil || IsNil(o.Optiongroup) {
		var ret bool
		return ret
	}
	return *o.Optiongroup
}

// GetOptiongroupOk returns a tuple with the Optiongroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetOptiongroupOk() (*bool, bool) {
	if o == nil || IsNil(o.Optiongroup) {
		return nil, false
	}
	return o.Optiongroup, true
}

// HasOptiongroup returns a boolean if a field has been set.
func (o *FormFieldRest) HasOptiongroup() bool {
	if o != nil && !IsNil(o.Optiongroup) {
		return true
	}

	return false
}

// SetOptiongroup gets a reference to the given bool and assigns it to the Optiongroup field.
func (o *FormFieldRest) SetOptiongroup(v bool) {
	o.Optiongroup = &v
}

// GetReadonly returns the Readonly field value if set, zero value otherwise.
func (o *FormFieldRest) GetReadonly() bool {
	if o == nil || IsNil(o.Readonly) {
		var ret bool
		return ret
	}
	return *o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetReadonlyOk() (*bool, bool) {
	if o == nil || IsNil(o.Readonly) {
		return nil, false
	}
	return o.Readonly, true
}

// HasReadonly returns a boolean if a field has been set.
func (o *FormFieldRest) HasReadonly() bool {
	if o != nil && !IsNil(o.Readonly) {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given bool and assigns it to the Readonly field.
func (o *FormFieldRest) SetReadonly(v bool) {
	o.Readonly = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *FormFieldRest) GetModified() bool {
	if o == nil || IsNil(o.Modified) {
		var ret bool
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetModifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *FormFieldRest) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given bool and assigns it to the Modified field.
func (o *FormFieldRest) SetModified(v bool) {
	o.Modified = &v
}

// GetDynamic returns the Dynamic field value if set, zero value otherwise.
func (o *FormFieldRest) GetDynamic() bool {
	if o == nil || IsNil(o.Dynamic) {
		var ret bool
		return ret
	}
	return *o.Dynamic
}

// GetDynamicOk returns a tuple with the Dynamic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetDynamicOk() (*bool, bool) {
	if o == nil || IsNil(o.Dynamic) {
		return nil, false
	}
	return o.Dynamic, true
}

// HasDynamic returns a boolean if a field has been set.
func (o *FormFieldRest) HasDynamic() bool {
	if o != nil && !IsNil(o.Dynamic) {
		return true
	}

	return false
}

// SetDynamic gets a reference to the given bool and assigns it to the Dynamic field.
func (o *FormFieldRest) SetDynamic(v bool) {
	o.Dynamic = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *FormFieldRest) GetTags() []ChoiceValueRest {
	if o == nil || IsNil(o.Tags) {
		var ret []ChoiceValueRest
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetTagsOk() ([]ChoiceValueRest, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *FormFieldRest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []ChoiceValueRest and assigns it to the Tags field.
func (o *FormFieldRest) SetTags(v []ChoiceValueRest) {
	o.Tags = v
}

// GetNetworktags returns the Networktags field value if set, zero value otherwise.
func (o *FormFieldRest) GetNetworktags() []ChoiceValueRest {
	if o == nil || IsNil(o.Networktags) {
		var ret []ChoiceValueRest
		return ret
	}
	return o.Networktags
}

// GetNetworktagsOk returns a tuple with the Networktags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetNetworktagsOk() ([]ChoiceValueRest, bool) {
	if o == nil || IsNil(o.Networktags) {
		return nil, false
	}
	return o.Networktags, true
}

// HasNetworktags returns a boolean if a field has been set.
func (o *FormFieldRest) HasNetworktags() bool {
	if o != nil && !IsNil(o.Networktags) {
		return true
	}

	return false
}

// SetNetworktags gets a reference to the given []ChoiceValueRest and assigns it to the Networktags field.
func (o *FormFieldRest) SetNetworktags(v []ChoiceValueRest) {
	o.Networktags = v
}

// GetGetGetchoices returns the GetGetchoices field value if set, zero value otherwise.
func (o *FormFieldRest) GetGetGetchoices() string {
	if o == nil || IsNil(o.GetGetchoices) {
		var ret string
		return ret
	}
	return *o.GetGetchoices
}

// GetGetGetchoicesOk returns a tuple with the GetGetchoices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetGetGetchoicesOk() (*string, bool) {
	if o == nil || IsNil(o.GetGetchoices) {
		return nil, false
	}
	return o.GetGetchoices, true
}

// HasGetGetchoices returns a boolean if a field has been set.
func (o *FormFieldRest) HasGetGetchoices() bool {
	if o != nil && !IsNil(o.GetGetchoices) {
		return true
	}

	return false
}

// SetGetGetchoices gets a reference to the given string and assigns it to the GetGetchoices field.
func (o *FormFieldRest) SetGetGetchoices(v string) {
	o.GetGetchoices = &v
}

// GetGetGetDefault returns the GetGetDefault field value if set, zero value otherwise.
func (o *FormFieldRest) GetGetGetDefault() string {
	if o == nil || IsNil(o.GetGetDefault) {
		var ret string
		return ret
	}
	return *o.GetGetDefault
}

// GetGetGetDefaultOk returns a tuple with the GetGetDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetGetGetDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.GetGetDefault) {
		return nil, false
	}
	return o.GetGetDefault, true
}

// HasGetGetDefault returns a boolean if a field has been set.
func (o *FormFieldRest) HasGetGetDefault() bool {
	if o != nil && !IsNil(o.GetGetDefault) {
		return true
	}

	return false
}

// SetGetGetDefault gets a reference to the given string and assigns it to the GetGetDefault field.
func (o *FormFieldRest) SetGetGetDefault(v string) {
	o.GetGetDefault = &v
}

// GetGetDependent returns the GetDependent field value if set, zero value otherwise.
func (o *FormFieldRest) GetGetDependent() []string {
	if o == nil || IsNil(o.GetDependent) {
		var ret []string
		return ret
	}
	return o.GetDependent
}

// GetGetDependentOk returns a tuple with the GetDependent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetGetDependentOk() ([]string, bool) {
	if o == nil || IsNil(o.GetDependent) {
		return nil, false
	}
	return o.GetDependent, true
}

// HasGetDependent returns a boolean if a field has been set.
func (o *FormFieldRest) HasGetDependent() bool {
	if o != nil && !IsNil(o.GetDependent) {
		return true
	}

	return false
}

// SetGetDependent gets a reference to the given []string and assigns it to the GetDependent field.
func (o *FormFieldRest) SetGetDependent(v []string) {
	o.GetDependent = v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *FormFieldRest) GetHidden() bool {
	if o == nil || IsNil(o.Hidden) {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *FormFieldRest) HasHidden() bool {
	if o != nil && !IsNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *FormFieldRest) SetHidden(v bool) {
	o.Hidden = &v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *FormFieldRest) GetGroupBy() bool {
	if o == nil || IsNil(o.GroupBy) {
		var ret bool
		return ret
	}
	return *o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetGroupByOk() (*bool, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *FormFieldRest) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given bool and assigns it to the GroupBy field.
func (o *FormFieldRest) SetGroupBy(v bool) {
	o.GroupBy = &v
}

// GetGroupType returns the GroupType field value if set, zero value otherwise.
func (o *FormFieldRest) GetGroupType() string {
	if o == nil || IsNil(o.GroupType) {
		var ret string
		return ret
	}
	return *o.GroupType
}

// GetGroupTypeOk returns a tuple with the GroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetGroupTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GroupType) {
		return nil, false
	}
	return o.GroupType, true
}

// HasGroupType returns a boolean if a field has been set.
func (o *FormFieldRest) HasGroupType() bool {
	if o != nil && !IsNil(o.GroupType) {
		return true
	}

	return false
}

// SetGroupType gets a reference to the given string and assigns it to the GroupType field.
func (o *FormFieldRest) SetGroupType(v string) {
	o.GroupType = &v
}

// GetInvalid returns the Invalid field value if set, zero value otherwise.
func (o *FormFieldRest) GetInvalid() string {
	if o == nil || IsNil(o.Invalid) {
		var ret string
		return ret
	}
	return *o.Invalid
}

// GetInvalidOk returns a tuple with the Invalid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetInvalidOk() (*string, bool) {
	if o == nil || IsNil(o.Invalid) {
		return nil, false
	}
	return o.Invalid, true
}

// HasInvalid returns a boolean if a field has been set.
func (o *FormFieldRest) HasInvalid() bool {
	if o != nil && !IsNil(o.Invalid) {
		return true
	}

	return false
}

// SetInvalid gets a reference to the given string and assigns it to the Invalid field.
func (o *FormFieldRest) SetInvalid(v string) {
	o.Invalid = &v
}

// GetInvalidStr returns the InvalidStr field value if set, zero value otherwise.
func (o *FormFieldRest) GetInvalidStr() string {
	if o == nil || IsNil(o.InvalidStr) {
		var ret string
		return ret
	}
	return *o.InvalidStr
}

// GetInvalidStrOk returns a tuple with the InvalidStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetInvalidStrOk() (*string, bool) {
	if o == nil || IsNil(o.InvalidStr) {
		return nil, false
	}
	return o.InvalidStr, true
}

// HasInvalidStr returns a boolean if a field has been set.
func (o *FormFieldRest) HasInvalidStr() bool {
	if o != nil && !IsNil(o.InvalidStr) {
		return true
	}

	return false
}

// SetInvalidStr gets a reference to the given string and assigns it to the InvalidStr field.
func (o *FormFieldRest) SetInvalidStr(v string) {
	o.InvalidStr = &v
}

// GetGetDefault returns the GetDefault field value if set, zero value otherwise.
func (o *FormFieldRest) GetGetDefault() string {
	if o == nil || IsNil(o.GetDefault) {
		var ret string
		return ret
	}
	return *o.GetDefault
}

// GetGetDefaultOk returns a tuple with the GetDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetGetDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.GetDefault) {
		return nil, false
	}
	return o.GetDefault, true
}

// HasGetDefault returns a boolean if a field has been set.
func (o *FormFieldRest) HasGetDefault() bool {
	if o != nil && !IsNil(o.GetDefault) {
		return true
	}

	return false
}

// SetGetDefault gets a reference to the given string and assigns it to the GetDefault field.
func (o *FormFieldRest) SetGetDefault(v string) {
	o.GetDefault = &v
}

// GetChecked returns the Checked field value if set, zero value otherwise.
func (o *FormFieldRest) GetChecked() bool {
	if o == nil || IsNil(o.Checked) {
		var ret bool
		return ret
	}
	return *o.Checked
}

// GetCheckedOk returns a tuple with the Checked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetCheckedOk() (*bool, bool) {
	if o == nil || IsNil(o.Checked) {
		return nil, false
	}
	return o.Checked, true
}

// HasChecked returns a boolean if a field has been set.
func (o *FormFieldRest) HasChecked() bool {
	if o != nil && !IsNil(o.Checked) {
		return true
	}

	return false
}

// SetChecked gets a reference to the given bool and assigns it to the Checked field.
func (o *FormFieldRest) SetChecked(v bool) {
	o.Checked = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FormFieldRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FormFieldRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FormFieldRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *FormFieldRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *FormFieldRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *FormFieldRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *FormFieldRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *FormFieldRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *FormFieldRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *FormFieldRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFieldRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *FormFieldRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *FormFieldRest) SetStale(v bool) {
	o.Stale = &v
}

func (o FormFieldRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormFieldRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Header) {
		toSerialize["header"] = o.Header
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Maximum) {
		toSerialize["maximum"] = o.Maximum
	}
	if !IsNil(o.Minimum) {
		toSerialize["minimum"] = o.Minimum
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if !IsNil(o.Choices) {
		toSerialize["choices"] = o.Choices
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Warning) {
		toSerialize["warning"] = o.Warning
	}
	if !IsNil(o.Rows) {
		toSerialize["rows"] = o.Rows
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.CurrentValue) {
		toSerialize["currentValue"] = o.CurrentValue
	}
	if !IsNil(o.Validation) {
		toSerialize["validation"] = o.Validation
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.HelpId) {
		toSerialize["helpId"] = o.HelpId
	}
	if !IsNil(o.Optiongroup) {
		toSerialize["optiongroup"] = o.Optiongroup
	}
	if !IsNil(o.Readonly) {
		toSerialize["readonly"] = o.Readonly
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !IsNil(o.Dynamic) {
		toSerialize["dynamic"] = o.Dynamic
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Networktags) {
		toSerialize["networktags"] = o.Networktags
	}
	if !IsNil(o.GetGetchoices) {
		toSerialize["get_getchoices"] = o.GetGetchoices
	}
	if !IsNil(o.GetGetDefault) {
		toSerialize["get_getDefault"] = o.GetGetDefault
	}
	if !IsNil(o.GetDependent) {
		toSerialize["get_dependent"] = o.GetDependent
	}
	if !IsNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	if !IsNil(o.GroupBy) {
		toSerialize["groupBy"] = o.GroupBy
	}
	if !IsNil(o.GroupType) {
		toSerialize["groupType"] = o.GroupType
	}
	if !IsNil(o.Invalid) {
		toSerialize["invalid"] = o.Invalid
	}
	if !IsNil(o.InvalidStr) {
		toSerialize["invalidStr"] = o.InvalidStr
	}
	if !IsNil(o.GetDefault) {
		toSerialize["get_default"] = o.GetDefault
	}
	if !IsNil(o.Checked) {
		toSerialize["checked"] = o.Checked
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableFormFieldRest struct {
	value *FormFieldRest
	isSet bool
}

func (v NullableFormFieldRest) Get() *FormFieldRest {
	return v.value
}

func (v *NullableFormFieldRest) Set(val *FormFieldRest) {
	v.value = val
	v.isSet = true
}

func (v NullableFormFieldRest) IsSet() bool {
	return v.isSet
}

func (v *NullableFormFieldRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormFieldRest(val *FormFieldRest) *NullableFormFieldRest {
	return &NullableFormFieldRest{value: val, isSet: true}
}

func (v NullableFormFieldRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormFieldRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


