/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LogicalGroupRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogicalGroupRest{}

// LogicalGroupRest The logical group that the application belongs to, if it applies.
type LogicalGroupRest struct {
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	Srcid *string `json:"srcid,omitempty"`
	Modifydate *int64 `json:"modifydate,omitempty"`
	Managed *bool `json:"managed,omitempty"`
	Scheduleoff *bool `json:"scheduleoff,omitempty"`
	Sla *SlaRest `json:"sla,omitempty"`
	Cluster *ClusterRest `json:"cluster,omitempty"`
	Membercount *int32 `json:"membercount,omitempty"`
	Orglist []OrganizationRest `json:"orglist,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewLogicalGroupRest instantiates a new LogicalGroupRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalGroupRest() *LogicalGroupRest {
	this := LogicalGroupRest{}
	return &this
}

// NewLogicalGroupRestWithDefaults instantiates a new LogicalGroupRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalGroupRestWithDefaults() *LogicalGroupRest {
	this := LogicalGroupRest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LogicalGroupRest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalGroupRest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LogicalGroupRest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LogicalGroupRest) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LogicalGroupRest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalGroupRest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LogicalGroupRest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LogicalGroupRest) SetName(v string) {
	o.Name = &v
}

// GetSrcid returns the Srcid field value if set, zero value otherwise.
func (o *LogicalGroupRest) GetSrcid() string {
	if o == nil || IsNil(o.Srcid) {
		var ret string
		return ret
	}
	return *o.Srcid
}

// GetSrcidOk returns a tuple with the Srcid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalGroupRest) GetSrcidOk() (*string, bool) {
	if o == nil || IsNil(o.Srcid) {
		return nil, false
	}
	return o.Srcid, true
}

// HasSrcid returns a boolean if a field has been set.
func (o *LogicalGroupRest) HasSrcid() bool {
	if o != nil && !IsNil(o.Srcid) {
		return true
	}

	return false
}

// SetSrcid gets a reference to the given string and assigns it to the Srcid field.
func (o *LogicalGroupRest) SetSrcid(v string) {
	o.Srcid = &v
}

// GetModifydate returns the Modifydate field value if set, zero value otherwise.
func (o *LogicalGroupRest) GetModifydate() int64 {
	if o == nil || IsNil(o.Modifydate) {
		var ret int64
		return ret
	}
	return *o.Modifydate
}

// GetModifydateOk returns a tuple with the Modifydate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalGroupRest) GetModifydateOk() (*int64, bool) {
	if o == nil || IsNil(o.Modifydate) {
		return nil, false
	}
	return o.Modifydate, true
}

// HasModifydate returns a boolean if a field has been set.
func (o *LogicalGroupRest) HasModifydate() bool {
	if o != nil && !IsNil(o.Modifydate) {
		return true
	}

	return false
}

// SetModifydate gets a reference to the given int64 and assigns it to the Modifydate field.
func (o *LogicalGroupRest) SetModifydate(v int64) {
	o.Modifydate = &v
}

// GetManaged returns the Managed field value if set, zero value otherwise.
func (o *LogicalGroupRest) GetManaged() bool {
	if o == nil || IsNil(o.Managed) {
		var ret bool
		return ret
	}
	return *o.Managed
}

// GetManagedOk returns a tuple with the Managed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalGroupRest) GetManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Managed) {
		return nil, false
	}
	return o.Managed, true
}

// HasManaged returns a boolean if a field has been set.
func (o *LogicalGroupRest) HasManaged() bool {
	if o != nil && !IsNil(o.Managed) {
		return true
	}

	return false
}

// SetManaged gets a reference to the given bool and assigns it to the Managed field.
func (o *LogicalGroupRest) SetManaged(v bool) {
	o.Managed = &v
}

// GetScheduleoff returns the Scheduleoff field value if set, zero value otherwise.
func (o *LogicalGroupRest) GetScheduleoff() bool {
	if o == nil || IsNil(o.Scheduleoff) {
		var ret bool
		return ret
	}
	return *o.Scheduleoff
}

// GetScheduleoffOk returns a tuple with the Scheduleoff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalGroupRest) GetScheduleoffOk() (*bool, bool) {
	if o == nil || IsNil(o.Scheduleoff) {
		return nil, false
	}
	return o.Scheduleoff, true
}

// HasScheduleoff returns a boolean if a field has been set.
func (o *LogicalGroupRest) HasScheduleoff() bool {
	if o != nil && !IsNil(o.Scheduleoff) {
		return true
	}

	return false
}

// SetScheduleoff gets a reference to the given bool and assigns it to the Scheduleoff field.
func (o *LogicalGroupRest) SetScheduleoff(v bool) {
	o.Scheduleoff = &v
}

// GetSla returns the Sla field value if set, zero value otherwise.
func (o *LogicalGroupRest) GetSla() SlaRest {
	if o == nil || IsNil(o.Sla) {
		var ret SlaRest
		return ret
	}
	return *o.Sla
}

// GetSlaOk returns a tuple with the Sla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalGroupRest) GetSlaOk() (*SlaRest, bool) {
	if o == nil || IsNil(o.Sla) {
		return nil, false
	}
	return o.Sla, true
}

// HasSla returns a boolean if a field has been set.
func (o *LogicalGroupRest) HasSla() bool {
	if o != nil && !IsNil(o.Sla) {
		return true
	}

	return false
}

// SetSla gets a reference to the given SlaRest and assigns it to the Sla field.
func (o *LogicalGroupRest) SetSla(v SlaRest) {
	o.Sla = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *LogicalGroupRest) GetCluster() ClusterRest {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterRest
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalGroupRest) GetClusterOk() (*ClusterRest, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *LogicalGroupRest) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterRest and assigns it to the Cluster field.
func (o *LogicalGroupRest) SetCluster(v ClusterRest) {
	o.Cluster = &v
}

// GetMembercount returns the Membercount field value if set, zero value otherwise.
func (o *LogicalGroupRest) GetMembercount() int32 {
	if o == nil || IsNil(o.Membercount) {
		var ret int32
		return ret
	}
	return *o.Membercount
}

// GetMembercountOk returns a tuple with the Membercount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalGroupRest) GetMembercountOk() (*int32, bool) {
	if o == nil || IsNil(o.Membercount) {
		return nil, false
	}
	return o.Membercount, true
}

// HasMembercount returns a boolean if a field has been set.
func (o *LogicalGroupRest) HasMembercount() bool {
	if o != nil && !IsNil(o.Membercount) {
		return true
	}

	return false
}

// SetMembercount gets a reference to the given int32 and assigns it to the Membercount field.
func (o *LogicalGroupRest) SetMembercount(v int32) {
	o.Membercount = &v
}

// GetOrglist returns the Orglist field value if set, zero value otherwise.
func (o *LogicalGroupRest) GetOrglist() []OrganizationRest {
	if o == nil || IsNil(o.Orglist) {
		var ret []OrganizationRest
		return ret
	}
	return o.Orglist
}

// GetOrglistOk returns a tuple with the Orglist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalGroupRest) GetOrglistOk() ([]OrganizationRest, bool) {
	if o == nil || IsNil(o.Orglist) {
		return nil, false
	}
	return o.Orglist, true
}

// HasOrglist returns a boolean if a field has been set.
func (o *LogicalGroupRest) HasOrglist() bool {
	if o != nil && !IsNil(o.Orglist) {
		return true
	}

	return false
}

// SetOrglist gets a reference to the given []OrganizationRest and assigns it to the Orglist field.
func (o *LogicalGroupRest) SetOrglist(v []OrganizationRest) {
	o.Orglist = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LogicalGroupRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalGroupRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LogicalGroupRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LogicalGroupRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *LogicalGroupRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalGroupRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *LogicalGroupRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *LogicalGroupRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *LogicalGroupRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalGroupRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *LogicalGroupRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *LogicalGroupRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *LogicalGroupRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalGroupRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *LogicalGroupRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *LogicalGroupRest) SetStale(v bool) {
	o.Stale = &v
}

func (o LogicalGroupRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogicalGroupRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Srcid) {
		toSerialize["srcid"] = o.Srcid
	}
	if !IsNil(o.Modifydate) {
		toSerialize["modifydate"] = o.Modifydate
	}
	if !IsNil(o.Managed) {
		toSerialize["managed"] = o.Managed
	}
	if !IsNil(o.Scheduleoff) {
		toSerialize["scheduleoff"] = o.Scheduleoff
	}
	if !IsNil(o.Sla) {
		toSerialize["sla"] = o.Sla
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Membercount) {
		toSerialize["membercount"] = o.Membercount
	}
	if !IsNil(o.Orglist) {
		toSerialize["orglist"] = o.Orglist
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableLogicalGroupRest struct {
	value *LogicalGroupRest
	isSet bool
}

func (v NullableLogicalGroupRest) Get() *LogicalGroupRest {
	return v.value
}

func (v *NullableLogicalGroupRest) Set(val *LogicalGroupRest) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalGroupRest) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalGroupRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalGroupRest(val *LogicalGroupRest) *NullableLogicalGroupRest {
	return &NullableLogicalGroupRest{value: val, isSet: true}
}

func (v NullableLogicalGroupRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalGroupRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


