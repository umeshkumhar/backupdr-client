/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DiskPoolRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskPoolRest{}

// DiskPoolRest struct for DiskPoolRest
type DiskPoolRest struct {
	Usedefaultsa *bool `json:"usedefaultsa,omitempty"`
	Immutable *bool `json:"immutable,omitempty"`
	Metadataonly *bool `json:"metadataonly,omitempty"`
	Location *string `json:"location,omitempty"`
	Array *ArrayRest `json:"array,omitempty"`
	Name *string `json:"name,omitempty"`
	Properties []KeyValueRest `json:"properties,omitempty"`
	State *string `json:"state,omitempty"`
	Type *string `json:"type,omitempty"`
	Srcid *string `json:"srcid,omitempty"`
	Modifydate *int64 `json:"modifydate,omitempty"`
	Cluster *ClusterRest `json:"cluster,omitempty"`
	Status *string `json:"status,omitempty"`
	Mdiskgrp *string `json:"mdiskgrp,omitempty"`
	Warnpct *int32 `json:"warnpct,omitempty"`
	Safepct *int32 `json:"safepct,omitempty"`
	Udsuid *int32 `json:"udsuid,omitempty"`
	Orglist []OrganizationRest `json:"orglist,omitempty"`
	Storage []string `json:"storage,omitempty"`
	FreeMb *int64 `json:"free_mb,omitempty"`
	UsageMb *int64 `json:"usage_mb,omitempty"`
	CapacityMb *int64 `json:"capacity_mb,omitempty"`
	Pct *float64 `json:"pct,omitempty"`
	Pooltypedisplayname *string `json:"pooltypedisplayname,omitempty"`
	Vaultprops *VaultPropsRest `json:"vaultprops,omitempty"`
	Ext *int32 `json:"ext,omitempty"`
	Pooltype *string `json:"pooltype,omitempty"`
	Cloudcredential *CloudCredentialRest `json:"cloudcredential,omitempty"`
	Nocache *bool `json:"nocache,omitempty"`
	Grainsize *int32 `json:"grainsize,omitempty"`
	Copies []DiskPoolCopiesRest `json:"copies,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewDiskPoolRest instantiates a new DiskPoolRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskPoolRest() *DiskPoolRest {
	this := DiskPoolRest{}
	return &this
}

// NewDiskPoolRestWithDefaults instantiates a new DiskPoolRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskPoolRestWithDefaults() *DiskPoolRest {
	this := DiskPoolRest{}
	return &this
}

// GetUsedefaultsa returns the Usedefaultsa field value if set, zero value otherwise.
func (o *DiskPoolRest) GetUsedefaultsa() bool {
	if o == nil || IsNil(o.Usedefaultsa) {
		var ret bool
		return ret
	}
	return *o.Usedefaultsa
}

// GetUsedefaultsaOk returns a tuple with the Usedefaultsa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetUsedefaultsaOk() (*bool, bool) {
	if o == nil || IsNil(o.Usedefaultsa) {
		return nil, false
	}
	return o.Usedefaultsa, true
}

// HasUsedefaultsa returns a boolean if a field has been set.
func (o *DiskPoolRest) HasUsedefaultsa() bool {
	if o != nil && !IsNil(o.Usedefaultsa) {
		return true
	}

	return false
}

// SetUsedefaultsa gets a reference to the given bool and assigns it to the Usedefaultsa field.
func (o *DiskPoolRest) SetUsedefaultsa(v bool) {
	o.Usedefaultsa = &v
}

// GetImmutable returns the Immutable field value if set, zero value otherwise.
func (o *DiskPoolRest) GetImmutable() bool {
	if o == nil || IsNil(o.Immutable) {
		var ret bool
		return ret
	}
	return *o.Immutable
}

// GetImmutableOk returns a tuple with the Immutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetImmutableOk() (*bool, bool) {
	if o == nil || IsNil(o.Immutable) {
		return nil, false
	}
	return o.Immutable, true
}

// HasImmutable returns a boolean if a field has been set.
func (o *DiskPoolRest) HasImmutable() bool {
	if o != nil && !IsNil(o.Immutable) {
		return true
	}

	return false
}

// SetImmutable gets a reference to the given bool and assigns it to the Immutable field.
func (o *DiskPoolRest) SetImmutable(v bool) {
	o.Immutable = &v
}

// GetMetadataonly returns the Metadataonly field value if set, zero value otherwise.
func (o *DiskPoolRest) GetMetadataonly() bool {
	if o == nil || IsNil(o.Metadataonly) {
		var ret bool
		return ret
	}
	return *o.Metadataonly
}

// GetMetadataonlyOk returns a tuple with the Metadataonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetMetadataonlyOk() (*bool, bool) {
	if o == nil || IsNil(o.Metadataonly) {
		return nil, false
	}
	return o.Metadataonly, true
}

// HasMetadataonly returns a boolean if a field has been set.
func (o *DiskPoolRest) HasMetadataonly() bool {
	if o != nil && !IsNil(o.Metadataonly) {
		return true
	}

	return false
}

// SetMetadataonly gets a reference to the given bool and assigns it to the Metadataonly field.
func (o *DiskPoolRest) SetMetadataonly(v bool) {
	o.Metadataonly = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *DiskPoolRest) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *DiskPoolRest) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *DiskPoolRest) SetLocation(v string) {
	o.Location = &v
}

// GetArray returns the Array field value if set, zero value otherwise.
func (o *DiskPoolRest) GetArray() ArrayRest {
	if o == nil || IsNil(o.Array) {
		var ret ArrayRest
		return ret
	}
	return *o.Array
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetArrayOk() (*ArrayRest, bool) {
	if o == nil || IsNil(o.Array) {
		return nil, false
	}
	return o.Array, true
}

// HasArray returns a boolean if a field has been set.
func (o *DiskPoolRest) HasArray() bool {
	if o != nil && !IsNil(o.Array) {
		return true
	}

	return false
}

// SetArray gets a reference to the given ArrayRest and assigns it to the Array field.
func (o *DiskPoolRest) SetArray(v ArrayRest) {
	o.Array = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DiskPoolRest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DiskPoolRest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DiskPoolRest) SetName(v string) {
	o.Name = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *DiskPoolRest) GetProperties() []KeyValueRest {
	if o == nil || IsNil(o.Properties) {
		var ret []KeyValueRest
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetPropertiesOk() ([]KeyValueRest, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *DiskPoolRest) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []KeyValueRest and assigns it to the Properties field.
func (o *DiskPoolRest) SetProperties(v []KeyValueRest) {
	o.Properties = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *DiskPoolRest) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *DiskPoolRest) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *DiskPoolRest) SetState(v string) {
	o.State = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DiskPoolRest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DiskPoolRest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DiskPoolRest) SetType(v string) {
	o.Type = &v
}

// GetSrcid returns the Srcid field value if set, zero value otherwise.
func (o *DiskPoolRest) GetSrcid() string {
	if o == nil || IsNil(o.Srcid) {
		var ret string
		return ret
	}
	return *o.Srcid
}

// GetSrcidOk returns a tuple with the Srcid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetSrcidOk() (*string, bool) {
	if o == nil || IsNil(o.Srcid) {
		return nil, false
	}
	return o.Srcid, true
}

// HasSrcid returns a boolean if a field has been set.
func (o *DiskPoolRest) HasSrcid() bool {
	if o != nil && !IsNil(o.Srcid) {
		return true
	}

	return false
}

// SetSrcid gets a reference to the given string and assigns it to the Srcid field.
func (o *DiskPoolRest) SetSrcid(v string) {
	o.Srcid = &v
}

// GetModifydate returns the Modifydate field value if set, zero value otherwise.
func (o *DiskPoolRest) GetModifydate() int64 {
	if o == nil || IsNil(o.Modifydate) {
		var ret int64
		return ret
	}
	return *o.Modifydate
}

// GetModifydateOk returns a tuple with the Modifydate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetModifydateOk() (*int64, bool) {
	if o == nil || IsNil(o.Modifydate) {
		return nil, false
	}
	return o.Modifydate, true
}

// HasModifydate returns a boolean if a field has been set.
func (o *DiskPoolRest) HasModifydate() bool {
	if o != nil && !IsNil(o.Modifydate) {
		return true
	}

	return false
}

// SetModifydate gets a reference to the given int64 and assigns it to the Modifydate field.
func (o *DiskPoolRest) SetModifydate(v int64) {
	o.Modifydate = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DiskPoolRest) GetCluster() ClusterRest {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterRest
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetClusterOk() (*ClusterRest, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DiskPoolRest) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterRest and assigns it to the Cluster field.
func (o *DiskPoolRest) SetCluster(v ClusterRest) {
	o.Cluster = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DiskPoolRest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DiskPoolRest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DiskPoolRest) SetStatus(v string) {
	o.Status = &v
}

// GetMdiskgrp returns the Mdiskgrp field value if set, zero value otherwise.
func (o *DiskPoolRest) GetMdiskgrp() string {
	if o == nil || IsNil(o.Mdiskgrp) {
		var ret string
		return ret
	}
	return *o.Mdiskgrp
}

// GetMdiskgrpOk returns a tuple with the Mdiskgrp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetMdiskgrpOk() (*string, bool) {
	if o == nil || IsNil(o.Mdiskgrp) {
		return nil, false
	}
	return o.Mdiskgrp, true
}

// HasMdiskgrp returns a boolean if a field has been set.
func (o *DiskPoolRest) HasMdiskgrp() bool {
	if o != nil && !IsNil(o.Mdiskgrp) {
		return true
	}

	return false
}

// SetMdiskgrp gets a reference to the given string and assigns it to the Mdiskgrp field.
func (o *DiskPoolRest) SetMdiskgrp(v string) {
	o.Mdiskgrp = &v
}

// GetWarnpct returns the Warnpct field value if set, zero value otherwise.
func (o *DiskPoolRest) GetWarnpct() int32 {
	if o == nil || IsNil(o.Warnpct) {
		var ret int32
		return ret
	}
	return *o.Warnpct
}

// GetWarnpctOk returns a tuple with the Warnpct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetWarnpctOk() (*int32, bool) {
	if o == nil || IsNil(o.Warnpct) {
		return nil, false
	}
	return o.Warnpct, true
}

// HasWarnpct returns a boolean if a field has been set.
func (o *DiskPoolRest) HasWarnpct() bool {
	if o != nil && !IsNil(o.Warnpct) {
		return true
	}

	return false
}

// SetWarnpct gets a reference to the given int32 and assigns it to the Warnpct field.
func (o *DiskPoolRest) SetWarnpct(v int32) {
	o.Warnpct = &v
}

// GetSafepct returns the Safepct field value if set, zero value otherwise.
func (o *DiskPoolRest) GetSafepct() int32 {
	if o == nil || IsNil(o.Safepct) {
		var ret int32
		return ret
	}
	return *o.Safepct
}

// GetSafepctOk returns a tuple with the Safepct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetSafepctOk() (*int32, bool) {
	if o == nil || IsNil(o.Safepct) {
		return nil, false
	}
	return o.Safepct, true
}

// HasSafepct returns a boolean if a field has been set.
func (o *DiskPoolRest) HasSafepct() bool {
	if o != nil && !IsNil(o.Safepct) {
		return true
	}

	return false
}

// SetSafepct gets a reference to the given int32 and assigns it to the Safepct field.
func (o *DiskPoolRest) SetSafepct(v int32) {
	o.Safepct = &v
}

// GetUdsuid returns the Udsuid field value if set, zero value otherwise.
func (o *DiskPoolRest) GetUdsuid() int32 {
	if o == nil || IsNil(o.Udsuid) {
		var ret int32
		return ret
	}
	return *o.Udsuid
}

// GetUdsuidOk returns a tuple with the Udsuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetUdsuidOk() (*int32, bool) {
	if o == nil || IsNil(o.Udsuid) {
		return nil, false
	}
	return o.Udsuid, true
}

// HasUdsuid returns a boolean if a field has been set.
func (o *DiskPoolRest) HasUdsuid() bool {
	if o != nil && !IsNil(o.Udsuid) {
		return true
	}

	return false
}

// SetUdsuid gets a reference to the given int32 and assigns it to the Udsuid field.
func (o *DiskPoolRest) SetUdsuid(v int32) {
	o.Udsuid = &v
}

// GetOrglist returns the Orglist field value if set, zero value otherwise.
func (o *DiskPoolRest) GetOrglist() []OrganizationRest {
	if o == nil || IsNil(o.Orglist) {
		var ret []OrganizationRest
		return ret
	}
	return o.Orglist
}

// GetOrglistOk returns a tuple with the Orglist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetOrglistOk() ([]OrganizationRest, bool) {
	if o == nil || IsNil(o.Orglist) {
		return nil, false
	}
	return o.Orglist, true
}

// HasOrglist returns a boolean if a field has been set.
func (o *DiskPoolRest) HasOrglist() bool {
	if o != nil && !IsNil(o.Orglist) {
		return true
	}

	return false
}

// SetOrglist gets a reference to the given []OrganizationRest and assigns it to the Orglist field.
func (o *DiskPoolRest) SetOrglist(v []OrganizationRest) {
	o.Orglist = v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *DiskPoolRest) GetStorage() []string {
	if o == nil || IsNil(o.Storage) {
		var ret []string
		return ret
	}
	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetStorageOk() ([]string, bool) {
	if o == nil || IsNil(o.Storage) {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *DiskPoolRest) HasStorage() bool {
	if o != nil && !IsNil(o.Storage) {
		return true
	}

	return false
}

// SetStorage gets a reference to the given []string and assigns it to the Storage field.
func (o *DiskPoolRest) SetStorage(v []string) {
	o.Storage = v
}

// GetFreeMb returns the FreeMb field value if set, zero value otherwise.
func (o *DiskPoolRest) GetFreeMb() int64 {
	if o == nil || IsNil(o.FreeMb) {
		var ret int64
		return ret
	}
	return *o.FreeMb
}

// GetFreeMbOk returns a tuple with the FreeMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetFreeMbOk() (*int64, bool) {
	if o == nil || IsNil(o.FreeMb) {
		return nil, false
	}
	return o.FreeMb, true
}

// HasFreeMb returns a boolean if a field has been set.
func (o *DiskPoolRest) HasFreeMb() bool {
	if o != nil && !IsNil(o.FreeMb) {
		return true
	}

	return false
}

// SetFreeMb gets a reference to the given int64 and assigns it to the FreeMb field.
func (o *DiskPoolRest) SetFreeMb(v int64) {
	o.FreeMb = &v
}

// GetUsageMb returns the UsageMb field value if set, zero value otherwise.
func (o *DiskPoolRest) GetUsageMb() int64 {
	if o == nil || IsNil(o.UsageMb) {
		var ret int64
		return ret
	}
	return *o.UsageMb
}

// GetUsageMbOk returns a tuple with the UsageMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetUsageMbOk() (*int64, bool) {
	if o == nil || IsNil(o.UsageMb) {
		return nil, false
	}
	return o.UsageMb, true
}

// HasUsageMb returns a boolean if a field has been set.
func (o *DiskPoolRest) HasUsageMb() bool {
	if o != nil && !IsNil(o.UsageMb) {
		return true
	}

	return false
}

// SetUsageMb gets a reference to the given int64 and assigns it to the UsageMb field.
func (o *DiskPoolRest) SetUsageMb(v int64) {
	o.UsageMb = &v
}

// GetCapacityMb returns the CapacityMb field value if set, zero value otherwise.
func (o *DiskPoolRest) GetCapacityMb() int64 {
	if o == nil || IsNil(o.CapacityMb) {
		var ret int64
		return ret
	}
	return *o.CapacityMb
}

// GetCapacityMbOk returns a tuple with the CapacityMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetCapacityMbOk() (*int64, bool) {
	if o == nil || IsNil(o.CapacityMb) {
		return nil, false
	}
	return o.CapacityMb, true
}

// HasCapacityMb returns a boolean if a field has been set.
func (o *DiskPoolRest) HasCapacityMb() bool {
	if o != nil && !IsNil(o.CapacityMb) {
		return true
	}

	return false
}

// SetCapacityMb gets a reference to the given int64 and assigns it to the CapacityMb field.
func (o *DiskPoolRest) SetCapacityMb(v int64) {
	o.CapacityMb = &v
}

// GetPct returns the Pct field value if set, zero value otherwise.
func (o *DiskPoolRest) GetPct() float64 {
	if o == nil || IsNil(o.Pct) {
		var ret float64
		return ret
	}
	return *o.Pct
}

// GetPctOk returns a tuple with the Pct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetPctOk() (*float64, bool) {
	if o == nil || IsNil(o.Pct) {
		return nil, false
	}
	return o.Pct, true
}

// HasPct returns a boolean if a field has been set.
func (o *DiskPoolRest) HasPct() bool {
	if o != nil && !IsNil(o.Pct) {
		return true
	}

	return false
}

// SetPct gets a reference to the given float64 and assigns it to the Pct field.
func (o *DiskPoolRest) SetPct(v float64) {
	o.Pct = &v
}

// GetPooltypedisplayname returns the Pooltypedisplayname field value if set, zero value otherwise.
func (o *DiskPoolRest) GetPooltypedisplayname() string {
	if o == nil || IsNil(o.Pooltypedisplayname) {
		var ret string
		return ret
	}
	return *o.Pooltypedisplayname
}

// GetPooltypedisplaynameOk returns a tuple with the Pooltypedisplayname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetPooltypedisplaynameOk() (*string, bool) {
	if o == nil || IsNil(o.Pooltypedisplayname) {
		return nil, false
	}
	return o.Pooltypedisplayname, true
}

// HasPooltypedisplayname returns a boolean if a field has been set.
func (o *DiskPoolRest) HasPooltypedisplayname() bool {
	if o != nil && !IsNil(o.Pooltypedisplayname) {
		return true
	}

	return false
}

// SetPooltypedisplayname gets a reference to the given string and assigns it to the Pooltypedisplayname field.
func (o *DiskPoolRest) SetPooltypedisplayname(v string) {
	o.Pooltypedisplayname = &v
}

// GetVaultprops returns the Vaultprops field value if set, zero value otherwise.
func (o *DiskPoolRest) GetVaultprops() VaultPropsRest {
	if o == nil || IsNil(o.Vaultprops) {
		var ret VaultPropsRest
		return ret
	}
	return *o.Vaultprops
}

// GetVaultpropsOk returns a tuple with the Vaultprops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetVaultpropsOk() (*VaultPropsRest, bool) {
	if o == nil || IsNil(o.Vaultprops) {
		return nil, false
	}
	return o.Vaultprops, true
}

// HasVaultprops returns a boolean if a field has been set.
func (o *DiskPoolRest) HasVaultprops() bool {
	if o != nil && !IsNil(o.Vaultprops) {
		return true
	}

	return false
}

// SetVaultprops gets a reference to the given VaultPropsRest and assigns it to the Vaultprops field.
func (o *DiskPoolRest) SetVaultprops(v VaultPropsRest) {
	o.Vaultprops = &v
}

// GetExt returns the Ext field value if set, zero value otherwise.
func (o *DiskPoolRest) GetExt() int32 {
	if o == nil || IsNil(o.Ext) {
		var ret int32
		return ret
	}
	return *o.Ext
}

// GetExtOk returns a tuple with the Ext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetExtOk() (*int32, bool) {
	if o == nil || IsNil(o.Ext) {
		return nil, false
	}
	return o.Ext, true
}

// HasExt returns a boolean if a field has been set.
func (o *DiskPoolRest) HasExt() bool {
	if o != nil && !IsNil(o.Ext) {
		return true
	}

	return false
}

// SetExt gets a reference to the given int32 and assigns it to the Ext field.
func (o *DiskPoolRest) SetExt(v int32) {
	o.Ext = &v
}

// GetPooltype returns the Pooltype field value if set, zero value otherwise.
func (o *DiskPoolRest) GetPooltype() string {
	if o == nil || IsNil(o.Pooltype) {
		var ret string
		return ret
	}
	return *o.Pooltype
}

// GetPooltypeOk returns a tuple with the Pooltype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetPooltypeOk() (*string, bool) {
	if o == nil || IsNil(o.Pooltype) {
		return nil, false
	}
	return o.Pooltype, true
}

// HasPooltype returns a boolean if a field has been set.
func (o *DiskPoolRest) HasPooltype() bool {
	if o != nil && !IsNil(o.Pooltype) {
		return true
	}

	return false
}

// SetPooltype gets a reference to the given string and assigns it to the Pooltype field.
func (o *DiskPoolRest) SetPooltype(v string) {
	o.Pooltype = &v
}

// GetCloudcredential returns the Cloudcredential field value if set, zero value otherwise.
func (o *DiskPoolRest) GetCloudcredential() CloudCredentialRest {
	if o == nil || IsNil(o.Cloudcredential) {
		var ret CloudCredentialRest
		return ret
	}
	return *o.Cloudcredential
}

// GetCloudcredentialOk returns a tuple with the Cloudcredential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetCloudcredentialOk() (*CloudCredentialRest, bool) {
	if o == nil || IsNil(o.Cloudcredential) {
		return nil, false
	}
	return o.Cloudcredential, true
}

// HasCloudcredential returns a boolean if a field has been set.
func (o *DiskPoolRest) HasCloudcredential() bool {
	if o != nil && !IsNil(o.Cloudcredential) {
		return true
	}

	return false
}

// SetCloudcredential gets a reference to the given CloudCredentialRest and assigns it to the Cloudcredential field.
func (o *DiskPoolRest) SetCloudcredential(v CloudCredentialRest) {
	o.Cloudcredential = &v
}

// GetNocache returns the Nocache field value if set, zero value otherwise.
func (o *DiskPoolRest) GetNocache() bool {
	if o == nil || IsNil(o.Nocache) {
		var ret bool
		return ret
	}
	return *o.Nocache
}

// GetNocacheOk returns a tuple with the Nocache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetNocacheOk() (*bool, bool) {
	if o == nil || IsNil(o.Nocache) {
		return nil, false
	}
	return o.Nocache, true
}

// HasNocache returns a boolean if a field has been set.
func (o *DiskPoolRest) HasNocache() bool {
	if o != nil && !IsNil(o.Nocache) {
		return true
	}

	return false
}

// SetNocache gets a reference to the given bool and assigns it to the Nocache field.
func (o *DiskPoolRest) SetNocache(v bool) {
	o.Nocache = &v
}

// GetGrainsize returns the Grainsize field value if set, zero value otherwise.
func (o *DiskPoolRest) GetGrainsize() int32 {
	if o == nil || IsNil(o.Grainsize) {
		var ret int32
		return ret
	}
	return *o.Grainsize
}

// GetGrainsizeOk returns a tuple with the Grainsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetGrainsizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Grainsize) {
		return nil, false
	}
	return o.Grainsize, true
}

// HasGrainsize returns a boolean if a field has been set.
func (o *DiskPoolRest) HasGrainsize() bool {
	if o != nil && !IsNil(o.Grainsize) {
		return true
	}

	return false
}

// SetGrainsize gets a reference to the given int32 and assigns it to the Grainsize field.
func (o *DiskPoolRest) SetGrainsize(v int32) {
	o.Grainsize = &v
}

// GetCopies returns the Copies field value if set, zero value otherwise.
func (o *DiskPoolRest) GetCopies() []DiskPoolCopiesRest {
	if o == nil || IsNil(o.Copies) {
		var ret []DiskPoolCopiesRest
		return ret
	}
	return o.Copies
}

// GetCopiesOk returns a tuple with the Copies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetCopiesOk() ([]DiskPoolCopiesRest, bool) {
	if o == nil || IsNil(o.Copies) {
		return nil, false
	}
	return o.Copies, true
}

// HasCopies returns a boolean if a field has been set.
func (o *DiskPoolRest) HasCopies() bool {
	if o != nil && !IsNil(o.Copies) {
		return true
	}

	return false
}

// SetCopies gets a reference to the given []DiskPoolCopiesRest and assigns it to the Copies field.
func (o *DiskPoolRest) SetCopies(v []DiskPoolCopiesRest) {
	o.Copies = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DiskPoolRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DiskPoolRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DiskPoolRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *DiskPoolRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *DiskPoolRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *DiskPoolRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *DiskPoolRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *DiskPoolRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *DiskPoolRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *DiskPoolRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPoolRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *DiskPoolRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *DiskPoolRest) SetStale(v bool) {
	o.Stale = &v
}

func (o DiskPoolRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskPoolRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Usedefaultsa) {
		toSerialize["usedefaultsa"] = o.Usedefaultsa
	}
	if !IsNil(o.Immutable) {
		toSerialize["immutable"] = o.Immutable
	}
	if !IsNil(o.Metadataonly) {
		toSerialize["metadataonly"] = o.Metadataonly
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Array) {
		toSerialize["array"] = o.Array
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Srcid) {
		toSerialize["srcid"] = o.Srcid
	}
	if !IsNil(o.Modifydate) {
		toSerialize["modifydate"] = o.Modifydate
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Mdiskgrp) {
		toSerialize["mdiskgrp"] = o.Mdiskgrp
	}
	if !IsNil(o.Warnpct) {
		toSerialize["warnpct"] = o.Warnpct
	}
	if !IsNil(o.Safepct) {
		toSerialize["safepct"] = o.Safepct
	}
	if !IsNil(o.Udsuid) {
		toSerialize["udsuid"] = o.Udsuid
	}
	if !IsNil(o.Orglist) {
		toSerialize["orglist"] = o.Orglist
	}
	if !IsNil(o.Storage) {
		toSerialize["storage"] = o.Storage
	}
	if !IsNil(o.FreeMb) {
		toSerialize["free_mb"] = o.FreeMb
	}
	if !IsNil(o.UsageMb) {
		toSerialize["usage_mb"] = o.UsageMb
	}
	if !IsNil(o.CapacityMb) {
		toSerialize["capacity_mb"] = o.CapacityMb
	}
	if !IsNil(o.Pct) {
		toSerialize["pct"] = o.Pct
	}
	if !IsNil(o.Pooltypedisplayname) {
		toSerialize["pooltypedisplayname"] = o.Pooltypedisplayname
	}
	if !IsNil(o.Vaultprops) {
		toSerialize["vaultprops"] = o.Vaultprops
	}
	if !IsNil(o.Ext) {
		toSerialize["ext"] = o.Ext
	}
	if !IsNil(o.Pooltype) {
		toSerialize["pooltype"] = o.Pooltype
	}
	if !IsNil(o.Cloudcredential) {
		toSerialize["cloudcredential"] = o.Cloudcredential
	}
	if !IsNil(o.Nocache) {
		toSerialize["nocache"] = o.Nocache
	}
	if !IsNil(o.Grainsize) {
		toSerialize["grainsize"] = o.Grainsize
	}
	if !IsNil(o.Copies) {
		toSerialize["copies"] = o.Copies
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableDiskPoolRest struct {
	value *DiskPoolRest
	isSet bool
}

func (v NullableDiskPoolRest) Get() *DiskPoolRest {
	return v.value
}

func (v *NullableDiskPoolRest) Set(val *DiskPoolRest) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskPoolRest) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskPoolRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskPoolRest(val *DiskPoolRest) *NullableDiskPoolRest {
	return &NullableDiskPoolRest{value: val, isSet: true}
}

func (v NullableDiskPoolRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskPoolRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


