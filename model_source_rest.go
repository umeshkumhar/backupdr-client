/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SourceRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceRest{}

// SourceRest struct for SourceRest
type SourceRest struct {
	Slps []SlpRest `json:"slps,omitempty"`
	Host *HostRest `json:"host,omitempty"`
	Srcid *string `json:"srcid,omitempty"`
	Clusterid *string `json:"clusterid,omitempty"`
}

// NewSourceRest instantiates a new SourceRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceRest() *SourceRest {
	this := SourceRest{}
	return &this
}

// NewSourceRestWithDefaults instantiates a new SourceRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceRestWithDefaults() *SourceRest {
	this := SourceRest{}
	return &this
}

// GetSlps returns the Slps field value if set, zero value otherwise.
func (o *SourceRest) GetSlps() []SlpRest {
	if o == nil || IsNil(o.Slps) {
		var ret []SlpRest
		return ret
	}
	return o.Slps
}

// GetSlpsOk returns a tuple with the Slps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRest) GetSlpsOk() ([]SlpRest, bool) {
	if o == nil || IsNil(o.Slps) {
		return nil, false
	}
	return o.Slps, true
}

// HasSlps returns a boolean if a field has been set.
func (o *SourceRest) HasSlps() bool {
	if o != nil && !IsNil(o.Slps) {
		return true
	}

	return false
}

// SetSlps gets a reference to the given []SlpRest and assigns it to the Slps field.
func (o *SourceRest) SetSlps(v []SlpRest) {
	o.Slps = v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *SourceRest) GetHost() HostRest {
	if o == nil || IsNil(o.Host) {
		var ret HostRest
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRest) GetHostOk() (*HostRest, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *SourceRest) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given HostRest and assigns it to the Host field.
func (o *SourceRest) SetHost(v HostRest) {
	o.Host = &v
}

// GetSrcid returns the Srcid field value if set, zero value otherwise.
func (o *SourceRest) GetSrcid() string {
	if o == nil || IsNil(o.Srcid) {
		var ret string
		return ret
	}
	return *o.Srcid
}

// GetSrcidOk returns a tuple with the Srcid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRest) GetSrcidOk() (*string, bool) {
	if o == nil || IsNil(o.Srcid) {
		return nil, false
	}
	return o.Srcid, true
}

// HasSrcid returns a boolean if a field has been set.
func (o *SourceRest) HasSrcid() bool {
	if o != nil && !IsNil(o.Srcid) {
		return true
	}

	return false
}

// SetSrcid gets a reference to the given string and assigns it to the Srcid field.
func (o *SourceRest) SetSrcid(v string) {
	o.Srcid = &v
}

// GetClusterid returns the Clusterid field value if set, zero value otherwise.
func (o *SourceRest) GetClusterid() string {
	if o == nil || IsNil(o.Clusterid) {
		var ret string
		return ret
	}
	return *o.Clusterid
}

// GetClusteridOk returns a tuple with the Clusterid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRest) GetClusteridOk() (*string, bool) {
	if o == nil || IsNil(o.Clusterid) {
		return nil, false
	}
	return o.Clusterid, true
}

// HasClusterid returns a boolean if a field has been set.
func (o *SourceRest) HasClusterid() bool {
	if o != nil && !IsNil(o.Clusterid) {
		return true
	}

	return false
}

// SetClusterid gets a reference to the given string and assigns it to the Clusterid field.
func (o *SourceRest) SetClusterid(v string) {
	o.Clusterid = &v
}

func (o SourceRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Slps) {
		toSerialize["slps"] = o.Slps
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Srcid) {
		toSerialize["srcid"] = o.Srcid
	}
	if !IsNil(o.Clusterid) {
		toSerialize["clusterid"] = o.Clusterid
	}
	return toSerialize, nil
}

type NullableSourceRest struct {
	value *SourceRest
	isSet bool
}

func (v NullableSourceRest) Get() *SourceRest {
	return v.value
}

func (v *NullableSourceRest) Set(val *SourceRest) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceRest) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceRest(val *SourceRest) *NullableSourceRest {
	return &NullableSourceRest{value: val, isSet: true}
}

func (v NullableSourceRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


