/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SessionRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionRest{}

// SessionRest This object represent a valid login session
type SessionRest struct {
	// region
	Region *string `json:"region,omitempty"`
	Username *string `json:"username,omitempty"`
	// User's timezone, if set.
	Timezone *string `json:"timezone,omitempty"`
	// This object contains user preferences that client programs can utilize. The content is opaque to API service.
	Userpref *string `json:"userpref,omitempty"`
	User *UserRest `json:"user,omitempty"`
	// Session id of the current login
	SessionId *string `json:"session_id,omitempty"`
	// Effective access rights that this login session contains.
	Rights []RightRest `json:"rights,omitempty"`
	Authconfig *AuthConfigRest `json:"authconfig,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewSessionRest instantiates a new SessionRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionRest() *SessionRest {
	this := SessionRest{}
	return &this
}

// NewSessionRestWithDefaults instantiates a new SessionRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionRestWithDefaults() *SessionRest {
	this := SessionRest{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *SessionRest) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionRest) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *SessionRest) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *SessionRest) SetRegion(v string) {
	o.Region = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *SessionRest) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionRest) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *SessionRest) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *SessionRest) SetUsername(v string) {
	o.Username = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *SessionRest) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionRest) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *SessionRest) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *SessionRest) SetTimezone(v string) {
	o.Timezone = &v
}

// GetUserpref returns the Userpref field value if set, zero value otherwise.
func (o *SessionRest) GetUserpref() string {
	if o == nil || IsNil(o.Userpref) {
		var ret string
		return ret
	}
	return *o.Userpref
}

// GetUserprefOk returns a tuple with the Userpref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionRest) GetUserprefOk() (*string, bool) {
	if o == nil || IsNil(o.Userpref) {
		return nil, false
	}
	return o.Userpref, true
}

// HasUserpref returns a boolean if a field has been set.
func (o *SessionRest) HasUserpref() bool {
	if o != nil && !IsNil(o.Userpref) {
		return true
	}

	return false
}

// SetUserpref gets a reference to the given string and assigns it to the Userpref field.
func (o *SessionRest) SetUserpref(v string) {
	o.Userpref = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *SessionRest) GetUser() UserRest {
	if o == nil || IsNil(o.User) {
		var ret UserRest
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionRest) GetUserOk() (*UserRest, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *SessionRest) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserRest and assigns it to the User field.
func (o *SessionRest) SetUser(v UserRest) {
	o.User = &v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *SessionRest) GetSessionId() string {
	if o == nil || IsNil(o.SessionId) {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionRest) GetSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SessionId) {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *SessionRest) HasSessionId() bool {
	if o != nil && !IsNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *SessionRest) SetSessionId(v string) {
	o.SessionId = &v
}

// GetRights returns the Rights field value if set, zero value otherwise.
func (o *SessionRest) GetRights() []RightRest {
	if o == nil || IsNil(o.Rights) {
		var ret []RightRest
		return ret
	}
	return o.Rights
}

// GetRightsOk returns a tuple with the Rights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionRest) GetRightsOk() ([]RightRest, bool) {
	if o == nil || IsNil(o.Rights) {
		return nil, false
	}
	return o.Rights, true
}

// HasRights returns a boolean if a field has been set.
func (o *SessionRest) HasRights() bool {
	if o != nil && !IsNil(o.Rights) {
		return true
	}

	return false
}

// SetRights gets a reference to the given []RightRest and assigns it to the Rights field.
func (o *SessionRest) SetRights(v []RightRest) {
	o.Rights = v
}

// GetAuthconfig returns the Authconfig field value if set, zero value otherwise.
func (o *SessionRest) GetAuthconfig() AuthConfigRest {
	if o == nil || IsNil(o.Authconfig) {
		var ret AuthConfigRest
		return ret
	}
	return *o.Authconfig
}

// GetAuthconfigOk returns a tuple with the Authconfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionRest) GetAuthconfigOk() (*AuthConfigRest, bool) {
	if o == nil || IsNil(o.Authconfig) {
		return nil, false
	}
	return o.Authconfig, true
}

// HasAuthconfig returns a boolean if a field has been set.
func (o *SessionRest) HasAuthconfig() bool {
	if o != nil && !IsNil(o.Authconfig) {
		return true
	}

	return false
}

// SetAuthconfig gets a reference to the given AuthConfigRest and assigns it to the Authconfig field.
func (o *SessionRest) SetAuthconfig(v AuthConfigRest) {
	o.Authconfig = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SessionRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SessionRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SessionRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *SessionRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *SessionRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *SessionRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *SessionRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *SessionRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *SessionRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *SessionRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *SessionRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *SessionRest) SetStale(v bool) {
	o.Stale = &v
}

func (o SessionRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.Userpref) {
		toSerialize["userpref"] = o.Userpref
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.SessionId) {
		toSerialize["session_id"] = o.SessionId
	}
	if !IsNil(o.Rights) {
		toSerialize["rights"] = o.Rights
	}
	if !IsNil(o.Authconfig) {
		toSerialize["authconfig"] = o.Authconfig
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableSessionRest struct {
	value *SessionRest
	isSet bool
}

func (v NullableSessionRest) Get() *SessionRest {
	return v.value
}

func (v *NullableSessionRest) Set(val *SessionRest) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionRest) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionRest(val *SessionRest) *NullableSessionRest {
	return &NullableSessionRest{value: val, isSet: true}
}

func (v NullableSessionRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


