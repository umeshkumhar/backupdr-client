/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PreflightRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreflightRest{}

// PreflightRest struct for PreflightRest
type PreflightRest struct {
	Databasesid *string `json:"databasesid,omitempty"`
	Username *string `json:"username,omitempty"`
	Orahome *string `json:"orahome,omitempty"`
	Hostid *string `json:"hostid,omitempty"`
	Restoreoptions *PreflightRestoreOptionsRest `json:"restoreoptions,omitempty"`
	Provisioningoptions []ProvisioningOptionRest `json:"provisioningoptions,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewPreflightRest instantiates a new PreflightRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreflightRest() *PreflightRest {
	this := PreflightRest{}
	return &this
}

// NewPreflightRestWithDefaults instantiates a new PreflightRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreflightRestWithDefaults() *PreflightRest {
	this := PreflightRest{}
	return &this
}

// GetDatabasesid returns the Databasesid field value if set, zero value otherwise.
func (o *PreflightRest) GetDatabasesid() string {
	if o == nil || IsNil(o.Databasesid) {
		var ret string
		return ret
	}
	return *o.Databasesid
}

// GetDatabasesidOk returns a tuple with the Databasesid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreflightRest) GetDatabasesidOk() (*string, bool) {
	if o == nil || IsNil(o.Databasesid) {
		return nil, false
	}
	return o.Databasesid, true
}

// HasDatabasesid returns a boolean if a field has been set.
func (o *PreflightRest) HasDatabasesid() bool {
	if o != nil && !IsNil(o.Databasesid) {
		return true
	}

	return false
}

// SetDatabasesid gets a reference to the given string and assigns it to the Databasesid field.
func (o *PreflightRest) SetDatabasesid(v string) {
	o.Databasesid = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *PreflightRest) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreflightRest) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *PreflightRest) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *PreflightRest) SetUsername(v string) {
	o.Username = &v
}

// GetOrahome returns the Orahome field value if set, zero value otherwise.
func (o *PreflightRest) GetOrahome() string {
	if o == nil || IsNil(o.Orahome) {
		var ret string
		return ret
	}
	return *o.Orahome
}

// GetOrahomeOk returns a tuple with the Orahome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreflightRest) GetOrahomeOk() (*string, bool) {
	if o == nil || IsNil(o.Orahome) {
		return nil, false
	}
	return o.Orahome, true
}

// HasOrahome returns a boolean if a field has been set.
func (o *PreflightRest) HasOrahome() bool {
	if o != nil && !IsNil(o.Orahome) {
		return true
	}

	return false
}

// SetOrahome gets a reference to the given string and assigns it to the Orahome field.
func (o *PreflightRest) SetOrahome(v string) {
	o.Orahome = &v
}

// GetHostid returns the Hostid field value if set, zero value otherwise.
func (o *PreflightRest) GetHostid() string {
	if o == nil || IsNil(o.Hostid) {
		var ret string
		return ret
	}
	return *o.Hostid
}

// GetHostidOk returns a tuple with the Hostid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreflightRest) GetHostidOk() (*string, bool) {
	if o == nil || IsNil(o.Hostid) {
		return nil, false
	}
	return o.Hostid, true
}

// HasHostid returns a boolean if a field has been set.
func (o *PreflightRest) HasHostid() bool {
	if o != nil && !IsNil(o.Hostid) {
		return true
	}

	return false
}

// SetHostid gets a reference to the given string and assigns it to the Hostid field.
func (o *PreflightRest) SetHostid(v string) {
	o.Hostid = &v
}

// GetRestoreoptions returns the Restoreoptions field value if set, zero value otherwise.
func (o *PreflightRest) GetRestoreoptions() PreflightRestoreOptionsRest {
	if o == nil || IsNil(o.Restoreoptions) {
		var ret PreflightRestoreOptionsRest
		return ret
	}
	return *o.Restoreoptions
}

// GetRestoreoptionsOk returns a tuple with the Restoreoptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreflightRest) GetRestoreoptionsOk() (*PreflightRestoreOptionsRest, bool) {
	if o == nil || IsNil(o.Restoreoptions) {
		return nil, false
	}
	return o.Restoreoptions, true
}

// HasRestoreoptions returns a boolean if a field has been set.
func (o *PreflightRest) HasRestoreoptions() bool {
	if o != nil && !IsNil(o.Restoreoptions) {
		return true
	}

	return false
}

// SetRestoreoptions gets a reference to the given PreflightRestoreOptionsRest and assigns it to the Restoreoptions field.
func (o *PreflightRest) SetRestoreoptions(v PreflightRestoreOptionsRest) {
	o.Restoreoptions = &v
}

// GetProvisioningoptions returns the Provisioningoptions field value if set, zero value otherwise.
func (o *PreflightRest) GetProvisioningoptions() []ProvisioningOptionRest {
	if o == nil || IsNil(o.Provisioningoptions) {
		var ret []ProvisioningOptionRest
		return ret
	}
	return o.Provisioningoptions
}

// GetProvisioningoptionsOk returns a tuple with the Provisioningoptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreflightRest) GetProvisioningoptionsOk() ([]ProvisioningOptionRest, bool) {
	if o == nil || IsNil(o.Provisioningoptions) {
		return nil, false
	}
	return o.Provisioningoptions, true
}

// HasProvisioningoptions returns a boolean if a field has been set.
func (o *PreflightRest) HasProvisioningoptions() bool {
	if o != nil && !IsNil(o.Provisioningoptions) {
		return true
	}

	return false
}

// SetProvisioningoptions gets a reference to the given []ProvisioningOptionRest and assigns it to the Provisioningoptions field.
func (o *PreflightRest) SetProvisioningoptions(v []ProvisioningOptionRest) {
	o.Provisioningoptions = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PreflightRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreflightRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PreflightRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PreflightRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *PreflightRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreflightRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *PreflightRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *PreflightRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *PreflightRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreflightRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *PreflightRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *PreflightRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *PreflightRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreflightRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *PreflightRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *PreflightRest) SetStale(v bool) {
	o.Stale = &v
}

func (o PreflightRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreflightRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Databasesid) {
		toSerialize["databasesid"] = o.Databasesid
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Orahome) {
		toSerialize["orahome"] = o.Orahome
	}
	if !IsNil(o.Hostid) {
		toSerialize["hostid"] = o.Hostid
	}
	if !IsNil(o.Restoreoptions) {
		toSerialize["restoreoptions"] = o.Restoreoptions
	}
	if !IsNil(o.Provisioningoptions) {
		toSerialize["provisioningoptions"] = o.Provisioningoptions
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullablePreflightRest struct {
	value *PreflightRest
	isSet bool
}

func (v NullablePreflightRest) Get() *PreflightRest {
	return v.value
}

func (v *NullablePreflightRest) Set(val *PreflightRest) {
	v.value = val
	v.isSet = true
}

func (v NullablePreflightRest) IsSet() bool {
	return v.isSet
}

func (v *NullablePreflightRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreflightRest(val *PreflightRest) *NullablePreflightRest {
	return &NullablePreflightRest{value: val, isSet: true}
}

func (v NullablePreflightRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreflightRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


