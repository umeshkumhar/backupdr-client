/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DiskMappingRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskMappingRest{}

// DiskMappingRest struct for DiskMappingRest
type DiskMappingRest struct {
	Sourceinfo []DiskRest `json:"sourceinfo,omitempty"`
	Targetlist []DiskRest `json:"targetlist,omitempty"`
	Asmracnodelist []string `json:"asmracnodelist,omitempty"`
}

// NewDiskMappingRest instantiates a new DiskMappingRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskMappingRest() *DiskMappingRest {
	this := DiskMappingRest{}
	return &this
}

// NewDiskMappingRestWithDefaults instantiates a new DiskMappingRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskMappingRestWithDefaults() *DiskMappingRest {
	this := DiskMappingRest{}
	return &this
}

// GetSourceinfo returns the Sourceinfo field value if set, zero value otherwise.
func (o *DiskMappingRest) GetSourceinfo() []DiskRest {
	if o == nil || IsNil(o.Sourceinfo) {
		var ret []DiskRest
		return ret
	}
	return o.Sourceinfo
}

// GetSourceinfoOk returns a tuple with the Sourceinfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskMappingRest) GetSourceinfoOk() ([]DiskRest, bool) {
	if o == nil || IsNil(o.Sourceinfo) {
		return nil, false
	}
	return o.Sourceinfo, true
}

// HasSourceinfo returns a boolean if a field has been set.
func (o *DiskMappingRest) HasSourceinfo() bool {
	if o != nil && !IsNil(o.Sourceinfo) {
		return true
	}

	return false
}

// SetSourceinfo gets a reference to the given []DiskRest and assigns it to the Sourceinfo field.
func (o *DiskMappingRest) SetSourceinfo(v []DiskRest) {
	o.Sourceinfo = v
}

// GetTargetlist returns the Targetlist field value if set, zero value otherwise.
func (o *DiskMappingRest) GetTargetlist() []DiskRest {
	if o == nil || IsNil(o.Targetlist) {
		var ret []DiskRest
		return ret
	}
	return o.Targetlist
}

// GetTargetlistOk returns a tuple with the Targetlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskMappingRest) GetTargetlistOk() ([]DiskRest, bool) {
	if o == nil || IsNil(o.Targetlist) {
		return nil, false
	}
	return o.Targetlist, true
}

// HasTargetlist returns a boolean if a field has been set.
func (o *DiskMappingRest) HasTargetlist() bool {
	if o != nil && !IsNil(o.Targetlist) {
		return true
	}

	return false
}

// SetTargetlist gets a reference to the given []DiskRest and assigns it to the Targetlist field.
func (o *DiskMappingRest) SetTargetlist(v []DiskRest) {
	o.Targetlist = v
}

// GetAsmracnodelist returns the Asmracnodelist field value if set, zero value otherwise.
func (o *DiskMappingRest) GetAsmracnodelist() []string {
	if o == nil || IsNil(o.Asmracnodelist) {
		var ret []string
		return ret
	}
	return o.Asmracnodelist
}

// GetAsmracnodelistOk returns a tuple with the Asmracnodelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskMappingRest) GetAsmracnodelistOk() ([]string, bool) {
	if o == nil || IsNil(o.Asmracnodelist) {
		return nil, false
	}
	return o.Asmracnodelist, true
}

// HasAsmracnodelist returns a boolean if a field has been set.
func (o *DiskMappingRest) HasAsmracnodelist() bool {
	if o != nil && !IsNil(o.Asmracnodelist) {
		return true
	}

	return false
}

// SetAsmracnodelist gets a reference to the given []string and assigns it to the Asmracnodelist field.
func (o *DiskMappingRest) SetAsmracnodelist(v []string) {
	o.Asmracnodelist = v
}

func (o DiskMappingRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskMappingRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sourceinfo) {
		toSerialize["sourceinfo"] = o.Sourceinfo
	}
	if !IsNil(o.Targetlist) {
		toSerialize["targetlist"] = o.Targetlist
	}
	if !IsNil(o.Asmracnodelist) {
		toSerialize["asmracnodelist"] = o.Asmracnodelist
	}
	return toSerialize, nil
}

type NullableDiskMappingRest struct {
	value *DiskMappingRest
	isSet bool
}

func (v NullableDiskMappingRest) Get() *DiskMappingRest {
	return v.value
}

func (v *NullableDiskMappingRest) Set(val *DiskMappingRest) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskMappingRest) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskMappingRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskMappingRest(val *DiskMappingRest) *NullableDiskMappingRest {
	return &NullableDiskMappingRest{value: val, isSet: true}
}

func (v NullableDiskMappingRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskMappingRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


