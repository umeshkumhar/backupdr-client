/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AppClassRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppClassRest{}

// AppClassRest struct for AppClassRest
type AppClassRest struct {
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	FriendyName *string `json:"friendyName,omitempty"`
	ScriptFile *ScriptFileRest `json:"scriptFile,omitempty"`
	ProvisioningOptions []ProvisioningOptionMetaRest `json:"provisioningOptions,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewAppClassRest instantiates a new AppClassRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppClassRest() *AppClassRest {
	this := AppClassRest{}
	return &this
}

// NewAppClassRestWithDefaults instantiates a new AppClassRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppClassRestWithDefaults() *AppClassRest {
	this := AppClassRest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AppClassRest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppClassRest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AppClassRest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AppClassRest) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AppClassRest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppClassRest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AppClassRest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AppClassRest) SetName(v string) {
	o.Name = &v
}

// GetFriendyName returns the FriendyName field value if set, zero value otherwise.
func (o *AppClassRest) GetFriendyName() string {
	if o == nil || IsNil(o.FriendyName) {
		var ret string
		return ret
	}
	return *o.FriendyName
}

// GetFriendyNameOk returns a tuple with the FriendyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppClassRest) GetFriendyNameOk() (*string, bool) {
	if o == nil || IsNil(o.FriendyName) {
		return nil, false
	}
	return o.FriendyName, true
}

// HasFriendyName returns a boolean if a field has been set.
func (o *AppClassRest) HasFriendyName() bool {
	if o != nil && !IsNil(o.FriendyName) {
		return true
	}

	return false
}

// SetFriendyName gets a reference to the given string and assigns it to the FriendyName field.
func (o *AppClassRest) SetFriendyName(v string) {
	o.FriendyName = &v
}

// GetScriptFile returns the ScriptFile field value if set, zero value otherwise.
func (o *AppClassRest) GetScriptFile() ScriptFileRest {
	if o == nil || IsNil(o.ScriptFile) {
		var ret ScriptFileRest
		return ret
	}
	return *o.ScriptFile
}

// GetScriptFileOk returns a tuple with the ScriptFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppClassRest) GetScriptFileOk() (*ScriptFileRest, bool) {
	if o == nil || IsNil(o.ScriptFile) {
		return nil, false
	}
	return o.ScriptFile, true
}

// HasScriptFile returns a boolean if a field has been set.
func (o *AppClassRest) HasScriptFile() bool {
	if o != nil && !IsNil(o.ScriptFile) {
		return true
	}

	return false
}

// SetScriptFile gets a reference to the given ScriptFileRest and assigns it to the ScriptFile field.
func (o *AppClassRest) SetScriptFile(v ScriptFileRest) {
	o.ScriptFile = &v
}

// GetProvisioningOptions returns the ProvisioningOptions field value if set, zero value otherwise.
func (o *AppClassRest) GetProvisioningOptions() []ProvisioningOptionMetaRest {
	if o == nil || IsNil(o.ProvisioningOptions) {
		var ret []ProvisioningOptionMetaRest
		return ret
	}
	return o.ProvisioningOptions
}

// GetProvisioningOptionsOk returns a tuple with the ProvisioningOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppClassRest) GetProvisioningOptionsOk() ([]ProvisioningOptionMetaRest, bool) {
	if o == nil || IsNil(o.ProvisioningOptions) {
		return nil, false
	}
	return o.ProvisioningOptions, true
}

// HasProvisioningOptions returns a boolean if a field has been set.
func (o *AppClassRest) HasProvisioningOptions() bool {
	if o != nil && !IsNil(o.ProvisioningOptions) {
		return true
	}

	return false
}

// SetProvisioningOptions gets a reference to the given []ProvisioningOptionMetaRest and assigns it to the ProvisioningOptions field.
func (o *AppClassRest) SetProvisioningOptions(v []ProvisioningOptionMetaRest) {
	o.ProvisioningOptions = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AppClassRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppClassRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AppClassRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AppClassRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *AppClassRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppClassRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *AppClassRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *AppClassRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *AppClassRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppClassRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *AppClassRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *AppClassRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *AppClassRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppClassRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *AppClassRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *AppClassRest) SetStale(v bool) {
	o.Stale = &v
}

func (o AppClassRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppClassRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FriendyName) {
		toSerialize["friendyName"] = o.FriendyName
	}
	if !IsNil(o.ScriptFile) {
		toSerialize["scriptFile"] = o.ScriptFile
	}
	if !IsNil(o.ProvisioningOptions) {
		toSerialize["provisioningOptions"] = o.ProvisioningOptions
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableAppClassRest struct {
	value *AppClassRest
	isSet bool
}

func (v NullableAppClassRest) Get() *AppClassRest {
	return v.value
}

func (v *NullableAppClassRest) Set(val *AppClassRest) {
	v.value = val
	v.isSet = true
}

func (v NullableAppClassRest) IsSet() bool {
	return v.isSet
}

func (v *NullableAppClassRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppClassRest(val *AppClassRest) *NullableAppClassRest {
	return &NullableAppClassRest{value: val, isSet: true}
}

func (v NullableAppClassRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppClassRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


