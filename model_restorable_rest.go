/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestorableRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestorableRest{}

// RestorableRest struct for RestorableRest
type RestorableRest struct {
	AppstateText []string `json:"appstate_text,omitempty"`
	Fileinfo []FileinfoRest `json:"fileinfo,omitempty"`
	Backedupdb *string `json:"backedupdb,omitempty"`
	Skippeddb *string `json:"skippeddb,omitempty"`
	Faileddb *string `json:"faileddb,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Application *ApplicationRest `json:"application,omitempty"`
	Pathname *string `json:"pathname,omitempty"`
	Systemdb *bool `json:"systemdb,omitempty"`
	AppState *int64 `json:"appState,omitempty"`
	Fullpath *string `json:"fullpath,omitempty"`
	Volumeinfo []VolumeinfoRest `json:"volumeinfo,omitempty"`
}

// NewRestorableRest instantiates a new RestorableRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestorableRest() *RestorableRest {
	this := RestorableRest{}
	return &this
}

// NewRestorableRestWithDefaults instantiates a new RestorableRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestorableRestWithDefaults() *RestorableRest {
	this := RestorableRest{}
	return &this
}

// GetAppstateText returns the AppstateText field value if set, zero value otherwise.
func (o *RestorableRest) GetAppstateText() []string {
	if o == nil || IsNil(o.AppstateText) {
		var ret []string
		return ret
	}
	return o.AppstateText
}

// GetAppstateTextOk returns a tuple with the AppstateText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestorableRest) GetAppstateTextOk() ([]string, bool) {
	if o == nil || IsNil(o.AppstateText) {
		return nil, false
	}
	return o.AppstateText, true
}

// HasAppstateText returns a boolean if a field has been set.
func (o *RestorableRest) HasAppstateText() bool {
	if o != nil && !IsNil(o.AppstateText) {
		return true
	}

	return false
}

// SetAppstateText gets a reference to the given []string and assigns it to the AppstateText field.
func (o *RestorableRest) SetAppstateText(v []string) {
	o.AppstateText = v
}

// GetFileinfo returns the Fileinfo field value if set, zero value otherwise.
func (o *RestorableRest) GetFileinfo() []FileinfoRest {
	if o == nil || IsNil(o.Fileinfo) {
		var ret []FileinfoRest
		return ret
	}
	return o.Fileinfo
}

// GetFileinfoOk returns a tuple with the Fileinfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestorableRest) GetFileinfoOk() ([]FileinfoRest, bool) {
	if o == nil || IsNil(o.Fileinfo) {
		return nil, false
	}
	return o.Fileinfo, true
}

// HasFileinfo returns a boolean if a field has been set.
func (o *RestorableRest) HasFileinfo() bool {
	if o != nil && !IsNil(o.Fileinfo) {
		return true
	}

	return false
}

// SetFileinfo gets a reference to the given []FileinfoRest and assigns it to the Fileinfo field.
func (o *RestorableRest) SetFileinfo(v []FileinfoRest) {
	o.Fileinfo = v
}

// GetBackedupdb returns the Backedupdb field value if set, zero value otherwise.
func (o *RestorableRest) GetBackedupdb() string {
	if o == nil || IsNil(o.Backedupdb) {
		var ret string
		return ret
	}
	return *o.Backedupdb
}

// GetBackedupdbOk returns a tuple with the Backedupdb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestorableRest) GetBackedupdbOk() (*string, bool) {
	if o == nil || IsNil(o.Backedupdb) {
		return nil, false
	}
	return o.Backedupdb, true
}

// HasBackedupdb returns a boolean if a field has been set.
func (o *RestorableRest) HasBackedupdb() bool {
	if o != nil && !IsNil(o.Backedupdb) {
		return true
	}

	return false
}

// SetBackedupdb gets a reference to the given string and assigns it to the Backedupdb field.
func (o *RestorableRest) SetBackedupdb(v string) {
	o.Backedupdb = &v
}

// GetSkippeddb returns the Skippeddb field value if set, zero value otherwise.
func (o *RestorableRest) GetSkippeddb() string {
	if o == nil || IsNil(o.Skippeddb) {
		var ret string
		return ret
	}
	return *o.Skippeddb
}

// GetSkippeddbOk returns a tuple with the Skippeddb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestorableRest) GetSkippeddbOk() (*string, bool) {
	if o == nil || IsNil(o.Skippeddb) {
		return nil, false
	}
	return o.Skippeddb, true
}

// HasSkippeddb returns a boolean if a field has been set.
func (o *RestorableRest) HasSkippeddb() bool {
	if o != nil && !IsNil(o.Skippeddb) {
		return true
	}

	return false
}

// SetSkippeddb gets a reference to the given string and assigns it to the Skippeddb field.
func (o *RestorableRest) SetSkippeddb(v string) {
	o.Skippeddb = &v
}

// GetFaileddb returns the Faileddb field value if set, zero value otherwise.
func (o *RestorableRest) GetFaileddb() string {
	if o == nil || IsNil(o.Faileddb) {
		var ret string
		return ret
	}
	return *o.Faileddb
}

// GetFaileddbOk returns a tuple with the Faileddb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestorableRest) GetFaileddbOk() (*string, bool) {
	if o == nil || IsNil(o.Faileddb) {
		return nil, false
	}
	return o.Faileddb, true
}

// HasFaileddb returns a boolean if a field has been set.
func (o *RestorableRest) HasFaileddb() bool {
	if o != nil && !IsNil(o.Faileddb) {
		return true
	}

	return false
}

// SetFaileddb gets a reference to the given string and assigns it to the Faileddb field.
func (o *RestorableRest) SetFaileddb(v string) {
	o.Faileddb = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RestorableRest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestorableRest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RestorableRest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RestorableRest) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RestorableRest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestorableRest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestorableRest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RestorableRest) SetType(v string) {
	o.Type = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *RestorableRest) GetApplication() ApplicationRest {
	if o == nil || IsNil(o.Application) {
		var ret ApplicationRest
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestorableRest) GetApplicationOk() (*ApplicationRest, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *RestorableRest) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given ApplicationRest and assigns it to the Application field.
func (o *RestorableRest) SetApplication(v ApplicationRest) {
	o.Application = &v
}

// GetPathname returns the Pathname field value if set, zero value otherwise.
func (o *RestorableRest) GetPathname() string {
	if o == nil || IsNil(o.Pathname) {
		var ret string
		return ret
	}
	return *o.Pathname
}

// GetPathnameOk returns a tuple with the Pathname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestorableRest) GetPathnameOk() (*string, bool) {
	if o == nil || IsNil(o.Pathname) {
		return nil, false
	}
	return o.Pathname, true
}

// HasPathname returns a boolean if a field has been set.
func (o *RestorableRest) HasPathname() bool {
	if o != nil && !IsNil(o.Pathname) {
		return true
	}

	return false
}

// SetPathname gets a reference to the given string and assigns it to the Pathname field.
func (o *RestorableRest) SetPathname(v string) {
	o.Pathname = &v
}

// GetSystemdb returns the Systemdb field value if set, zero value otherwise.
func (o *RestorableRest) GetSystemdb() bool {
	if o == nil || IsNil(o.Systemdb) {
		var ret bool
		return ret
	}
	return *o.Systemdb
}

// GetSystemdbOk returns a tuple with the Systemdb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestorableRest) GetSystemdbOk() (*bool, bool) {
	if o == nil || IsNil(o.Systemdb) {
		return nil, false
	}
	return o.Systemdb, true
}

// HasSystemdb returns a boolean if a field has been set.
func (o *RestorableRest) HasSystemdb() bool {
	if o != nil && !IsNil(o.Systemdb) {
		return true
	}

	return false
}

// SetSystemdb gets a reference to the given bool and assigns it to the Systemdb field.
func (o *RestorableRest) SetSystemdb(v bool) {
	o.Systemdb = &v
}

// GetAppState returns the AppState field value if set, zero value otherwise.
func (o *RestorableRest) GetAppState() int64 {
	if o == nil || IsNil(o.AppState) {
		var ret int64
		return ret
	}
	return *o.AppState
}

// GetAppStateOk returns a tuple with the AppState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestorableRest) GetAppStateOk() (*int64, bool) {
	if o == nil || IsNil(o.AppState) {
		return nil, false
	}
	return o.AppState, true
}

// HasAppState returns a boolean if a field has been set.
func (o *RestorableRest) HasAppState() bool {
	if o != nil && !IsNil(o.AppState) {
		return true
	}

	return false
}

// SetAppState gets a reference to the given int64 and assigns it to the AppState field.
func (o *RestorableRest) SetAppState(v int64) {
	o.AppState = &v
}

// GetFullpath returns the Fullpath field value if set, zero value otherwise.
func (o *RestorableRest) GetFullpath() string {
	if o == nil || IsNil(o.Fullpath) {
		var ret string
		return ret
	}
	return *o.Fullpath
}

// GetFullpathOk returns a tuple with the Fullpath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestorableRest) GetFullpathOk() (*string, bool) {
	if o == nil || IsNil(o.Fullpath) {
		return nil, false
	}
	return o.Fullpath, true
}

// HasFullpath returns a boolean if a field has been set.
func (o *RestorableRest) HasFullpath() bool {
	if o != nil && !IsNil(o.Fullpath) {
		return true
	}

	return false
}

// SetFullpath gets a reference to the given string and assigns it to the Fullpath field.
func (o *RestorableRest) SetFullpath(v string) {
	o.Fullpath = &v
}

// GetVolumeinfo returns the Volumeinfo field value if set, zero value otherwise.
func (o *RestorableRest) GetVolumeinfo() []VolumeinfoRest {
	if o == nil || IsNil(o.Volumeinfo) {
		var ret []VolumeinfoRest
		return ret
	}
	return o.Volumeinfo
}

// GetVolumeinfoOk returns a tuple with the Volumeinfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestorableRest) GetVolumeinfoOk() ([]VolumeinfoRest, bool) {
	if o == nil || IsNil(o.Volumeinfo) {
		return nil, false
	}
	return o.Volumeinfo, true
}

// HasVolumeinfo returns a boolean if a field has been set.
func (o *RestorableRest) HasVolumeinfo() bool {
	if o != nil && !IsNil(o.Volumeinfo) {
		return true
	}

	return false
}

// SetVolumeinfo gets a reference to the given []VolumeinfoRest and assigns it to the Volumeinfo field.
func (o *RestorableRest) SetVolumeinfo(v []VolumeinfoRest) {
	o.Volumeinfo = v
}

func (o RestorableRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestorableRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppstateText) {
		toSerialize["appstate_text"] = o.AppstateText
	}
	if !IsNil(o.Fileinfo) {
		toSerialize["fileinfo"] = o.Fileinfo
	}
	if !IsNil(o.Backedupdb) {
		toSerialize["backedupdb"] = o.Backedupdb
	}
	if !IsNil(o.Skippeddb) {
		toSerialize["skippeddb"] = o.Skippeddb
	}
	if !IsNil(o.Faileddb) {
		toSerialize["faileddb"] = o.Faileddb
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.Pathname) {
		toSerialize["pathname"] = o.Pathname
	}
	if !IsNil(o.Systemdb) {
		toSerialize["systemdb"] = o.Systemdb
	}
	if !IsNil(o.AppState) {
		toSerialize["appState"] = o.AppState
	}
	if !IsNil(o.Fullpath) {
		toSerialize["fullpath"] = o.Fullpath
	}
	if !IsNil(o.Volumeinfo) {
		toSerialize["volumeinfo"] = o.Volumeinfo
	}
	return toSerialize, nil
}

type NullableRestorableRest struct {
	value *RestorableRest
	isSet bool
}

func (v NullableRestorableRest) Get() *RestorableRest {
	return v.value
}

func (v *NullableRestorableRest) Set(val *RestorableRest) {
	v.value = val
	v.isSet = true
}

func (v NullableRestorableRest) IsSet() bool {
	return v.isSet
}

func (v *NullableRestorableRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestorableRest(val *RestorableRest) *NullableRestorableRest {
	return &NullableRestorableRest{value: val, isSet: true}
}

func (v NullableRestorableRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestorableRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


