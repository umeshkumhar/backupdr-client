/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DiskRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskRest{}

// DiskRest struct for DiskRest
type DiskRest struct {
	Name *string `json:"name,omitempty"`
	Eligible *bool `json:"eligible,omitempty"`
	Freespace *string `json:"freespace,omitempty"`
	Requiredsize *float64 `json:"requiredsize,omitempty"`
}

// NewDiskRest instantiates a new DiskRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskRest() *DiskRest {
	this := DiskRest{}
	return &this
}

// NewDiskRestWithDefaults instantiates a new DiskRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskRestWithDefaults() *DiskRest {
	this := DiskRest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DiskRest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DiskRest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DiskRest) SetName(v string) {
	o.Name = &v
}

// GetEligible returns the Eligible field value if set, zero value otherwise.
func (o *DiskRest) GetEligible() bool {
	if o == nil || IsNil(o.Eligible) {
		var ret bool
		return ret
	}
	return *o.Eligible
}

// GetEligibleOk returns a tuple with the Eligible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRest) GetEligibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Eligible) {
		return nil, false
	}
	return o.Eligible, true
}

// HasEligible returns a boolean if a field has been set.
func (o *DiskRest) HasEligible() bool {
	if o != nil && !IsNil(o.Eligible) {
		return true
	}

	return false
}

// SetEligible gets a reference to the given bool and assigns it to the Eligible field.
func (o *DiskRest) SetEligible(v bool) {
	o.Eligible = &v
}

// GetFreespace returns the Freespace field value if set, zero value otherwise.
func (o *DiskRest) GetFreespace() string {
	if o == nil || IsNil(o.Freespace) {
		var ret string
		return ret
	}
	return *o.Freespace
}

// GetFreespaceOk returns a tuple with the Freespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRest) GetFreespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Freespace) {
		return nil, false
	}
	return o.Freespace, true
}

// HasFreespace returns a boolean if a field has been set.
func (o *DiskRest) HasFreespace() bool {
	if o != nil && !IsNil(o.Freespace) {
		return true
	}

	return false
}

// SetFreespace gets a reference to the given string and assigns it to the Freespace field.
func (o *DiskRest) SetFreespace(v string) {
	o.Freespace = &v
}

// GetRequiredsize returns the Requiredsize field value if set, zero value otherwise.
func (o *DiskRest) GetRequiredsize() float64 {
	if o == nil || IsNil(o.Requiredsize) {
		var ret float64
		return ret
	}
	return *o.Requiredsize
}

// GetRequiredsizeOk returns a tuple with the Requiredsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRest) GetRequiredsizeOk() (*float64, bool) {
	if o == nil || IsNil(o.Requiredsize) {
		return nil, false
	}
	return o.Requiredsize, true
}

// HasRequiredsize returns a boolean if a field has been set.
func (o *DiskRest) HasRequiredsize() bool {
	if o != nil && !IsNil(o.Requiredsize) {
		return true
	}

	return false
}

// SetRequiredsize gets a reference to the given float64 and assigns it to the Requiredsize field.
func (o *DiskRest) SetRequiredsize(v float64) {
	o.Requiredsize = &v
}

func (o DiskRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Eligible) {
		toSerialize["eligible"] = o.Eligible
	}
	if !IsNil(o.Freespace) {
		toSerialize["freespace"] = o.Freespace
	}
	if !IsNil(o.Requiredsize) {
		toSerialize["requiredsize"] = o.Requiredsize
	}
	return toSerialize, nil
}

type NullableDiskRest struct {
	value *DiskRest
	isSet bool
}

func (v NullableDiskRest) Get() *DiskRest {
	return v.value
}

func (v *NullableDiskRest) Set(val *DiskRest) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskRest) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskRest(val *DiskRest) *NullableDiskRest {
	return &NullableDiskRest{value: val, isSet: true}
}

func (v NullableDiskRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


