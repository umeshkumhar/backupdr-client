/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CertificateRevocationRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateRevocationRest{}

// CertificateRevocationRest struct for CertificateRevocationRest
type CertificateRevocationRest struct {
	HostId *string `json:"hostId,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	CertRevoked *bool `json:"certRevoked,omitempty"`
}

// NewCertificateRevocationRest instantiates a new CertificateRevocationRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateRevocationRest() *CertificateRevocationRest {
	this := CertificateRevocationRest{}
	return &this
}

// NewCertificateRevocationRestWithDefaults instantiates a new CertificateRevocationRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateRevocationRestWithDefaults() *CertificateRevocationRest {
	this := CertificateRevocationRest{}
	return &this
}

// GetHostId returns the HostId field value if set, zero value otherwise.
func (o *CertificateRevocationRest) GetHostId() string {
	if o == nil || IsNil(o.HostId) {
		var ret string
		return ret
	}
	return *o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRevocationRest) GetHostIdOk() (*string, bool) {
	if o == nil || IsNil(o.HostId) {
		return nil, false
	}
	return o.HostId, true
}

// HasHostId returns a boolean if a field has been set.
func (o *CertificateRevocationRest) HasHostId() bool {
	if o != nil && !IsNil(o.HostId) {
		return true
	}

	return false
}

// SetHostId gets a reference to the given string and assigns it to the HostId field.
func (o *CertificateRevocationRest) SetHostId(v string) {
	o.HostId = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *CertificateRevocationRest) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRevocationRest) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *CertificateRevocationRest) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *CertificateRevocationRest) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetCertRevoked returns the CertRevoked field value if set, zero value otherwise.
func (o *CertificateRevocationRest) GetCertRevoked() bool {
	if o == nil || IsNil(o.CertRevoked) {
		var ret bool
		return ret
	}
	return *o.CertRevoked
}

// GetCertRevokedOk returns a tuple with the CertRevoked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRevocationRest) GetCertRevokedOk() (*bool, bool) {
	if o == nil || IsNil(o.CertRevoked) {
		return nil, false
	}
	return o.CertRevoked, true
}

// HasCertRevoked returns a boolean if a field has been set.
func (o *CertificateRevocationRest) HasCertRevoked() bool {
	if o != nil && !IsNil(o.CertRevoked) {
		return true
	}

	return false
}

// SetCertRevoked gets a reference to the given bool and assigns it to the CertRevoked field.
func (o *CertificateRevocationRest) SetCertRevoked(v bool) {
	o.CertRevoked = &v
}

func (o CertificateRevocationRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateRevocationRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HostId) {
		toSerialize["hostId"] = o.HostId
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if !IsNil(o.CertRevoked) {
		toSerialize["certRevoked"] = o.CertRevoked
	}
	return toSerialize, nil
}

type NullableCertificateRevocationRest struct {
	value *CertificateRevocationRest
	isSet bool
}

func (v NullableCertificateRevocationRest) Get() *CertificateRevocationRest {
	return v.value
}

func (v *NullableCertificateRevocationRest) Set(val *CertificateRevocationRest) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateRevocationRest) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateRevocationRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateRevocationRest(val *CertificateRevocationRest) *NullableCertificateRevocationRest {
	return &NullableCertificateRevocationRest{value: val, isSet: true}
}

func (v NullableCertificateRevocationRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateRevocationRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


