/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserRest{}

// UserRest struct for UserRest
type UserRest struct {
	Password *string `json:"password,omitempty"`
	Version *int32 `json:"version,omitempty"`
	Rightlist []RightRest `json:"rightlist,omitempty"`
	Rolelist []RoleRest `json:"rolelist,omitempty"`
	Modifydate *int64 `json:"modifydate,omitempty"`
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
	Dataaccesslevel *int32 `json:"dataaccesslevel,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
	Firstname *string `json:"firstname,omitempty"`
	Lastname *string `json:"lastname,omitempty"`
	Comments *string `json:"comments,omitempty"`
	Createdate *int64 `json:"createdate,omitempty"`
	Lastpasswordchangedate *int64 `json:"lastpasswordchangedate,omitempty"`
	Userpref *string `json:"userpref,omitempty"`
	Localonly *bool `json:"localonly,omitempty"`
	Orglist []OrganizationRest `json:"orglist,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewUserRest instantiates a new UserRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserRest() *UserRest {
	this := UserRest{}
	return &this
}

// NewUserRestWithDefaults instantiates a new UserRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserRestWithDefaults() *UserRest {
	this := UserRest{}
	return &this
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserRest) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserRest) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserRest) SetPassword(v string) {
	o.Password = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *UserRest) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *UserRest) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *UserRest) SetVersion(v int32) {
	o.Version = &v
}

// GetRightlist returns the Rightlist field value if set, zero value otherwise.
func (o *UserRest) GetRightlist() []RightRest {
	if o == nil || IsNil(o.Rightlist) {
		var ret []RightRest
		return ret
	}
	return o.Rightlist
}

// GetRightlistOk returns a tuple with the Rightlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetRightlistOk() ([]RightRest, bool) {
	if o == nil || IsNil(o.Rightlist) {
		return nil, false
	}
	return o.Rightlist, true
}

// HasRightlist returns a boolean if a field has been set.
func (o *UserRest) HasRightlist() bool {
	if o != nil && !IsNil(o.Rightlist) {
		return true
	}

	return false
}

// SetRightlist gets a reference to the given []RightRest and assigns it to the Rightlist field.
func (o *UserRest) SetRightlist(v []RightRest) {
	o.Rightlist = v
}

// GetRolelist returns the Rolelist field value if set, zero value otherwise.
func (o *UserRest) GetRolelist() []RoleRest {
	if o == nil || IsNil(o.Rolelist) {
		var ret []RoleRest
		return ret
	}
	return o.Rolelist
}

// GetRolelistOk returns a tuple with the Rolelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetRolelistOk() ([]RoleRest, bool) {
	if o == nil || IsNil(o.Rolelist) {
		return nil, false
	}
	return o.Rolelist, true
}

// HasRolelist returns a boolean if a field has been set.
func (o *UserRest) HasRolelist() bool {
	if o != nil && !IsNil(o.Rolelist) {
		return true
	}

	return false
}

// SetRolelist gets a reference to the given []RoleRest and assigns it to the Rolelist field.
func (o *UserRest) SetRolelist(v []RoleRest) {
	o.Rolelist = v
}

// GetModifydate returns the Modifydate field value if set, zero value otherwise.
func (o *UserRest) GetModifydate() int64 {
	if o == nil || IsNil(o.Modifydate) {
		var ret int64
		return ret
	}
	return *o.Modifydate
}

// GetModifydateOk returns a tuple with the Modifydate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetModifydateOk() (*int64, bool) {
	if o == nil || IsNil(o.Modifydate) {
		return nil, false
	}
	return o.Modifydate, true
}

// HasModifydate returns a boolean if a field has been set.
func (o *UserRest) HasModifydate() bool {
	if o != nil && !IsNil(o.Modifydate) {
		return true
	}

	return false
}

// SetModifydate gets a reference to the given int64 and assigns it to the Modifydate field.
func (o *UserRest) SetModifydate(v int64) {
	o.Modifydate = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserRest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserRest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserRest) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserRest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserRest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserRest) SetName(v string) {
	o.Name = &v
}

// GetDataaccesslevel returns the Dataaccesslevel field value if set, zero value otherwise.
func (o *UserRest) GetDataaccesslevel() int32 {
	if o == nil || IsNil(o.Dataaccesslevel) {
		var ret int32
		return ret
	}
	return *o.Dataaccesslevel
}

// GetDataaccesslevelOk returns a tuple with the Dataaccesslevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetDataaccesslevelOk() (*int32, bool) {
	if o == nil || IsNil(o.Dataaccesslevel) {
		return nil, false
	}
	return o.Dataaccesslevel, true
}

// HasDataaccesslevel returns a boolean if a field has been set.
func (o *UserRest) HasDataaccesslevel() bool {
	if o != nil && !IsNil(o.Dataaccesslevel) {
		return true
	}

	return false
}

// SetDataaccesslevel gets a reference to the given int32 and assigns it to the Dataaccesslevel field.
func (o *UserRest) SetDataaccesslevel(v int32) {
	o.Dataaccesslevel = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *UserRest) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *UserRest) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *UserRest) SetTimezone(v string) {
	o.Timezone = &v
}

// GetFirstname returns the Firstname field value if set, zero value otherwise.
func (o *UserRest) GetFirstname() string {
	if o == nil || IsNil(o.Firstname) {
		var ret string
		return ret
	}
	return *o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetFirstnameOk() (*string, bool) {
	if o == nil || IsNil(o.Firstname) {
		return nil, false
	}
	return o.Firstname, true
}

// HasFirstname returns a boolean if a field has been set.
func (o *UserRest) HasFirstname() bool {
	if o != nil && !IsNil(o.Firstname) {
		return true
	}

	return false
}

// SetFirstname gets a reference to the given string and assigns it to the Firstname field.
func (o *UserRest) SetFirstname(v string) {
	o.Firstname = &v
}

// GetLastname returns the Lastname field value if set, zero value otherwise.
func (o *UserRest) GetLastname() string {
	if o == nil || IsNil(o.Lastname) {
		var ret string
		return ret
	}
	return *o.Lastname
}

// GetLastnameOk returns a tuple with the Lastname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetLastnameOk() (*string, bool) {
	if o == nil || IsNil(o.Lastname) {
		return nil, false
	}
	return o.Lastname, true
}

// HasLastname returns a boolean if a field has been set.
func (o *UserRest) HasLastname() bool {
	if o != nil && !IsNil(o.Lastname) {
		return true
	}

	return false
}

// SetLastname gets a reference to the given string and assigns it to the Lastname field.
func (o *UserRest) SetLastname(v string) {
	o.Lastname = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *UserRest) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *UserRest) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *UserRest) SetComments(v string) {
	o.Comments = &v
}

// GetCreatedate returns the Createdate field value if set, zero value otherwise.
func (o *UserRest) GetCreatedate() int64 {
	if o == nil || IsNil(o.Createdate) {
		var ret int64
		return ret
	}
	return *o.Createdate
}

// GetCreatedateOk returns a tuple with the Createdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetCreatedateOk() (*int64, bool) {
	if o == nil || IsNil(o.Createdate) {
		return nil, false
	}
	return o.Createdate, true
}

// HasCreatedate returns a boolean if a field has been set.
func (o *UserRest) HasCreatedate() bool {
	if o != nil && !IsNil(o.Createdate) {
		return true
	}

	return false
}

// SetCreatedate gets a reference to the given int64 and assigns it to the Createdate field.
func (o *UserRest) SetCreatedate(v int64) {
	o.Createdate = &v
}

// GetLastpasswordchangedate returns the Lastpasswordchangedate field value if set, zero value otherwise.
func (o *UserRest) GetLastpasswordchangedate() int64 {
	if o == nil || IsNil(o.Lastpasswordchangedate) {
		var ret int64
		return ret
	}
	return *o.Lastpasswordchangedate
}

// GetLastpasswordchangedateOk returns a tuple with the Lastpasswordchangedate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetLastpasswordchangedateOk() (*int64, bool) {
	if o == nil || IsNil(o.Lastpasswordchangedate) {
		return nil, false
	}
	return o.Lastpasswordchangedate, true
}

// HasLastpasswordchangedate returns a boolean if a field has been set.
func (o *UserRest) HasLastpasswordchangedate() bool {
	if o != nil && !IsNil(o.Lastpasswordchangedate) {
		return true
	}

	return false
}

// SetLastpasswordchangedate gets a reference to the given int64 and assigns it to the Lastpasswordchangedate field.
func (o *UserRest) SetLastpasswordchangedate(v int64) {
	o.Lastpasswordchangedate = &v
}

// GetUserpref returns the Userpref field value if set, zero value otherwise.
func (o *UserRest) GetUserpref() string {
	if o == nil || IsNil(o.Userpref) {
		var ret string
		return ret
	}
	return *o.Userpref
}

// GetUserprefOk returns a tuple with the Userpref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetUserprefOk() (*string, bool) {
	if o == nil || IsNil(o.Userpref) {
		return nil, false
	}
	return o.Userpref, true
}

// HasUserpref returns a boolean if a field has been set.
func (o *UserRest) HasUserpref() bool {
	if o != nil && !IsNil(o.Userpref) {
		return true
	}

	return false
}

// SetUserpref gets a reference to the given string and assigns it to the Userpref field.
func (o *UserRest) SetUserpref(v string) {
	o.Userpref = &v
}

// GetLocalonly returns the Localonly field value if set, zero value otherwise.
func (o *UserRest) GetLocalonly() bool {
	if o == nil || IsNil(o.Localonly) {
		var ret bool
		return ret
	}
	return *o.Localonly
}

// GetLocalonlyOk returns a tuple with the Localonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetLocalonlyOk() (*bool, bool) {
	if o == nil || IsNil(o.Localonly) {
		return nil, false
	}
	return o.Localonly, true
}

// HasLocalonly returns a boolean if a field has been set.
func (o *UserRest) HasLocalonly() bool {
	if o != nil && !IsNil(o.Localonly) {
		return true
	}

	return false
}

// SetLocalonly gets a reference to the given bool and assigns it to the Localonly field.
func (o *UserRest) SetLocalonly(v bool) {
	o.Localonly = &v
}

// GetOrglist returns the Orglist field value if set, zero value otherwise.
func (o *UserRest) GetOrglist() []OrganizationRest {
	if o == nil || IsNil(o.Orglist) {
		var ret []OrganizationRest
		return ret
	}
	return o.Orglist
}

// GetOrglistOk returns a tuple with the Orglist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetOrglistOk() ([]OrganizationRest, bool) {
	if o == nil || IsNil(o.Orglist) {
		return nil, false
	}
	return o.Orglist, true
}

// HasOrglist returns a boolean if a field has been set.
func (o *UserRest) HasOrglist() bool {
	if o != nil && !IsNil(o.Orglist) {
		return true
	}

	return false
}

// SetOrglist gets a reference to the given []OrganizationRest and assigns it to the Orglist field.
func (o *UserRest) SetOrglist(v []OrganizationRest) {
	o.Orglist = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *UserRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *UserRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *UserRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *UserRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *UserRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *UserRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *UserRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *UserRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *UserRest) SetStale(v bool) {
	o.Stale = &v
}

func (o UserRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Rightlist) {
		toSerialize["rightlist"] = o.Rightlist
	}
	if !IsNil(o.Rolelist) {
		toSerialize["rolelist"] = o.Rolelist
	}
	if !IsNil(o.Modifydate) {
		toSerialize["modifydate"] = o.Modifydate
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Dataaccesslevel) {
		toSerialize["dataaccesslevel"] = o.Dataaccesslevel
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.Firstname) {
		toSerialize["firstname"] = o.Firstname
	}
	if !IsNil(o.Lastname) {
		toSerialize["lastname"] = o.Lastname
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Createdate) {
		toSerialize["createdate"] = o.Createdate
	}
	if !IsNil(o.Lastpasswordchangedate) {
		toSerialize["lastpasswordchangedate"] = o.Lastpasswordchangedate
	}
	if !IsNil(o.Userpref) {
		toSerialize["userpref"] = o.Userpref
	}
	if !IsNil(o.Localonly) {
		toSerialize["localonly"] = o.Localonly
	}
	if !IsNil(o.Orglist) {
		toSerialize["orglist"] = o.Orglist
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableUserRest struct {
	value *UserRest
	isSet bool
}

func (v NullableUserRest) Get() *UserRest {
	return v.value
}

func (v *NullableUserRest) Set(val *UserRest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRest(val *UserRest) *NullableUserRest {
	return &NullableUserRest{value: val, isSet: true}
}

func (v NullableUserRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


