/*
Backup and DR Service: Management Console API Spec

This document defines the API for the Global Manager. All communication is done over HTTPS with UTF-8 encoding. JSON is the only supported format for both request and response payloads. <p></p>Please read <a href=\"https://cloud.google.com/backup-disaster-recovery/docs/api/RestAPIGeneralConcepts.pdf\">Management Console API General concept</a><p></p>To login, use the /session POST API below.<br></br>Then copy the resulting session_id from the output and click on the Authorize button on the top right. Paste the string \"Actifio \" followed by the session id into the form and click Authorize.<p></p>Login is not necessary for reading the rest of this API document. However, login will allow you to try the APIs out within this page.

API version: V11.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NameValueRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NameValueRest{}

// NameValueRest struct for NameValueRest
type NameValueRest struct {
	Desc *string `json:"desc,omitempty"`
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
	Default *string `json:"default,omitempty"`
	Type *string `json:"type,omitempty"`
	Selection []DescValueRest `json:"selection,omitempty"`
	Alias *string `json:"alias,omitempty"`
	Constant *string `json:"constant,omitempty"`
	Select *bool `json:"select,omitempty"`
	Editableonmount *bool `json:"editableonmount,omitempty"`
	// Unique ID for this object
	Id *string `json:"id,omitempty"`
	// URL to access this object
	Href *string `json:"href,omitempty"`
	// When this object was last synced from appliances (UNIX Epoch time in microseconds). It does not apply to local resources.
	Syncdate *int64 `json:"syncdate,omitempty"`
	// Optional flag to indicate if the information is out-of-date due to communication problems with appliances. It does not apply to local resources.
	Stale *bool `json:"stale,omitempty"`
}

// NewNameValueRest instantiates a new NameValueRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNameValueRest() *NameValueRest {
	this := NameValueRest{}
	return &this
}

// NewNameValueRestWithDefaults instantiates a new NameValueRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNameValueRestWithDefaults() *NameValueRest {
	this := NameValueRest{}
	return &this
}

// GetDesc returns the Desc field value if set, zero value otherwise.
func (o *NameValueRest) GetDesc() string {
	if o == nil || IsNil(o.Desc) {
		var ret string
		return ret
	}
	return *o.Desc
}

// GetDescOk returns a tuple with the Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueRest) GetDescOk() (*string, bool) {
	if o == nil || IsNil(o.Desc) {
		return nil, false
	}
	return o.Desc, true
}

// HasDesc returns a boolean if a field has been set.
func (o *NameValueRest) HasDesc() bool {
	if o != nil && !IsNil(o.Desc) {
		return true
	}

	return false
}

// SetDesc gets a reference to the given string and assigns it to the Desc field.
func (o *NameValueRest) SetDesc(v string) {
	o.Desc = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NameValueRest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueRest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NameValueRest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NameValueRest) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NameValueRest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueRest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NameValueRest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NameValueRest) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *NameValueRest) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueRest) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *NameValueRest) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *NameValueRest) SetValue(v string) {
	o.Value = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *NameValueRest) GetDefault() string {
	if o == nil || IsNil(o.Default) {
		var ret string
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueRest) GetDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *NameValueRest) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given string and assigns it to the Default field.
func (o *NameValueRest) SetDefault(v string) {
	o.Default = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NameValueRest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueRest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NameValueRest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NameValueRest) SetType(v string) {
	o.Type = &v
}

// GetSelection returns the Selection field value if set, zero value otherwise.
func (o *NameValueRest) GetSelection() []DescValueRest {
	if o == nil || IsNil(o.Selection) {
		var ret []DescValueRest
		return ret
	}
	return o.Selection
}

// GetSelectionOk returns a tuple with the Selection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueRest) GetSelectionOk() ([]DescValueRest, bool) {
	if o == nil || IsNil(o.Selection) {
		return nil, false
	}
	return o.Selection, true
}

// HasSelection returns a boolean if a field has been set.
func (o *NameValueRest) HasSelection() bool {
	if o != nil && !IsNil(o.Selection) {
		return true
	}

	return false
}

// SetSelection gets a reference to the given []DescValueRest and assigns it to the Selection field.
func (o *NameValueRest) SetSelection(v []DescValueRest) {
	o.Selection = v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *NameValueRest) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueRest) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *NameValueRest) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *NameValueRest) SetAlias(v string) {
	o.Alias = &v
}

// GetConstant returns the Constant field value if set, zero value otherwise.
func (o *NameValueRest) GetConstant() string {
	if o == nil || IsNil(o.Constant) {
		var ret string
		return ret
	}
	return *o.Constant
}

// GetConstantOk returns a tuple with the Constant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueRest) GetConstantOk() (*string, bool) {
	if o == nil || IsNil(o.Constant) {
		return nil, false
	}
	return o.Constant, true
}

// HasConstant returns a boolean if a field has been set.
func (o *NameValueRest) HasConstant() bool {
	if o != nil && !IsNil(o.Constant) {
		return true
	}

	return false
}

// SetConstant gets a reference to the given string and assigns it to the Constant field.
func (o *NameValueRest) SetConstant(v string) {
	o.Constant = &v
}

// GetSelect returns the Select field value if set, zero value otherwise.
func (o *NameValueRest) GetSelect() bool {
	if o == nil || IsNil(o.Select) {
		var ret bool
		return ret
	}
	return *o.Select
}

// GetSelectOk returns a tuple with the Select field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueRest) GetSelectOk() (*bool, bool) {
	if o == nil || IsNil(o.Select) {
		return nil, false
	}
	return o.Select, true
}

// HasSelect returns a boolean if a field has been set.
func (o *NameValueRest) HasSelect() bool {
	if o != nil && !IsNil(o.Select) {
		return true
	}

	return false
}

// SetSelect gets a reference to the given bool and assigns it to the Select field.
func (o *NameValueRest) SetSelect(v bool) {
	o.Select = &v
}

// GetEditableonmount returns the Editableonmount field value if set, zero value otherwise.
func (o *NameValueRest) GetEditableonmount() bool {
	if o == nil || IsNil(o.Editableonmount) {
		var ret bool
		return ret
	}
	return *o.Editableonmount
}

// GetEditableonmountOk returns a tuple with the Editableonmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueRest) GetEditableonmountOk() (*bool, bool) {
	if o == nil || IsNil(o.Editableonmount) {
		return nil, false
	}
	return o.Editableonmount, true
}

// HasEditableonmount returns a boolean if a field has been set.
func (o *NameValueRest) HasEditableonmount() bool {
	if o != nil && !IsNil(o.Editableonmount) {
		return true
	}

	return false
}

// SetEditableonmount gets a reference to the given bool and assigns it to the Editableonmount field.
func (o *NameValueRest) SetEditableonmount(v bool) {
	o.Editableonmount = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NameValueRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NameValueRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NameValueRest) SetId(v string) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *NameValueRest) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueRest) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *NameValueRest) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *NameValueRest) SetHref(v string) {
	o.Href = &v
}

// GetSyncdate returns the Syncdate field value if set, zero value otherwise.
func (o *NameValueRest) GetSyncdate() int64 {
	if o == nil || IsNil(o.Syncdate) {
		var ret int64
		return ret
	}
	return *o.Syncdate
}

// GetSyncdateOk returns a tuple with the Syncdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueRest) GetSyncdateOk() (*int64, bool) {
	if o == nil || IsNil(o.Syncdate) {
		return nil, false
	}
	return o.Syncdate, true
}

// HasSyncdate returns a boolean if a field has been set.
func (o *NameValueRest) HasSyncdate() bool {
	if o != nil && !IsNil(o.Syncdate) {
		return true
	}

	return false
}

// SetSyncdate gets a reference to the given int64 and assigns it to the Syncdate field.
func (o *NameValueRest) SetSyncdate(v int64) {
	o.Syncdate = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *NameValueRest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueRest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *NameValueRest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *NameValueRest) SetStale(v bool) {
	o.Stale = &v
}

func (o NameValueRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NameValueRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Desc) {
		toSerialize["desc"] = o.Desc
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Selection) {
		toSerialize["selection"] = o.Selection
	}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.Constant) {
		toSerialize["constant"] = o.Constant
	}
	if !IsNil(o.Select) {
		toSerialize["select"] = o.Select
	}
	if !IsNil(o.Editableonmount) {
		toSerialize["editableonmount"] = o.Editableonmount
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Syncdate) {
		toSerialize["syncdate"] = o.Syncdate
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableNameValueRest struct {
	value *NameValueRest
	isSet bool
}

func (v NullableNameValueRest) Get() *NameValueRest {
	return v.value
}

func (v *NullableNameValueRest) Set(val *NameValueRest) {
	v.value = val
	v.isSet = true
}

func (v NullableNameValueRest) IsSet() bool {
	return v.isSet
}

func (v *NullableNameValueRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNameValueRest(val *NameValueRest) *NullableNameValueRest {
	return &NullableNameValueRest{value: val, isSet: true}
}

func (v NullableNameValueRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNameValueRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


